import {
  fade,
  fly,
  scale,
  slide
} from "./chunk-D5DTUQHB.js";
import {
  Tween,
  prefersReducedMotion
} from "./chunk-PFAQ7GRI.js";
import "./chunk-GD5G7L2O.js";
import "./chunk-VQWKCA3D.js";
import "./chunk-P2FLJF2D.js";
import "./chunk-D3LIQYXK.js";
import {
  cubicOut,
  sineIn
} from "./chunk-HFOMIUUW.js";
import {
  CLASS,
  action,
  add_locations,
  append_styles,
  attach,
  attribute_effect,
  bind_checked,
  bind_files,
  bind_group,
  bind_select_value,
  bind_this,
  bind_value,
  bind_window_size,
  check_target,
  cleanup_styles,
  clsx as clsx2,
  component,
  createAttachmentKey,
  create_ownership_validator,
  each,
  element,
  hmr,
  html,
  if_block,
  index,
  init_select,
  key,
  legacy_api,
  log_if_contains_state,
  onDestroy,
  onMount,
  prop,
  remove_input_defaults,
  rest_props,
  select_option,
  set_attribute,
  set_class,
  set_selected,
  set_style,
  setup_stores,
  snippet,
  spread_props,
  store_get,
  transition,
  validate_dynamic_element_tag,
  validate_each_keys,
  validate_snippet_args,
  validate_store,
  validate_void_dynamic_element,
  wrap_snippet,
  writable
} from "./chunk-PKGBQRSI.js";
import {
  clsx,
  clsx_default
} from "./chunk-DEX2RCYB.js";
import {
  append,
  comment,
  from_html,
  from_svg,
  head,
  props_id,
  set_text,
  text,
  with_script
} from "./chunk-GY6FU3QS.js";
import {
  $document,
  $window,
  FILENAME,
  HMR,
  add_svelte_meta,
  apply,
  child,
  delegate,
  equals,
  event,
  first_child,
  get,
  getContext,
  next,
  noop,
  pop,
  proxy,
  push,
  remove_textarea_child,
  replay_events,
  reset,
  set,
  setContext,
  sibling,
  state,
  strict_equals,
  tag,
  tag_proxy,
  template_effect,
  tick,
  to_array,
  track_reactivity_loss,
  untrack,
  update,
  user_derived,
  user_effect
} from "./chunk-EDMAUL6G.js";
import {
  true_default
} from "./chunk-CM4PGANL.js";
import "./chunk-KDIIJ4SZ.js";
import "./chunk-6VM5VFG3.js";

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/uiHelpers.svelte.js
function uiHelpers() {
  let isOpen = tag(state(false), "isOpen");
  function toggle2() {
    set(isOpen, !get(isOpen));
  }
  function close() {
    set(isOpen, false);
  }
  function open() {
    set(isOpen, true);
  }
  return {
    get isOpen() {
      return get(isOpen);
    },
    set isOpen(value) {
      set(isOpen, value, true);
    },
    toggle: toggle2,
    close,
    open
  };
}
function clickOutside(element2, callbackFunction) {
  const onClick = (event2) => {
    if (strict_equals(typeof callbackFunction, "function")) {
      const targetNode = event2.target;
      if (!element2.contains(targetNode)) {
        callbackFunction(event2);
      }
    } else {
      console.error("Callback function is not a function");
    }
  };
  element2.ownerDocument.body.addEventListener("click", onClick);
  return {
    update(newCallbackFunction) {
      if (strict_equals(typeof newCallbackFunction, "function")) {
        callbackFunction = newCallbackFunction;
      } else {
        console.error("New callback function is not a function");
      }
    },
    destroy() {
      element2.ownerDocument.body.removeEventListener("click", onClick);
    }
  };
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/theme/ThemeProvider.svelte
ThemeProvider[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/theme/ThemeProvider.svelte";
function ThemeProvider($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ThemeProvider);
  if ($$props.theme) {
    setContext("theme", $$props.theme);
  } else {
    console.log("ThemeProvider: No theme provided");
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", ThemeProvider, 20, 0);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ThemeProvider = hmr(ThemeProvider, () => ThemeProvider[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ThemeProvider[HMR].source;
    set(ThemeProvider[HMR].source, module.default[HMR].original);
  });
}
var ThemeProvider_default = ThemeProvider;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/theme/themeUtils.js
function getTheme(componentKey) {
  const theme = getContext("theme");
  return theme?.[componentKey];
}
function warnThemeDeprecation(component2, names, replacements) {
  if (!true_default)
    return;
  const nonEmptyNames = Object.keys(names).filter((name) => names[name]);
  if (nonEmptyNames.length === 0)
    return;
  let migrationHint = "";
  const usesClass = nonEmptyNames.some((name) => replacements?.[name] === "class");
  const propText = usesClass ? `"classes" or "class"` : `"classes"`;
  if (replacements) {
    const classProps = [];
    const classesObjectEntries = [];
    for (const name of nonEmptyNames) {
      const newKey = replacements[name];
      const value = names[name];
      if (!newKey || !value)
        continue;
      if (newKey === "class") {
        classProps.push(`class="${value}"`);
      } else {
        classesObjectEntries.push(`${newKey}: "${value}"`);
      }
    }
    const hintLines = [];
    if (classProps.length > 0)
      hintLines.push(...classProps);
    if (classesObjectEntries.length > 0) {
      hintLines.push(`classes={{ ${classesObjectEntries.join(", ")} }}`);
    }
    if (hintLines.length > 0) {
      migrationHint = `
Migration example: ${hintLines.join(" ")}`;
    }
  }
  const stack = new Error().stack;
  const externalCaller = getExternalCaller(stack);
  console.warn(`⚠️ The following "${component2}" props are deprecated: ${nonEmptyNames.map((n2) => `"${n2}"`).join(", ")}.
💡 Please use the ${propText} prop instead.${migrationHint}
` + (externalCaller ? `🔍 Used at: ${externalCaller}` : ""));
}
function getExternalCaller(stack) {
  if (!stack)
    return null;
  const lines = stack.split("\n").slice(2);
  const currentFileMatch = lines[0]?.match(/(?:\()?(.*?\.svelte):\d+:\d+\)?$/);
  const currentFile = currentFileMatch?.[1];
  for (const line of lines) {
    const match2 = line.match(/(?:\()?(.*?\.svelte):\d+:\d+\)?$/);
    const file = match2?.[1];
    if (file && file !== currentFile) {
      return line.trim().replace(/^at /, "");
    }
  }
  return null;
}

// node_modules/.pnpm/tailwind-variants@3.1.1_tailwind-merge@3.3.1_tailwindcss@4.1.13/node_modules/tailwind-variants/dist/chunk-GQLG7IS2.js
var y = /\s+/g;
var a = (t) => typeof t != "string" || !t ? t : t.replace(y, " ").trim();
var u = (...t) => {
  let r = [], n2 = (e) => {
    if (!e && e !== 0 && e !== 0n) return;
    if (Array.isArray(e)) {
      for (let s = 0, o = e.length; s < o; s++) n2(e[s]);
      return;
    }
    let f2 = typeof e;
    if (f2 === "string" || f2 === "number" || f2 === "bigint") {
      if (f2 === "number" && e !== e) return;
      r.push(String(e));
    } else if (f2 === "object") {
      let s = Object.keys(e);
      for (let o = 0, i2 = s.length; o < i2; o++) {
        let l = s[o];
        e[l] && r.push(l);
      }
    }
  };
  for (let e = 0, f2 = t.length; e < f2; e++) {
    let s = t[e];
    s != null && n2(s);
  }
  return r.length > 0 ? a(r.join(" ")) : void 0;
};
var h = (t) => t === false ? "false" : t === true ? "true" : t === 0 ? "0" : t;
var x = (t) => {
  if (!t || typeof t != "object") return true;
  for (let r in t) return false;
  return true;
};
var k = (t, r) => {
  if (t === r) return true;
  if (!t || !r) return false;
  let n2 = Object.keys(t), e = Object.keys(r);
  if (n2.length !== e.length) return false;
  for (let f2 = 0; f2 < n2.length; f2++) {
    let s = n2[f2];
    if (!e.includes(s) || t[s] !== r[s]) return false;
  }
  return true;
};
var d = (t, r) => {
  for (let n2 in r) if (Object.prototype.hasOwnProperty.call(r, n2)) {
    let e = r[n2];
    n2 in t ? t[n2] = u(t[n2], e) : t[n2] = e;
  }
  return t;
};
var c = (t, r) => {
  for (let n2 = 0; n2 < t.length; n2++) {
    let e = t[n2];
    Array.isArray(e) ? c(e, r) : e && r.push(e);
  }
};
var g = (...t) => {
  let r = [];
  c(t, r);
  let n2 = [];
  for (let e = 0; e < r.length; e++) r[e] && n2.push(r[e]);
  return n2;
};
var p = (t, r) => {
  let n2 = {};
  for (let e in t) {
    let f2 = t[e];
    if (e in r) {
      let s = r[e];
      Array.isArray(f2) || Array.isArray(s) ? n2[e] = g(s, f2) : typeof f2 == "object" && typeof s == "object" && f2 && s ? n2[e] = p(f2, s) : n2[e] = s + " " + f2;
    } else n2[e] = f2;
  }
  for (let e in r) e in t || (n2[e] = r[e]);
  return n2;
};

// node_modules/.pnpm/tailwind-variants@3.1.1_tailwind-merge@3.3.1_tailwindcss@4.1.13/node_modules/tailwind-variants/dist/chunk-IFWU2MEM.js
var Q = { twMerge: true, twMergeConfig: {}, responsiveVariants: false };
function ne() {
  let b = null, w = {}, A2 = false;
  return { get cachedTwMerge() {
    return b;
  }, set cachedTwMerge(u2) {
    b = u2;
  }, get cachedTwMergeConfig() {
    return w;
  }, set cachedTwMergeConfig(u2) {
    w = u2;
  }, get didTwMergeConfigChange() {
    return A2;
  }, set didTwMergeConfigChange(u2) {
    A2 = u2;
  }, reset() {
    b = null, w = {}, A2 = false;
  } };
}
var S = ne();
var le = (b$1) => {
  let w = (u2, $) => {
    let { extend: c$1 = null, slots: M = {}, variants: q = {}, compoundVariants: L = [], compoundSlots: v = [], defaultVariants: U = {} } = u2, d$1 = { ...Q, ...$ }, x2 = c$1?.base ? u(c$1.base, u2?.base) : u2?.base, p2 = c$1?.variants && !x(c$1.variants) ? p(q, c$1.variants) : q, E = c$1?.defaultVariants && !x(c$1.defaultVariants) ? { ...c$1.defaultVariants, ...U } : U;
    !x(d$1.twMergeConfig) && !k(d$1.twMergeConfig, S.cachedTwMergeConfig) && (S.didTwMergeConfigChange = true, S.cachedTwMergeConfig = d$1.twMergeConfig);
    let N = x(c$1?.slots), O = x(M) ? {} : { base: u(u2?.base, N && c$1?.base), ...M }, j$1 = N ? O : d({ ...c$1?.slots }, x(O) ? { base: u2?.base } : O), T2 = x(c$1?.compoundVariants) ? L : g(c$1?.compoundVariants, L), y2 = (h2) => {
      if (x(p2) && x(M) && N) return b$1(x2, h2?.class, h2?.className)(d$1);
      if (T2 && !Array.isArray(T2)) throw new TypeError(`The "compoundVariants" prop must be an array. Received: ${typeof T2}`);
      if (v && !Array.isArray(v)) throw new TypeError(`The "compoundSlots" prop must be an array. Received: ${typeof v}`);
      let Y = (t, e, n2 = [], a$1) => {
        let r = n2;
        if (typeof e == "string") {
          let i2 = a(e).split(" ");
          for (let l = 0; l < i2.length; l++) r.push(`${t}:${i2[l]}`);
        } else if (Array.isArray(e)) for (let s = 0; s < e.length; s++) r.push(`${t}:${e[s]}`);
        else if (typeof e == "object" && typeof a$1 == "string" && a$1 in e) {
          let s = e[a$1];
          if (s && typeof s == "string") {
            let l = a(s).split(" "), f2 = [];
            for (let o = 0; o < l.length; o++) f2.push(`${t}:${l[o]}`);
            r[a$1] = r[a$1] ? r[a$1].concat(f2) : f2;
          } else if (Array.isArray(s) && s.length > 0) {
            let i2 = [];
            for (let l = 0; l < s.length; l++) i2.push(`${t}:${s[l]}`);
            r[a$1] = i2;
          }
        }
        return r;
      }, W = (t, e = p2, n2 = null, a2 = null) => {
        let r = e[t];
        if (!r || x(r)) return null;
        let s = a2?.[t] ?? h2?.[t];
        if (s === null) return null;
        let i2 = h(s), l = Array.isArray(d$1.responsiveVariants) && d$1.responsiveVariants.length > 0 || d$1.responsiveVariants === true, f2 = E?.[t], o = [];
        if (typeof i2 == "object" && l) for (let [C2, H] of Object.entries(i2)) {
          let te = r[H];
          if (C2 === "initial") {
            f2 = H;
            continue;
          }
          Array.isArray(d$1.responsiveVariants) && !d$1.responsiveVariants.includes(C2) || (o = Y(C2, te, o, n2));
        }
        let V = i2 != null && typeof i2 != "object" ? i2 : h(f2), m = r[V || "false"];
        return typeof o == "object" && typeof n2 == "string" && o[n2] ? d(o, m) : o.length > 0 ? (o.push(m), n2 === "base" ? o.join(" ") : o) : m;
      }, Z = () => {
        if (!p2) return null;
        let t = Object.keys(p2), e = [];
        for (let n2 = 0; n2 < t.length; n2++) {
          let a2 = W(t[n2], p2);
          a2 && e.push(a2);
        }
        return e;
      }, _ = (t, e) => {
        if (!p2 || typeof p2 != "object") return null;
        let n2 = [];
        for (let a2 in p2) {
          let r = W(a2, p2, t, e), s = t === "base" && typeof r == "string" ? r : r && r[t];
          s && n2.push(s);
        }
        return n2;
      }, z = {};
      for (let t in h2) {
        let e = h2[t];
        e !== void 0 && (z[t] = e);
      }
      let D = (t, e) => {
        let n2 = typeof h2?.[t] == "object" ? { [t]: h2[t]?.initial } : {};
        return { ...E, ...z, ...n2, ...e };
      }, G = (t = [], e) => {
        let n2 = [], a2 = t.length;
        for (let r = 0; r < a2; r++) {
          let { class: s, className: i2, ...l } = t[r], f2 = true, o = D(null, e);
          for (let V in l) {
            let m = l[V], C2 = o[V];
            if (Array.isArray(m)) {
              if (!m.includes(C2)) {
                f2 = false;
                break;
              }
            } else {
              if ((m == null || m === false) && (C2 == null || C2 === false)) continue;
              if (C2 !== m) {
                f2 = false;
                break;
              }
            }
          }
          f2 && (s && n2.push(s), i2 && n2.push(i2));
        }
        return n2;
      }, K = (t) => {
        let e = G(T2, t);
        if (!Array.isArray(e)) return e;
        let n2 = {}, a2 = b$1;
        for (let r = 0; r < e.length; r++) {
          let s = e[r];
          if (typeof s == "string") n2.base = a2(n2.base, s)(d$1);
          else if (typeof s == "object") for (let i2 in s) n2[i2] = a2(n2[i2], s[i2])(d$1);
        }
        return n2;
      }, ee = (t) => {
        if (v.length < 1) return null;
        let e = {}, n2 = D(null, t);
        for (let a2 = 0; a2 < v.length; a2++) {
          let { slots: r = [], class: s, className: i2, ...l } = v[a2];
          if (!x(l)) {
            let f2 = true;
            for (let o in l) {
              let V = n2[o], m = l[o];
              if (V === void 0 || (Array.isArray(m) ? !m.includes(V) : m !== V)) {
                f2 = false;
                break;
              }
            }
            if (!f2) continue;
          }
          for (let f2 = 0; f2 < r.length; f2++) {
            let o = r[f2];
            e[o] || (e[o] = []), e[o].push([s, i2]);
          }
        }
        return e;
      };
      if (!x(M) || !N) {
        let t = {};
        if (typeof j$1 == "object" && !x(j$1)) {
          let e = b$1;
          for (let n2 in j$1) t[n2] = (a2) => {
            let r = K(a2), s = ee(a2);
            return e(j$1[n2], _(n2, a2), r ? r[n2] : void 0, s ? s[n2] : void 0, a2?.class, a2?.className)(d$1);
          };
        }
        return t;
      }
      return b$1(x2, Z(), G(T2), h2?.class, h2?.className)(d$1);
    }, X = () => {
      if (!(!p2 || typeof p2 != "object")) return Object.keys(p2);
    };
    return y2.variantKeys = X(), y2.extend = c$1, y2.base = x2, y2.slots = j$1, y2.variants = p2, y2.defaultVariants = E, y2.compoundSlots = v, y2.compoundVariants = T2, y2;
  };
  return { tv: w, createTV: (u2) => ($, c2) => w($, c2 ? p(u2, c2) : u2) };
};

// node_modules/.pnpm/tailwind-merge@3.3.1/node_modules/tailwind-merge/dist/bundle-mjs.mjs
var CLASS_PART_SEPARATOR = "-";
var createClassGroupUtils = (config) => {
  const classMap = createClassMap(config);
  const {
    conflictingClassGroups,
    conflictingClassGroupModifiers
  } = config;
  const getClassGroupId = (className) => {
    const classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  };
  const getConflictingClassGroupIds = (classGroupId, hasPostfixModifier) => {
    const conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [...conflicts, ...conflictingClassGroupModifiers[classGroupId]];
    }
    return conflicts;
  };
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
};
var getGroupRecursive = (classParts, classPartObject) => {
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  const currentClassPart = classParts[0];
  const nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  const classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  const classRest = classParts.join(CLASS_PART_SEPARATOR);
  return classPartObject.validators.find(({
    validator
  }) => validator(classRest))?.classGroupId;
};
var arbitraryPropertyRegex = /^\[(.+)\]$/;
var getGroupIdForArbitraryProperty = (className) => {
  if (arbitraryPropertyRegex.test(className)) {
    const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    const property = arbitraryPropertyClassName?.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
};
var createClassMap = (config) => {
  const {
    theme,
    classGroups
  } = config;
  const classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  for (const classGroupId in classGroups) {
    processClassesRecursively(classGroups[classGroupId], classMap, classGroupId, theme);
  }
  return classMap;
};
var processClassesRecursively = (classGroup, classPartObject, classGroupId, theme) => {
  classGroup.forEach((classDefinition) => {
    if (typeof classDefinition === "string") {
      const classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(([key2, classGroup2]) => {
      processClassesRecursively(classGroup2, getPart(classPartObject, key2), classGroupId, theme);
    });
  });
};
var getPart = (classPartObject, path) => {
  let currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
};
var isThemeGetter = (func) => func.isThemeGetter;
var createLruCache = (maxCacheSize) => {
  if (maxCacheSize < 1) {
    return {
      get: () => void 0,
      set: () => {
      }
    };
  }
  let cacheSize = 0;
  let cache = /* @__PURE__ */ new Map();
  let previousCache = /* @__PURE__ */ new Map();
  const update2 = (key2, value) => {
    cache.set(key2, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  };
  return {
    get(key2) {
      let value = cache.get(key2);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key2)) !== void 0) {
        update2(key2, value);
        return value;
      }
    },
    set(key2, value) {
      if (cache.has(key2)) {
        cache.set(key2, value);
      } else {
        update2(key2, value);
      }
    }
  };
};
var IMPORTANT_MODIFIER = "!";
var MODIFIER_SEPARATOR = ":";
var MODIFIER_SEPARATOR_LENGTH = MODIFIER_SEPARATOR.length;
var createParseClassName = (config) => {
  const {
    prefix,
    experimentalParseClassName
  } = config;
  let parseClassName = (className) => {
    const modifiers = [];
    let bracketDepth = 0;
    let parenDepth = 0;
    let modifierStart = 0;
    let postfixModifierPosition;
    for (let index2 = 0; index2 < className.length; index2++) {
      let currentCharacter = className[index2];
      if (bracketDepth === 0 && parenDepth === 0) {
        if (currentCharacter === MODIFIER_SEPARATOR) {
          modifiers.push(className.slice(modifierStart, index2));
          modifierStart = index2 + MODIFIER_SEPARATOR_LENGTH;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index2;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      } else if (currentCharacter === "(") {
        parenDepth++;
      } else if (currentCharacter === ")") {
        parenDepth--;
      }
    }
    const baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    const baseClassName = stripImportantModifier(baseClassNameWithImportantModifier);
    const hasImportantModifier = baseClassName !== baseClassNameWithImportantModifier;
    const maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
  if (prefix) {
    const fullPrefix = prefix + MODIFIER_SEPARATOR;
    const parseClassNameOriginal = parseClassName;
    parseClassName = (className) => className.startsWith(fullPrefix) ? parseClassNameOriginal(className.substring(fullPrefix.length)) : {
      isExternal: true,
      modifiers: [],
      hasImportantModifier: false,
      baseClassName: className,
      maybePostfixModifierPosition: void 0
    };
  }
  if (experimentalParseClassName) {
    const parseClassNameOriginal = parseClassName;
    parseClassName = (className) => experimentalParseClassName({
      className,
      parseClassName: parseClassNameOriginal
    });
  }
  return parseClassName;
};
var stripImportantModifier = (baseClassName) => {
  if (baseClassName.endsWith(IMPORTANT_MODIFIER)) {
    return baseClassName.substring(0, baseClassName.length - 1);
  }
  if (baseClassName.startsWith(IMPORTANT_MODIFIER)) {
    return baseClassName.substring(1);
  }
  return baseClassName;
};
var createSortModifiers = (config) => {
  const orderSensitiveModifiers = Object.fromEntries(config.orderSensitiveModifiers.map((modifier) => [modifier, true]));
  const sortModifiers = (modifiers) => {
    if (modifiers.length <= 1) {
      return modifiers;
    }
    const sortedModifiers = [];
    let unsortedModifiers = [];
    modifiers.forEach((modifier) => {
      const isPositionSensitive = modifier[0] === "[" || orderSensitiveModifiers[modifier];
      if (isPositionSensitive) {
        sortedModifiers.push(...unsortedModifiers.sort(), modifier);
        unsortedModifiers = [];
      } else {
        unsortedModifiers.push(modifier);
      }
    });
    sortedModifiers.push(...unsortedModifiers.sort());
    return sortedModifiers;
  };
  return sortModifiers;
};
var createConfigUtils = (config) => ({
  cache: createLruCache(config.cacheSize),
  parseClassName: createParseClassName(config),
  sortModifiers: createSortModifiers(config),
  ...createClassGroupUtils(config)
});
var SPLIT_CLASSES_REGEX = /\s+/;
var mergeClassList = (classList, configUtils) => {
  const {
    parseClassName,
    getClassGroupId,
    getConflictingClassGroupIds,
    sortModifiers
  } = configUtils;
  const classGroupsInConflict = [];
  const classNames = classList.trim().split(SPLIT_CLASSES_REGEX);
  let result = "";
  for (let index2 = classNames.length - 1; index2 >= 0; index2 -= 1) {
    const originalClassName = classNames[index2];
    const {
      isExternal,
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    } = parseClassName(originalClassName);
    if (isExternal) {
      result = originalClassName + (result.length > 0 ? " " + result : result);
      continue;
    }
    let hasPostfixModifier = !!maybePostfixModifierPosition;
    let classGroupId = getClassGroupId(hasPostfixModifier ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    if (!classGroupId) {
      if (!hasPostfixModifier) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        result = originalClassName + (result.length > 0 ? " " + result : result);
        continue;
      }
      hasPostfixModifier = false;
    }
    const variantModifier = sortModifiers(modifiers).join(":");
    const modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    const classId = modifierId + classGroupId;
    if (classGroupsInConflict.includes(classId)) {
      continue;
    }
    classGroupsInConflict.push(classId);
    const conflictGroups = getConflictingClassGroupIds(classGroupId, hasPostfixModifier);
    for (let i2 = 0; i2 < conflictGroups.length; ++i2) {
      const group2 = conflictGroups[i2];
      classGroupsInConflict.push(modifierId + group2);
    }
    result = originalClassName + (result.length > 0 ? " " + result : result);
  }
  return result;
};
function twJoin() {
  let index2 = 0;
  let argument;
  let resolvedValue;
  let string = "";
  while (index2 < arguments.length) {
    if (argument = arguments[index2++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
var toValue = (mix) => {
  if (typeof mix === "string") {
    return mix;
  }
  let resolvedValue;
  let string = "";
  for (let k2 = 0; k2 < mix.length; k2++) {
    if (mix[k2]) {
      if (resolvedValue = toValue(mix[k2])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
};
function createTailwindMerge(createConfigFirst, ...createConfigRest) {
  let configUtils;
  let cacheGet;
  let cacheSet;
  let functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    const config = createConfigRest.reduce((previousConfig, createConfigCurrent) => createConfigCurrent(previousConfig), createConfigFirst());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    const cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    const result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}
var fromTheme = (key2) => {
  const themeGetter = (theme) => theme[key2] || [];
  themeGetter.isThemeGetter = true;
  return themeGetter;
};
var arbitraryValueRegex = /^\[(?:(\w[\w-]*):)?(.+)\]$/i;
var arbitraryVariableRegex = /^\((?:(\w[\w-]*):)?(.+)\)$/i;
var fractionRegex = /^\d+\/\d+$/;
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var colorFunctionRegex = /^(rgba?|hsla?|hwb|(ok)?(lab|lch)|color-mix)\(.+\)$/;
var shadowRegex = /^(inset_)?-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
var imageRegex = /^(url|image|image-set|cross-fade|element|(repeating-)?(linear|radial|conic)-gradient)\(.+\)$/;
var isFraction = (value) => fractionRegex.test(value);
var isNumber = (value) => !!value && !Number.isNaN(Number(value));
var isInteger = (value) => !!value && Number.isInteger(Number(value));
var isPercent = (value) => value.endsWith("%") && isNumber(value.slice(0, -1));
var isTshirtSize = (value) => tshirtUnitRegex.test(value);
var isAny = () => true;
var isLengthOnly = (value) => (
  // `colorFunctionRegex` check is necessary because color functions can have percentages in them which which would be incorrectly classified as lengths.
  // For example, `hsl(0 0% 0%)` would be classified as a length without this check.
  // I could also use lookbehind assertion in `lengthUnitRegex` but that isn't supported widely enough.
  lengthUnitRegex.test(value) && !colorFunctionRegex.test(value)
);
var isNever = () => false;
var isShadow = (value) => shadowRegex.test(value);
var isImage = (value) => imageRegex.test(value);
var isAnyNonArbitrary = (value) => !isArbitraryValue(value) && !isArbitraryVariable(value);
var isArbitrarySize = (value) => getIsArbitraryValue(value, isLabelSize, isNever);
var isArbitraryValue = (value) => arbitraryValueRegex.test(value);
var isArbitraryLength = (value) => getIsArbitraryValue(value, isLabelLength, isLengthOnly);
var isArbitraryNumber = (value) => getIsArbitraryValue(value, isLabelNumber, isNumber);
var isArbitraryPosition = (value) => getIsArbitraryValue(value, isLabelPosition, isNever);
var isArbitraryImage = (value) => getIsArbitraryValue(value, isLabelImage, isImage);
var isArbitraryShadow = (value) => getIsArbitraryValue(value, isLabelShadow, isShadow);
var isArbitraryVariable = (value) => arbitraryVariableRegex.test(value);
var isArbitraryVariableLength = (value) => getIsArbitraryVariable(value, isLabelLength);
var isArbitraryVariableFamilyName = (value) => getIsArbitraryVariable(value, isLabelFamilyName);
var isArbitraryVariablePosition = (value) => getIsArbitraryVariable(value, isLabelPosition);
var isArbitraryVariableSize = (value) => getIsArbitraryVariable(value, isLabelSize);
var isArbitraryVariableImage = (value) => getIsArbitraryVariable(value, isLabelImage);
var isArbitraryVariableShadow = (value) => getIsArbitraryVariable(value, isLabelShadow, true);
var getIsArbitraryValue = (value, testLabel, testValue) => {
  const result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return testLabel(result[1]);
    }
    return testValue(result[2]);
  }
  return false;
};
var getIsArbitraryVariable = (value, testLabel, shouldMatchNoLabel = false) => {
  const result = arbitraryVariableRegex.exec(value);
  if (result) {
    if (result[1]) {
      return testLabel(result[1]);
    }
    return shouldMatchNoLabel;
  }
  return false;
};
var isLabelPosition = (label2) => label2 === "position" || label2 === "percentage";
var isLabelImage = (label2) => label2 === "image" || label2 === "url";
var isLabelSize = (label2) => label2 === "length" || label2 === "size" || label2 === "bg-size";
var isLabelLength = (label2) => label2 === "length";
var isLabelNumber = (label2) => label2 === "number";
var isLabelFamilyName = (label2) => label2 === "family-name";
var isLabelShadow = (label2) => label2 === "shadow";
var validators = Object.defineProperty({
  __proto__: null,
  isAny,
  isAnyNonArbitrary,
  isArbitraryImage,
  isArbitraryLength,
  isArbitraryNumber,
  isArbitraryPosition,
  isArbitraryShadow,
  isArbitrarySize,
  isArbitraryValue,
  isArbitraryVariable,
  isArbitraryVariableFamilyName,
  isArbitraryVariableImage,
  isArbitraryVariableLength,
  isArbitraryVariablePosition,
  isArbitraryVariableShadow,
  isArbitraryVariableSize,
  isFraction,
  isInteger,
  isNumber,
  isPercent,
  isTshirtSize
}, Symbol.toStringTag, {
  value: "Module"
});
var getDefaultConfig = () => {
  const themeColor = fromTheme("color");
  const themeFont = fromTheme("font");
  const themeText = fromTheme("text");
  const themeFontWeight = fromTheme("font-weight");
  const themeTracking = fromTheme("tracking");
  const themeLeading = fromTheme("leading");
  const themeBreakpoint = fromTheme("breakpoint");
  const themeContainer = fromTheme("container");
  const themeSpacing = fromTheme("spacing");
  const themeRadius = fromTheme("radius");
  const themeShadow = fromTheme("shadow");
  const themeInsetShadow = fromTheme("inset-shadow");
  const themeTextShadow = fromTheme("text-shadow");
  const themeDropShadow = fromTheme("drop-shadow");
  const themeBlur = fromTheme("blur");
  const themePerspective = fromTheme("perspective");
  const themeAspect = fromTheme("aspect");
  const themeEase = fromTheme("ease");
  const themeAnimate = fromTheme("animate");
  const scaleBreak = () => ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  const scalePosition = () => [
    "center",
    "top",
    "bottom",
    "left",
    "right",
    "top-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-top",
    "top-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-top",
    "bottom-right",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "right-bottom",
    "bottom-left",
    // Deprecated since Tailwind CSS v4.1.0, see https://github.com/tailwindlabs/tailwindcss/pull/17378
    "left-bottom"
  ];
  const scalePositionWithArbitrary = () => [...scalePosition(), isArbitraryVariable, isArbitraryValue];
  const scaleOverflow = () => ["auto", "hidden", "clip", "visible", "scroll"];
  const scaleOverscroll = () => ["auto", "contain", "none"];
  const scaleUnambiguousSpacing = () => [isArbitraryVariable, isArbitraryValue, themeSpacing];
  const scaleInset = () => [isFraction, "full", "auto", ...scaleUnambiguousSpacing()];
  const scaleGridTemplateColsRows = () => [isInteger, "none", "subgrid", isArbitraryVariable, isArbitraryValue];
  const scaleGridColRowStartAndEnd = () => ["auto", {
    span: ["full", isInteger, isArbitraryVariable, isArbitraryValue]
  }, isInteger, isArbitraryVariable, isArbitraryValue];
  const scaleGridColRowStartOrEnd = () => [isInteger, "auto", isArbitraryVariable, isArbitraryValue];
  const scaleGridAutoColsRows = () => ["auto", "min", "max", "fr", isArbitraryVariable, isArbitraryValue];
  const scaleAlignPrimaryAxis = () => ["start", "end", "center", "between", "around", "evenly", "stretch", "baseline", "center-safe", "end-safe"];
  const scaleAlignSecondaryAxis = () => ["start", "end", "center", "stretch", "center-safe", "end-safe"];
  const scaleMargin = () => ["auto", ...scaleUnambiguousSpacing()];
  const scaleSizing = () => [isFraction, "auto", "full", "dvw", "dvh", "lvw", "lvh", "svw", "svh", "min", "max", "fit", ...scaleUnambiguousSpacing()];
  const scaleColor = () => [themeColor, isArbitraryVariable, isArbitraryValue];
  const scaleBgPosition = () => [...scalePosition(), isArbitraryVariablePosition, isArbitraryPosition, {
    position: [isArbitraryVariable, isArbitraryValue]
  }];
  const scaleBgRepeat = () => ["no-repeat", {
    repeat: ["", "x", "y", "space", "round"]
  }];
  const scaleBgSize = () => ["auto", "cover", "contain", isArbitraryVariableSize, isArbitrarySize, {
    size: [isArbitraryVariable, isArbitraryValue]
  }];
  const scaleGradientStopPosition = () => [isPercent, isArbitraryVariableLength, isArbitraryLength];
  const scaleRadius = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    "full",
    themeRadius,
    isArbitraryVariable,
    isArbitraryValue
  ];
  const scaleBorderWidth = () => ["", isNumber, isArbitraryVariableLength, isArbitraryLength];
  const scaleLineStyle = () => ["solid", "dashed", "dotted", "double"];
  const scaleBlendMode = () => ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
  const scaleMaskImagePosition = () => [isNumber, isPercent, isArbitraryVariablePosition, isArbitraryPosition];
  const scaleBlur = () => [
    // Deprecated since Tailwind CSS v4.0.0
    "",
    "none",
    themeBlur,
    isArbitraryVariable,
    isArbitraryValue
  ];
  const scaleRotate = () => ["none", isNumber, isArbitraryVariable, isArbitraryValue];
  const scaleScale = () => ["none", isNumber, isArbitraryVariable, isArbitraryValue];
  const scaleSkew = () => [isNumber, isArbitraryVariable, isArbitraryValue];
  const scaleTranslate = () => [isFraction, "full", ...scaleUnambiguousSpacing()];
  return {
    cacheSize: 500,
    theme: {
      animate: ["spin", "ping", "pulse", "bounce"],
      aspect: ["video"],
      blur: [isTshirtSize],
      breakpoint: [isTshirtSize],
      color: [isAny],
      container: [isTshirtSize],
      "drop-shadow": [isTshirtSize],
      ease: ["in", "out", "in-out"],
      font: [isAnyNonArbitrary],
      "font-weight": ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black"],
      "inset-shadow": [isTshirtSize],
      leading: ["none", "tight", "snug", "normal", "relaxed", "loose"],
      perspective: ["dramatic", "near", "normal", "midrange", "distant", "none"],
      radius: [isTshirtSize],
      shadow: [isTshirtSize],
      spacing: ["px", isNumber],
      text: [isTshirtSize],
      "text-shadow": [isTshirtSize],
      tracking: ["tighter", "tight", "normal", "wide", "wider", "widest"]
    },
    classGroups: {
      // --------------
      // --- Layout ---
      // --------------
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", isFraction, isArbitraryValue, isArbitraryVariable, themeAspect]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       * @deprecated since Tailwind CSS v4.0.0
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isNumber, isArbitraryValue, isArbitraryVariable, themeContainer]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": scaleBreak()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": scaleBreak()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Screen Reader Only
       * @see https://tailwindcss.com/docs/display#screen-reader-only
       */
      sr: ["sr-only", "not-sr-only"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      float: [{
        float: ["right", "left", "none", "start", "end"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none", "start", "end"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: scalePositionWithArbitrary()
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: scaleOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": scaleOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": scaleOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: scaleOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": scaleOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": scaleOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: scaleInset()
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": scaleInset()
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": scaleInset()
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: scaleInset()
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: scaleInset()
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: scaleInset()
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: scaleInset()
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: scaleInset()
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: scaleInset()
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: [isInteger, "auto", isArbitraryVariable, isArbitraryValue]
      }],
      // ------------------------
      // --- Flexbox and Grid ---
      // ------------------------
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: [isFraction, "full", "auto", themeContainer, ...scaleUnambiguousSpacing()]
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["nowrap", "wrap", "wrap-reverse"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: [isNumber, isFraction, "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: [isInteger, "first", "last", "none", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": scaleGridTemplateColsRows()
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: scaleGridColRowStartAndEnd()
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": scaleGridColRowStartOrEnd()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": scaleGridColRowStartOrEnd()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": scaleGridTemplateColsRows()
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: scaleGridColRowStartAndEnd()
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": scaleGridColRowStartOrEnd()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": scaleGridColRowStartOrEnd()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": scaleGridAutoColsRows()
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": scaleGridAutoColsRows()
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: scaleUnambiguousSpacing()
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": scaleUnambiguousSpacing()
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": scaleUnambiguousSpacing()
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: [...scaleAlignPrimaryAxis(), "normal"]
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": [...scaleAlignSecondaryAxis(), "normal"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", ...scaleAlignSecondaryAxis()]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal", ...scaleAlignPrimaryAxis()]
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: [...scaleAlignSecondaryAxis(), {
          baseline: ["", "last"]
        }]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", ...scaleAlignSecondaryAxis(), {
          baseline: ["", "last"]
        }]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": scaleAlignPrimaryAxis()
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": [...scaleAlignSecondaryAxis(), "baseline"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", ...scaleAlignSecondaryAxis()]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: scaleUnambiguousSpacing()
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: scaleUnambiguousSpacing()
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: scaleUnambiguousSpacing()
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: scaleUnambiguousSpacing()
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: scaleMargin()
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: scaleMargin()
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: scaleMargin()
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: scaleMargin()
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: scaleMargin()
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: scaleMargin()
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: scaleMargin()
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: scaleMargin()
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: scaleMargin()
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x": [{
        "space-x": scaleUnambiguousSpacing()
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y": [{
        "space-y": scaleUnambiguousSpacing()
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/margin#adding-space-between-children
       */
      "space-y-reverse": ["space-y-reverse"],
      // --------------
      // --- Sizing ---
      // --------------
      /**
       * Size
       * @see https://tailwindcss.com/docs/width#setting-both-width-and-height
       */
      size: [{
        size: scaleSizing()
      }],
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: [themeContainer, "screen", ...scaleSizing()]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": [
          themeContainer,
          "screen",
          /** Deprecated. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          "none",
          ...scaleSizing()
        ]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": [
          themeContainer,
          "screen",
          "none",
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          "prose",
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          {
            screen: [themeBreakpoint]
          },
          ...scaleSizing()
        ]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: ["screen", "lh", ...scaleSizing()]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["screen", "lh", "none", ...scaleSizing()]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": ["screen", "lh", ...scaleSizing()]
      }],
      // ------------------
      // --- Typography ---
      // ------------------
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", themeText, isArbitraryVariableLength, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: [themeFontWeight, isArbitraryVariable, isArbitraryNumber]
      }],
      /**
       * Font Stretch
       * @see https://tailwindcss.com/docs/font-stretch
       */
      "font-stretch": [{
        "font-stretch": ["ultra-condensed", "extra-condensed", "condensed", "semi-condensed", "normal", "semi-expanded", "expanded", "extra-expanded", "ultra-expanded", isPercent, isArbitraryValue]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isArbitraryVariableFamilyName, isArbitraryValue, themeFont]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractions"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: [themeTracking, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": [isNumber, "none", isArbitraryVariable, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: [
          /** Deprecated since Tailwind CSS v4.0.0. @see https://github.com/tailwindlabs/tailwindcss.com/issues/2027#issuecomment-2620152757 */
          themeLeading,
          ...scaleUnambiguousSpacing()
        ]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["disc", "decimal", "none", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://v3.tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: scaleColor()
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: scaleColor()
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [...scaleLineStyle(), "wavy"]
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: [isNumber, "from-font", "auto", isArbitraryVariable, isArbitraryLength]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: scaleColor()
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": [isNumber, "auto", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Wrap
       * @see https://tailwindcss.com/docs/text-wrap
       */
      "text-wrap": [{
        text: ["wrap", "nowrap", "balance", "pretty"]
      }],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: scaleUnambiguousSpacing()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      break: [{
        break: ["normal", "words", "all", "keep"]
      }],
      /**
       * Overflow Wrap
       * @see https://tailwindcss.com/docs/overflow-wrap
       */
      wrap: [{
        wrap: ["break-word", "anywhere", "normal"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryVariable, isArbitraryValue]
      }],
      // -------------------
      // --- Backgrounds ---
      // -------------------
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: scaleBgPosition()
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: scaleBgRepeat()
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: scaleBgSize()
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          linear: [{
            to: ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
          }, isInteger, isArbitraryVariable, isArbitraryValue],
          radial: ["", isArbitraryVariable, isArbitraryValue],
          conic: [isInteger, isArbitraryVariable, isArbitraryValue]
        }, isArbitraryVariableImage, isArbitraryImage]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: scaleColor()
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: scaleGradientStopPosition()
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: scaleGradientStopPosition()
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: scaleGradientStopPosition()
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: scaleColor()
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: scaleColor()
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: scaleColor()
      }],
      // ---------------
      // --- Borders ---
      // ---------------
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: scaleRadius()
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": scaleRadius()
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": scaleRadius()
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": scaleRadius()
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": scaleRadius()
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": scaleRadius()
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": scaleRadius()
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": scaleRadius()
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": scaleRadius()
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": scaleRadius()
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": scaleRadius()
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": scaleRadius()
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": scaleRadius()
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": scaleRadius()
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": scaleRadius()
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: scaleBorderWidth()
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": scaleBorderWidth()
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": scaleBorderWidth()
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": scaleBorderWidth()
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": scaleBorderWidth()
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": scaleBorderWidth()
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": scaleBorderWidth()
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": scaleBorderWidth()
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": scaleBorderWidth()
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x": [{
        "divide-x": scaleBorderWidth()
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y": [{
        "divide-y": scaleBorderWidth()
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/border-width#between-children
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [...scaleLineStyle(), "hidden", "none"]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/border-style#setting-the-divider-style
       */
      "divide-style": [{
        divide: [...scaleLineStyle(), "hidden", "none"]
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: scaleColor()
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": scaleColor()
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": scaleColor()
      }],
      /**
       * Border Color S
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-s": [{
        "border-s": scaleColor()
      }],
      /**
       * Border Color E
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-e": [{
        "border-e": scaleColor()
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": scaleColor()
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": scaleColor()
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": scaleColor()
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": scaleColor()
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: scaleColor()
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [...scaleLineStyle(), "none", "hidden"]
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: ["", isNumber, isArbitraryVariableLength, isArbitraryLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: scaleColor()
      }],
      // ---------------
      // --- Effects ---
      // ---------------
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: [
          // Deprecated since Tailwind CSS v4.0.0
          "",
          "none",
          themeShadow,
          isArbitraryVariableShadow,
          isArbitraryShadow
        ]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-shadow-color
       */
      "shadow-color": [{
        shadow: scaleColor()
      }],
      /**
       * Inset Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-shadow
       */
      "inset-shadow": [{
        "inset-shadow": ["none", themeInsetShadow, isArbitraryVariableShadow, isArbitraryShadow]
      }],
      /**
       * Inset Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-shadow-color
       */
      "inset-shadow-color": [{
        "inset-shadow": scaleColor()
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-a-ring
       */
      "ring-w": [{
        ring: scaleBorderWidth()
      }],
      /**
       * Ring Width Inset
       * @see https://v3.tailwindcss.com/docs/ring-width#inset-rings
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-ring-color
       */
      "ring-color": [{
        ring: scaleColor()
      }],
      /**
       * Ring Offset Width
       * @see https://v3.tailwindcss.com/docs/ring-offset-width
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-w": [{
        "ring-offset": [isNumber, isArbitraryLength]
      }],
      /**
       * Ring Offset Color
       * @see https://v3.tailwindcss.com/docs/ring-offset-color
       * @deprecated since Tailwind CSS v4.0.0
       * @see https://github.com/tailwindlabs/tailwindcss/blob/v4.0.0/packages/tailwindcss/src/utilities.ts#L4158
       */
      "ring-offset-color": [{
        "ring-offset": scaleColor()
      }],
      /**
       * Inset Ring Width
       * @see https://tailwindcss.com/docs/box-shadow#adding-an-inset-ring
       */
      "inset-ring-w": [{
        "inset-ring": scaleBorderWidth()
      }],
      /**
       * Inset Ring Color
       * @see https://tailwindcss.com/docs/box-shadow#setting-the-inset-ring-color
       */
      "inset-ring-color": [{
        "inset-ring": scaleColor()
      }],
      /**
       * Text Shadow
       * @see https://tailwindcss.com/docs/text-shadow
       */
      "text-shadow": [{
        "text-shadow": ["none", themeTextShadow, isArbitraryVariableShadow, isArbitraryShadow]
      }],
      /**
       * Text Shadow Color
       * @see https://tailwindcss.com/docs/text-shadow#setting-the-shadow-color
       */
      "text-shadow-color": [{
        "text-shadow": scaleColor()
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": [...scaleBlendMode(), "plus-darker", "plus-lighter"]
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": scaleBlendMode()
      }],
      /**
       * Mask Clip
       * @see https://tailwindcss.com/docs/mask-clip
       */
      "mask-clip": [{
        "mask-clip": ["border", "padding", "content", "fill", "stroke", "view"]
      }, "mask-no-clip"],
      /**
       * Mask Composite
       * @see https://tailwindcss.com/docs/mask-composite
       */
      "mask-composite": [{
        mask: ["add", "subtract", "intersect", "exclude"]
      }],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image-linear-pos": [{
        "mask-linear": [isNumber]
      }],
      "mask-image-linear-from-pos": [{
        "mask-linear-from": scaleMaskImagePosition()
      }],
      "mask-image-linear-to-pos": [{
        "mask-linear-to": scaleMaskImagePosition()
      }],
      "mask-image-linear-from-color": [{
        "mask-linear-from": scaleColor()
      }],
      "mask-image-linear-to-color": [{
        "mask-linear-to": scaleColor()
      }],
      "mask-image-t-from-pos": [{
        "mask-t-from": scaleMaskImagePosition()
      }],
      "mask-image-t-to-pos": [{
        "mask-t-to": scaleMaskImagePosition()
      }],
      "mask-image-t-from-color": [{
        "mask-t-from": scaleColor()
      }],
      "mask-image-t-to-color": [{
        "mask-t-to": scaleColor()
      }],
      "mask-image-r-from-pos": [{
        "mask-r-from": scaleMaskImagePosition()
      }],
      "mask-image-r-to-pos": [{
        "mask-r-to": scaleMaskImagePosition()
      }],
      "mask-image-r-from-color": [{
        "mask-r-from": scaleColor()
      }],
      "mask-image-r-to-color": [{
        "mask-r-to": scaleColor()
      }],
      "mask-image-b-from-pos": [{
        "mask-b-from": scaleMaskImagePosition()
      }],
      "mask-image-b-to-pos": [{
        "mask-b-to": scaleMaskImagePosition()
      }],
      "mask-image-b-from-color": [{
        "mask-b-from": scaleColor()
      }],
      "mask-image-b-to-color": [{
        "mask-b-to": scaleColor()
      }],
      "mask-image-l-from-pos": [{
        "mask-l-from": scaleMaskImagePosition()
      }],
      "mask-image-l-to-pos": [{
        "mask-l-to": scaleMaskImagePosition()
      }],
      "mask-image-l-from-color": [{
        "mask-l-from": scaleColor()
      }],
      "mask-image-l-to-color": [{
        "mask-l-to": scaleColor()
      }],
      "mask-image-x-from-pos": [{
        "mask-x-from": scaleMaskImagePosition()
      }],
      "mask-image-x-to-pos": [{
        "mask-x-to": scaleMaskImagePosition()
      }],
      "mask-image-x-from-color": [{
        "mask-x-from": scaleColor()
      }],
      "mask-image-x-to-color": [{
        "mask-x-to": scaleColor()
      }],
      "mask-image-y-from-pos": [{
        "mask-y-from": scaleMaskImagePosition()
      }],
      "mask-image-y-to-pos": [{
        "mask-y-to": scaleMaskImagePosition()
      }],
      "mask-image-y-from-color": [{
        "mask-y-from": scaleColor()
      }],
      "mask-image-y-to-color": [{
        "mask-y-to": scaleColor()
      }],
      "mask-image-radial": [{
        "mask-radial": [isArbitraryVariable, isArbitraryValue]
      }],
      "mask-image-radial-from-pos": [{
        "mask-radial-from": scaleMaskImagePosition()
      }],
      "mask-image-radial-to-pos": [{
        "mask-radial-to": scaleMaskImagePosition()
      }],
      "mask-image-radial-from-color": [{
        "mask-radial-from": scaleColor()
      }],
      "mask-image-radial-to-color": [{
        "mask-radial-to": scaleColor()
      }],
      "mask-image-radial-shape": [{
        "mask-radial": ["circle", "ellipse"]
      }],
      "mask-image-radial-size": [{
        "mask-radial": [{
          closest: ["side", "corner"],
          farthest: ["side", "corner"]
        }]
      }],
      "mask-image-radial-pos": [{
        "mask-radial-at": scalePosition()
      }],
      "mask-image-conic-pos": [{
        "mask-conic": [isNumber]
      }],
      "mask-image-conic-from-pos": [{
        "mask-conic-from": scaleMaskImagePosition()
      }],
      "mask-image-conic-to-pos": [{
        "mask-conic-to": scaleMaskImagePosition()
      }],
      "mask-image-conic-from-color": [{
        "mask-conic-from": scaleColor()
      }],
      "mask-image-conic-to-color": [{
        "mask-conic-to": scaleColor()
      }],
      /**
       * Mask Mode
       * @see https://tailwindcss.com/docs/mask-mode
       */
      "mask-mode": [{
        mask: ["alpha", "luminance", "match"]
      }],
      /**
       * Mask Origin
       * @see https://tailwindcss.com/docs/mask-origin
       */
      "mask-origin": [{
        "mask-origin": ["border", "padding", "content", "fill", "stroke", "view"]
      }],
      /**
       * Mask Position
       * @see https://tailwindcss.com/docs/mask-position
       */
      "mask-position": [{
        mask: scaleBgPosition()
      }],
      /**
       * Mask Repeat
       * @see https://tailwindcss.com/docs/mask-repeat
       */
      "mask-repeat": [{
        mask: scaleBgRepeat()
      }],
      /**
       * Mask Size
       * @see https://tailwindcss.com/docs/mask-size
       */
      "mask-size": [{
        mask: scaleBgSize()
      }],
      /**
       * Mask Type
       * @see https://tailwindcss.com/docs/mask-type
       */
      "mask-type": [{
        "mask-type": ["alpha", "luminance"]
      }],
      /**
       * Mask Image
       * @see https://tailwindcss.com/docs/mask-image
       */
      "mask-image": [{
        mask: ["none", isArbitraryVariable, isArbitraryValue]
      }],
      // ---------------
      // --- Filters ---
      // ---------------
      /**
       * Filter
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: [
          // Deprecated since Tailwind CSS v3.0.0
          "",
          "none",
          isArbitraryVariable,
          isArbitraryValue
        ]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: scaleBlur()
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": [
          // Deprecated since Tailwind CSS v4.0.0
          "",
          "none",
          themeDropShadow,
          isArbitraryVariableShadow,
          isArbitraryShadow
        ]
      }],
      /**
       * Drop Shadow Color
       * @see https://tailwindcss.com/docs/filter-drop-shadow#setting-the-shadow-color
       */
      "drop-shadow-color": [{
        "drop-shadow": scaleColor()
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Filter
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": [
          // Deprecated since Tailwind CSS v3.0.0
          "",
          "none",
          isArbitraryVariable,
          isArbitraryValue
        ]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": scaleBlur()
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": ["", isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      // --------------
      // --- Tables ---
      // --------------
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": scaleUnambiguousSpacing()
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": scaleUnambiguousSpacing()
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": scaleUnambiguousSpacing()
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // ---------------------------------
      // --- Transitions and Animation ---
      // ---------------------------------
      /**
       * Transition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["", "all", "colors", "opacity", "shadow", "transform", "none", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Transition Behavior
       * @see https://tailwindcss.com/docs/transition-behavior
       */
      "transition-behavior": [{
        transition: ["normal", "discrete"]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: [isNumber, "initial", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "initial", themeEase, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: [isNumber, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", themeAnimate, isArbitraryVariable, isArbitraryValue]
      }],
      // ------------------
      // --- Transforms ---
      // ------------------
      /**
       * Backface Visibility
       * @see https://tailwindcss.com/docs/backface-visibility
       */
      backface: [{
        backface: ["hidden", "visible"]
      }],
      /**
       * Perspective
       * @see https://tailwindcss.com/docs/perspective
       */
      perspective: [{
        perspective: [themePerspective, isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Perspective Origin
       * @see https://tailwindcss.com/docs/perspective-origin
       */
      "perspective-origin": [{
        "perspective-origin": scalePositionWithArbitrary()
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: scaleRotate()
      }],
      /**
       * Rotate X
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-x": [{
        "rotate-x": scaleRotate()
      }],
      /**
       * Rotate Y
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-y": [{
        "rotate-y": scaleRotate()
      }],
      /**
       * Rotate Z
       * @see https://tailwindcss.com/docs/rotate
       */
      "rotate-z": [{
        "rotate-z": scaleRotate()
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: scaleScale()
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": scaleScale()
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": scaleScale()
      }],
      /**
       * Scale Z
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-z": [{
        "scale-z": scaleScale()
      }],
      /**
       * Scale 3D
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-3d": ["scale-3d"],
      /**
       * Skew
       * @see https://tailwindcss.com/docs/skew
       */
      skew: [{
        skew: scaleSkew()
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": scaleSkew()
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": scaleSkew()
      }],
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: [isArbitraryVariable, isArbitraryValue, "", "none", "gpu", "cpu"]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: scalePositionWithArbitrary()
      }],
      /**
       * Transform Style
       * @see https://tailwindcss.com/docs/transform-style
       */
      "transform-style": [{
        transform: ["3d", "flat"]
      }],
      /**
       * Translate
       * @see https://tailwindcss.com/docs/translate
       */
      translate: [{
        translate: scaleTranslate()
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": scaleTranslate()
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": scaleTranslate()
      }],
      /**
       * Translate Z
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-z": [{
        "translate-z": scaleTranslate()
      }],
      /**
       * Translate None
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-none": ["translate-none"],
      // ---------------------
      // --- Interactivity ---
      // ---------------------
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: scaleColor()
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: [{
        appearance: ["none", "auto"]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: scaleColor()
      }],
      /**
       * Color Scheme
       * @see https://tailwindcss.com/docs/color-scheme
       */
      "color-scheme": [{
        scheme: ["normal", "dark", "light", "light-dark", "only-dark", "only-light"]
      }],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryVariable, isArbitraryValue]
      }],
      /**
       * Field Sizing
       * @see https://tailwindcss.com/docs/field-sizing
       */
      "field-sizing": [{
        "field-sizing": ["fixed", "content"]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["auto", "none"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "", "y", "x"]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": scaleUnambiguousSpacing()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "manipulation"]
      }],
      /**
       * Touch Action X
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-x": [{
        "touch-pan": ["x", "left", "right"]
      }],
      /**
       * Touch Action Y
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-y": [{
        "touch-pan": ["y", "up", "down"]
      }],
      /**
       * Touch Action Pinch Zoom
       * @see https://tailwindcss.com/docs/touch-action
       */
      "touch-pz": ["touch-pinch-zoom"],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryVariable, isArbitraryValue]
      }],
      // -----------
      // --- SVG ---
      // -----------
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: ["none", ...scaleColor()]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isNumber, isArbitraryVariableLength, isArbitraryLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: ["none", ...scaleColor()]
      }],
      // ---------------------
      // --- Accessibility ---
      // ---------------------
      /**
       * Forced Color Adjust
       * @see https://tailwindcss.com/docs/forced-color-adjust
       */
      "forced-color-adjust": [{
        "forced-color-adjust": ["auto", "none"]
      }]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      size: ["w", "h"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      "line-clamp": ["display", "overflow"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-x", "border-w-y", "border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-x", "border-color-y", "border-color-s", "border-color-e", "border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      translate: ["translate-x", "translate-y", "translate-none"],
      "translate-none": ["translate", "translate-x", "translate-y", "translate-z"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"],
      touch: ["touch-x", "touch-y", "touch-pz"],
      "touch-x": ["touch"],
      "touch-y": ["touch"],
      "touch-pz": ["touch"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    },
    orderSensitiveModifiers: ["*", "**", "after", "backdrop", "before", "details-content", "file", "first-letter", "first-line", "marker", "placeholder", "selection"]
  };
};
var mergeConfigs = (baseConfig, {
  cacheSize,
  prefix,
  experimentalParseClassName,
  extend = {},
  override = {}
}) => {
  overrideProperty(baseConfig, "cacheSize", cacheSize);
  overrideProperty(baseConfig, "prefix", prefix);
  overrideProperty(baseConfig, "experimentalParseClassName", experimentalParseClassName);
  overrideConfigProperties(baseConfig.theme, override.theme);
  overrideConfigProperties(baseConfig.classGroups, override.classGroups);
  overrideConfigProperties(baseConfig.conflictingClassGroups, override.conflictingClassGroups);
  overrideConfigProperties(baseConfig.conflictingClassGroupModifiers, override.conflictingClassGroupModifiers);
  overrideProperty(baseConfig, "orderSensitiveModifiers", override.orderSensitiveModifiers);
  mergeConfigProperties(baseConfig.theme, extend.theme);
  mergeConfigProperties(baseConfig.classGroups, extend.classGroups);
  mergeConfigProperties(baseConfig.conflictingClassGroups, extend.conflictingClassGroups);
  mergeConfigProperties(baseConfig.conflictingClassGroupModifiers, extend.conflictingClassGroupModifiers);
  mergeArrayProperties(baseConfig, extend, "orderSensitiveModifiers");
  return baseConfig;
};
var overrideProperty = (baseObject, overrideKey, overrideValue) => {
  if (overrideValue !== void 0) {
    baseObject[overrideKey] = overrideValue;
  }
};
var overrideConfigProperties = (baseObject, overrideObject) => {
  if (overrideObject) {
    for (const key2 in overrideObject) {
      overrideProperty(baseObject, key2, overrideObject[key2]);
    }
  }
};
var mergeConfigProperties = (baseObject, mergeObject) => {
  if (mergeObject) {
    for (const key2 in mergeObject) {
      mergeArrayProperties(baseObject, mergeObject, key2);
    }
  }
};
var mergeArrayProperties = (baseObject, mergeObject, key2) => {
  const mergeValue = mergeObject[key2];
  if (mergeValue !== void 0) {
    baseObject[key2] = baseObject[key2] ? baseObject[key2].concat(mergeValue) : mergeValue;
  }
};
var extendTailwindMerge = (configExtension, ...createConfig) => typeof configExtension === "function" ? createTailwindMerge(getDefaultConfig, configExtension, ...createConfig) : createTailwindMerge(() => mergeConfigs(getDefaultConfig(), configExtension), ...createConfig);
var twMerge = createTailwindMerge(getDefaultConfig);

// node_modules/.pnpm/tailwind-variants@3.1.1_tailwind-merge@3.3.1_tailwindcss@4.1.13/node_modules/tailwind-variants/dist/index.js
var f = (e) => x(e) ? twMerge : extendTailwindMerge({ ...e, extend: { theme: e.theme, classGroups: e.classGroups, conflictingClassGroupModifiers: e.conflictingClassGroupModifiers, conflictingClassGroups: e.conflictingClassGroups, ...e.extend } });
var i = (...e) => (a2) => {
  let t = u(e);
  return !t || !a2.twMerge ? t : ((!S.cachedTwMerge || S.didTwMergeConfigChange) && (S.didTwMergeConfigChange = false, S.cachedTwMerge = f(S.cachedTwMergeConfig)), S.cachedTwMerge(t) || void 0);
};
var { createTV: C, tv: T } = le(i);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/accordion/theme.js
var accordion = T({
  base: "w-full",
  variants: {
    color: {
      primary: "text-primary-500 dark:text-primary-400",
      secondary: "text-secondary-500 dark:text-secondary-400"
    },
    flush: {
      true: "",
      false: "border border-gray-200 dark:border-gray-700 rounded-t-xl"
    }
  }
});
var accordionItem = T({
  slots: {
    base: "group",
    button: "flex items-center justify-between w-full font-medium text-left group-first:rounded-t-xl border-gray-200 dark:border-gray-700 border-b",
    content: "border-b border-gray-200 dark:border-gray-700",
    active: "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white focus:ring-4 focus:ring-gray-200 dark:focus:ring-gray-800",
    inactive: "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-800"
  },
  variants: {
    flush: {
      true: {
        button: "py-5",
        content: "py-5"
      },
      false: {
        button: "p-5 border-s border-e group-first:border-t",
        content: "p-5 border-s border-e"
      }
    },
    open: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      flush: true,
      open: true,
      class: {
        button: "text-gray-900 dark:text-white"
      }
    },
    {
      flush: true,
      open: false,
      class: {
        button: "text-gray-500 dark:text-gray-400"
      }
    }
  ],
  defaultVariants: {
    flush: false,
    open: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/singleselection.svelte.js
var SINGLE_SELECTION_KEY = Symbol("singleton");
function createSingleSelectionContext(nonReactive = false) {
  if (nonReactive) return setContext(SINGLE_SELECTION_KEY, {});
  const context = tag_proxy(proxy({ value: null }), "context");
  return setContext(SINGLE_SELECTION_KEY, context);
}
function setSelected(context, open, value) {
  if (open) context.value = value ?? null;
  else if (strict_equals(context.value, value)) context.value = null;
  return context;
}
function useSingleSelection(callback) {
  const context = getContext(SINGLE_SELECTION_KEY) ?? createSingleSelectionContext(false);
  if (!context.hasOwnProperty?.("value")) return () => context;
  user_effect(() => {
    if (strict_equals(context.value, null, false)) callback(context.value);
  });
  return (open, v) => untrack(() => setSelected(context, open, v));
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/accordion/Accordion.svelte
Accordion[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/accordion/Accordion.svelte";
var root = add_locations(from_html(`<div><!></div>`), Accordion[FILENAME], [[27, 0]]);
function Accordion($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Accordion);
  let multiple = prop($$props, "multiple", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "flush",
      "activeClass",
      "inactiveClass",
      "multiple",
      "class",
      "transitionType"
    ],
    "restProps"
  );
  const theme = getTheme("accordion");
  const ctx = tag_proxy(
    proxy({
      flush: $$props.flush,
      activeClass: $$props.activeClass,
      inactiveClass: $$props.inactiveClass,
      transitionType: $$props.transitionType
    }),
    "ctx"
  );
  setContext("ctx", ctx);
  createSingleSelectionContext(multiple());
  const base = tag(user_derived(() => accordion({ flush: $$props.flush, class: clsx_default(theme, $$props.class) })), "base");
  var $$exports = { ...legacy_api() };
  var div = root();
  attribute_effect(div, () => ({ ...restProps, class: get(base) }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Accordion, 28, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Accordion = hmr(Accordion, () => Accordion[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Accordion[HMR].source;
    set(Accordion[HMR].source, module.default[HMR].original);
  });
}
var Accordion_default = Accordion;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte
AccordionItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/accordion/AccordionItem.svelte";
var handleToggle = (_, open) => {
  open(!open());
};
var root_3 = add_locations(from_svg(`<svg class="h-3 w-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), AccordionItem[FILENAME], [[63, 10, [[64, 12]]]]);
var root_6 = add_locations(from_svg(`<svg class="h-3 w-3 text-gray-800 dark:text-white" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), AccordionItem[FILENAME], [[70, 8, [[71, 10]]]]);
var root_1 = add_locations(from_html(`<!> <!>`, 1), AccordionItem[FILENAME], []);
var root_9 = add_locations(from_html(`<div><div><!></div></div>`), AccordionItem[FILENAME], [[82, 4, [[83, 6]]]]);
var root_10 = add_locations(from_html(`<div><div><!></div></div>`), AccordionItem[FILENAME], [[89, 2, [[90, 4]]]]);
var root2 = add_locations(from_html(`<h2><button type="button"><!></button></h2> <!>`, 1), AccordionItem[FILENAME], [[57, 0, [[58, 2]]]]);
function AccordionItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, AccordionItem);
  let open = prop($$props, "open", 15, false), transitionType = prop($$props, "transitionType", 3, slide);
  warnThemeDeprecation(
    "AccordionItem",
    {
      headerClass: $$props.headerClass,
      contentClass: $$props.contentClass,
      activeClass: $$props.activeClass,
      inactiveClass: $$props.inactiveClass
    },
    {
      headerClass: "button",
      contentClass: "content",
      activeClass: "active",
      inactiveClass: "inactive"
    }
  );
  let styling = tag(
    user_derived(() => $$props.classes ?? {
      button: $$props.headerClass,
      content: $$props.contentClass,
      active: $$props.activeClass,
      inactive: $$props.inactiveClass
    }),
    "styling"
  );
  const ctx = getContext("ctx") ?? {};
  const ctxTransitionType = ctx.transitionType ?? transitionType();
  const useTransition = strict_equals(transitionType(), "none") ? false : strict_equals(ctxTransitionType, "none") ? false : true;
  const theme = getTheme("accordionItem");
  const self = Symbol("accordion-item");
  const updateSingleSelection = useSingleSelection((value) => open(strict_equals(value, self)));
  user_effect(() => {
    updateSingleSelection(open(), self);
  });
  const $$d = tag(user_derived(() => accordionItem({ flush: ctx.flush, open: open() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), button2 = tag(user_derived(() => get($$d).button), "button"), content = tag(user_derived(() => get($$d).content), "content"), active = tag(user_derived(() => get($$d).active), "active"), inactive = tag(user_derived(() => get($$d).inactive), "inactive");
  let buttonClass = tag(user_derived(() => clsx_default(open() && !ctx.flush && (get(styling).active || ctx.activeClass || get(active)()), !open() && !ctx.flush && (get(styling).inactive || ctx.inactiveClass || get(inactive)()))), "buttonClass");
  var $$exports = { ...legacy_api() };
  var fragment = root2();
  var h2 = first_child(fragment);
  var button_1 = child(h2);
  button_1.__click = [handleToggle, open];
  var node = child(button_1);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_1 = root_1();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.header), "render", AccordionItem, 60, 6);
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          {
            var consequent = ($$anchor4) => {
              var svg = root_3();
              append($$anchor4, svg);
            };
            var alternate = ($$anchor4) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              add_svelte_meta(() => snippet(node_4, () => $$props.arrowup), "render", AccordionItem, 67, 10);
              append($$anchor4, fragment_3);
            };
            add_svelte_meta(
              () => if_block(node_3, ($$render) => {
                if (!$$props.arrowup) $$render(consequent);
                else $$render(alternate, false);
              }),
              "if",
              AccordionItem,
              62,
              8
            );
          }
          append($$anchor3, fragment_2);
        };
        var alternate_2 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_5 = first_child(fragment_4);
          {
            var consequent_2 = ($$anchor4) => {
              var svg_1 = root_6();
              append($$anchor4, svg_1);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_6 = first_child(fragment_5);
              add_svelte_meta(() => snippet(node_6, () => $$props.arrowdown), "render", AccordionItem, 74, 8);
              append($$anchor4, fragment_5);
            };
            add_svelte_meta(
              () => if_block(
                node_5,
                ($$render) => {
                  if (!$$props.arrowdown) $$render(consequent_2);
                  else $$render(alternate_1, false);
                },
                true
              ),
              "if",
              AccordionItem,
              69,
              6
            );
          }
          append($$anchor3, fragment_4);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (open()) $$render(consequent_1);
            else $$render(alternate_2, false);
          }),
          "if",
          AccordionItem,
          61,
          6
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.header) $$render(consequent_3);
      }),
      "if",
      AccordionItem,
      59,
      4
    );
  }
  reset(button_1);
  reset(h2);
  var node_7 = sibling(h2, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_6 = comment();
      var node_8 = first_child(fragment_6);
      {
        var consequent_4 = ($$anchor3) => {
          var div = root_9();
          var div_1 = child(div);
          var node_9 = child(div_1);
          add_svelte_meta(() => snippet(node_9, () => $$props.children), "render", AccordionItem, 84, 8);
          reset(div_1);
          reset(div);
          template_effect(($0) => set_class(div_1, 1, $0), [
            () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
          ]);
          transition(3, div, transitionType, () => $$props.transitionParams);
          append($$anchor3, div);
        };
        add_svelte_meta(
          () => if_block(node_8, ($$render) => {
            if (open() && strict_equals(transitionType(), "none", false)) $$render(consequent_4);
          }),
          "if",
          AccordionItem,
          81,
          2
        );
      }
      append($$anchor2, fragment_6);
    };
    var alternate_3 = ($$anchor2) => {
      var div_2 = root_10();
      var div_3 = child(div_2);
      var node_10 = child(div_3);
      add_svelte_meta(() => snippet(node_10, () => $$props.children), "render", AccordionItem, 91, 6);
      reset(div_3);
      reset(div_2);
      template_effect(
        ($0) => {
          set_class(div_2, 1, clsx2(open() ? "block" : "hidden"));
          set_class(div_3, 1, $0);
        },
        [
          () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
        ]
      );
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if (useTransition) $$render(consequent_5);
        else $$render(alternate_3, false);
      }),
      "if",
      AccordionItem,
      80,
      0
    );
  }
  template_effect(
    ($0, $1) => {
      set_class(h2, 1, $0);
      set_class(button_1, 1, $1);
      set_attribute(button_1, "aria-expanded", open());
    },
    [
      () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) })),
      () => clsx2(get(button2)({
        class: clsx_default(get(buttonClass), theme?.button, get(styling).button)
      }))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  AccordionItem = hmr(AccordionItem, () => AccordionItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AccordionItem[HMR].source;
    set(AccordionItem[HMR].source, module.default[HMR].original);
  });
}
var AccordionItem_default = AccordionItem;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/alert/theme.js
var alert = T({
  base: "p-4 gap-3 text-sm",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "bg-primary-50 dark:bg-gray-800 text-primary-800 dark:text-primary-400",
      secondary: "bg-secondary-50 dark:bg-secondary-800 text-secondary-800 dark:text-secondary-400",
      gray: "bg-gray-100 text-gray-500 focus:ring-gray-400 dark:bg-gray-700 dark:text-gray-300",
      red: "bg-red-100 text-red-500 focus:ring-red-400 dark:bg-red-200 dark:text-red-600",
      orange: "bg-orange-100 text-orange-500 focus:ring-orange-400 dark:bg-orange-200 dark:text-orange-600",
      amber: "bg-amber-100 text-amber-500 focus:ring-amber-400 dark:bg-amber-200 dark:text-amber-600",
      yellow: "bg-yellow-100 text-yellow-500 focus:ring-yellow-400 dark:bg-yellow-200 dark:text-yellow-600",
      lime: "bg-lime-100 text-lime-500 focus:ring-lime-400 dark:bg-lime-200 dark:text-lime-600",
      green: "bg-green-100 text-green-500 focus:ring-green-400 dark:bg-green-200 dark:text-green-600",
      emerald: "bg-emerald-100 text-emerald-500 focus:ring-emerald-400 dark:bg-emerald-200 dark:text-emerald-600",
      teal: "bg-teal-100 text-teal-500 focus:ring-teal-400 dark:bg-teal-200 dark:text-teal-600",
      cyan: "bg-cyan-100 text-cyan-500 focus:ring-cyan-400 dark:bg-cyan-200 dark:text-cyan-600",
      sky: "bg-sky-100 text-sky-500 focus:ring-sky-400 dark:bg-sky-200 dark:text-sky-600",
      blue: "bg-blue-100 text-blue-500 focus:ring-blue-400 dark:bg-blue-200 dark:text-blue-600",
      indigo: "bg-indigo-100 text-indigo-500 focus:ring-indigo-400 dark:bg-indigo-200 dark:text-indigo-600",
      violet: "bg-violet-100 text-violet-500 focus:ring-violet-400 dark:bg-violet-200 dark:text-violet-600",
      purple: "bg-purple-100 text-purple-500 focus:ring-purple-400 dark:bg-purple-200 dark:text-purple-600",
      fuchsia: "bg-fuchsia-100 text-fuchsia-500 focus:ring-fuchsia-400 dark:bg-fuchsia-200 dark:text-fuchsia-600",
      pink: "bg-pink-100 text-pink-500 focus:ring-pink-400 dark:bg-pink-200 dark:text-pink-600",
      rose: "bg-rose-100 text-rose-500 focus:ring-rose-400 dark:bg-rose-200 dark:text-rose-600"
    },
    rounded: {
      true: "rounded-lg"
    },
    border: {
      true: "border"
    },
    icon: {
      true: "flex items-center"
    },
    dismissable: {
      true: "flex items-center"
    }
  },
  compoundVariants: [
    // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      border: true,
      color: "primary",
      class: "border-primary-500 dark:border-primary-200 divide-primary-500 dark:divide-primary-200"
    },
    {
      border: true,
      color: "secondary",
      class: "border-secondary-500 dark:border-secondary-200 divide-secondary-500 dark:divide-secondary-200"
    },
    {
      border: true,
      color: "gray",
      class: "border-gray-300 dark:border-gray-800 divide-gray-300 dark:divide-gray-800"
    },
    {
      border: true,
      color: "red",
      class: "border-red-300 dark:border-red-800 divide-red-300 dark:divide-red-800"
    },
    {
      border: true,
      color: "orange",
      class: "border-orange-300 dark:border-orange-800 divide-orange-300 dark:divide-orange-800"
    },
    {
      border: true,
      color: "amber",
      class: "border-amber-300 dark:border-amber-800 divide-amber-300 dark:divide-amber-800"
    },
    {
      border: true,
      color: "yellow",
      class: "border-yellow-300 dark:border-yellow-800 divide-yellow-300 dark:divide-yellow-800"
    },
    {
      border: true,
      color: "lime",
      class: "border-lime-300 dark:border-lime-800 divide-lime-300 dark:divide-lime-800"
    },
    {
      border: true,
      color: "green",
      class: "border-green-300 dark:border-green-800 divide-green-300 dark:divide-green-800"
    },
    {
      border: true,
      color: "emerald",
      class: "border-emerald-300 dark:border-emerald-800 divide-emerald-300 dark:divide-emerald-800"
    },
    {
      border: true,
      color: "teal",
      class: "border-teal-300 dark:border-teal-800 divide-teal-300 dark:divide-teal-800"
    },
    {
      border: true,
      color: "cyan",
      class: "border-cyan-300 dark:border-cyan-800 divide-cyan-300 dark:divide-cyan-800"
    },
    {
      border: true,
      color: "sky",
      class: "border-sky-300 dark:border-sky-800 divide-sky-300 dark:divide-sky-800"
    },
    {
      border: true,
      color: "blue",
      class: "border-blue-300 dark:border-blue-800 divide-blue-300 dark:divide-blue-800"
    },
    {
      border: true,
      color: "indigo",
      class: "border-indigo-300 dark:border-indigo-800 divide-indigo-300 dark:divide-indigo-800"
    },
    //  violet, purple, fuchsia, pink, rose
    {
      border: true,
      color: "violet",
      class: "border-violet-300 dark:border-violet-800 divide-violet-300 dark:divide-violet-800"
    },
    {
      border: true,
      color: "purple",
      class: "border-purple-300 dark:border-purple-800 divide-purple-300 dark:divide-purple-800"
    },
    {
      border: true,
      color: "fuchsia",
      class: "border-fuchsia-300 dark:border-fuchsia-800 divide-fuchsia-300 dark:divide-fuchsia-800"
    },
    {
      border: true,
      color: "pink",
      class: "border-pink-300 dark:border-pink-800 divide-pink-300 dark:divide-pink-800"
    },
    {
      border: true,
      color: "rose",
      class: "border-rose-300 dark:border-rose-800 divide-rose-300 dark:divide-rose-800"
    }
  ],
  defaultVariants: {
    color: "primary",
    rounded: true
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/theme.js
var closeButton = T({
  base: "focus:outline-hidden whitespace-normal disabled:cursor-not-allowed disabled:opacity-50",
  variants: {
    // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    color: {
      primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
      secondary: "text-secondary-500 focus:ring-secondary-400 hover:bg-secondary-200 dark:hover:bg-secondary-800 dark:hover:text-secondary-300",
      gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
      red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
      orange: "text-orange-500 focus:ring-orange-400 hover:bg-orange-200 dark:hover:bg-orange-800 dark:hover:text-orange-300",
      amber: "text-amber-500 focus:ring-amber-400 hover:bg-amber-200 dark:hover:bg-amber-800 dark:hover:text-amber-300",
      yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
      lime: "text-lime-500 focus:ring-lime-400 hover:bg-lime-200 dark:hover:bg-lime-800 dark:hover:text-lime-300",
      green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
      emerald: "text-emerald-500 focus:ring-emerald-400 hover:bg-emerald-200 dark:hover:bg-emerald-800 dark:hover:text-emerald-300",
      teal: "text-teal-500 focus:ring-teal-400 hover:bg-teal-200 dark:hover:bg-teal-800 dark:hover:text-teal-300",
      cyan: "text-cyan-500 focus:ring-cyan-400 hover:bg-cyan-200 dark:hover:bg-cyan-800 dark:hover:text-cyan-300",
      sky: "text-sky-500 focus:ring-sky-400 hover:bg-sky-200 dark:hover:bg-sky-800 dark:hover:text-sky-300",
      blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
      indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
      violet: "text-violet-500 focus:ring-violet-400 hover:bg-violet-200 dark:hover:bg-violet-800 dark:hover:text-violet-300",
      purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
      fuchsia: "text-fuchsia-500 focus:ring-fuchsia-400 hover:bg-fuchsia-200 dark:hover:bg-fuchsia-800 dark:hover:text-fuchsia-300",
      pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
      rose: "text-rose-500 focus:ring-rose-400 hover:bg-rose-200 dark:hover:bg-rose-800 dark:hover:text-rose-300",
      none: ""
    },
    size: {
      xs: "m-0.5 rounded-xs focus:ring-1 p-0.5",
      sm: "m-0.5 rounded-sm focus:ring-1 p-0.5",
      md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
      lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
    }
  },
  defaultVariants: {
    color: "gray",
    size: "md",
    href: null
  },
  slots: {
    svg: ""
  },
  compoundVariants: [
    {
      size: "xs",
      class: {
        svg: "w-3 h-3"
      }
    },
    {
      size: "sm",
      class: {
        svg: "w-3.5 h-3.5"
      }
    },
    {
      size: ["md", "lg"],
      class: {
        svg: "w-5 h-5"
      }
    },
    {
      size: ["xs", "sm", "md", "lg"],
      color: "none",
      class: "focus:ring-0 rounded-none m-0"
    }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/dismissable.js
var DISMISSABLE_KEY = Symbol("dismissable");
function createDismissableContext(onDismiss) {
  const context = {
    dismiss: onDismiss
  };
  return setContext(DISMISSABLE_KEY, context);
}
function useDismiss() {
  const context = getContext(DISMISSABLE_KEY);
  if (!context) {
  }
  return context;
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/CloseButton.svelte
CloseButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/CloseButton.svelte";
var root_2 = add_locations(from_html(`<span class="sr-only"> </span>`), CloseButton[FILENAME], [[22, 14]]);
var root_4 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`), CloseButton[FILENAME], [[26, 6, [[27, 8]]]]);
var root_12 = add_locations(from_html(`<button><!> <!></button>`), CloseButton[FILENAME], [[21, 2]]);
var root_62 = add_locations(from_html(`<span class="sr-only"> </span>`), CloseButton[FILENAME], [[33, 14]]);
var root_8 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>`), CloseButton[FILENAME], [[37, 6, [[38, 8]]]]);
var root_5 = add_locations(from_html(`<a><!> <!></a>`), CloseButton[FILENAME], [[32, 2]]);
function CloseButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CloseButton);
  let color = prop($$props, "color", 3, "gray"), name = prop($$props, "name", 3, "Close"), size2 = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "onclick",
      "name",
      "ariaLabel",
      "size",
      "class",
      "svgClass"
    ],
    "restProps"
  );
  const $$d = tag(user_derived(() => closeButton({ color: color(), size: size2() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), svg = tag(user_derived(() => get($$d).svg), "svg");
  const context = useDismiss();
  function onclick(event2) {
    $$props.onclick?.(event2);
    if (event2.defaultPrevented) return;
    context?.dismiss?.(event2);
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var button2 = root_12();
      attribute_effect(
        button2,
        ($0) => ({
          type: "button",
          ...restProps,
          class: $0,
          onclick,
          "aria-label": $$props.ariaLabel ?? name()
        }),
        [() => get(base)({ class: clsx_default($$props.class) })]
      );
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var span2 = root_2();
          var text2 = child(span2, true);
          reset(span2);
          template_effect(() => set_text(text2, name()));
          append($$anchor3, span2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (name()) $$render(consequent);
          }),
          "if",
          CloseButton,
          22,
          4
        );
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", CloseButton, 24, 6);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var svg_1 = root_4();
          template_effect(($0) => set_class(svg_1, 0, $0), [() => clsx2(get(svg)({ class: $$props.svgClass }))]);
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if ($$props.children) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          CloseButton,
          23,
          4
        );
      }
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate_2 = ($$anchor2) => {
      var a2 = root_5();
      attribute_effect(
        a2,
        ($0) => ({
          ...restProps,
          onclick,
          class: $0,
          "aria-label": $$props.ariaLabel ?? name()
        }),
        [() => get(base)({ class: clsx_default($$props.class) })]
      );
      var node_4 = child(a2);
      {
        var consequent_3 = ($$anchor3) => {
          var span_1 = root_62();
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, name()));
          append($$anchor3, span_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (name()) $$render(consequent_3);
          }),
          "if",
          CloseButton,
          33,
          4
        );
      }
      var node_5 = sibling(node_4, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_6 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_6, () => $$props.children), "render", CloseButton, 35, 6);
          append($$anchor3, fragment_2);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_2 = root_8();
          template_effect(($0) => set_class(svg_2, 0, $0), [() => clsx2(get(svg)())]);
          append($$anchor3, svg_2);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if ($$props.children) $$render(consequent_4);
            else $$render(alternate_1, false);
          }),
          "if",
          CloseButton,
          34,
          4
        );
      }
      reset(a2);
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0)) $$render(consequent_2);
        else $$render(alternate_2, false);
      }),
      "if",
      CloseButton,
      20,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  CloseButton = hmr(CloseButton, () => CloseButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CloseButton[HMR].source;
    set(CloseButton[HMR].source, module.default[HMR].original);
  });
}
var CloseButton_default = CloseButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/alert/Alert.svelte
Alert[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/alert/Alert.svelte";
var root_32 = add_locations(from_html(`<div><!></div>`), Alert[FILENAME], [[44, 6]]);
var root_13 = add_locations(from_html(`<div><!> <!> <!></div>`), Alert[FILENAME], [[38, 2]]);
function Alert($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Alert);
  let alertStatus = prop($$props, "alertStatus", 15, true), color = prop($$props, "color", 3, "primary"), rounded = prop($$props, "rounded", 3, true), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "alertStatus",
      "closeIcon",
      "color",
      "rounded",
      "border",
      "class",
      "dismissable",
      "transition",
      "params"
    ],
    "restProps"
  );
  const theme = getTheme("alert");
  let divCls = tag(
    user_derived(() => alert({
      color: color(),
      rounded: rounded(),
      border: $$props.border,
      icon: !!$$props.icon,
      dismissable: $$props.dismissable,
      class: clsx_default(theme, $$props.class)
    })),
    "divCls"
  );
  let ref = tag(state(void 0), "ref");
  function close(event2) {
    if (get(ref)?.dispatchEvent(new Event("close", { bubbles: true, cancelable: true }))) {
      alertStatus(false);
    }
  }
  createDismissableContext(close);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_4 = ($$anchor2) => {
      var div = root_13();
      attribute_effect(div, () => ({ role: "alert", ...restProps, class: get(divCls) }));
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.icon), "render", Alert, 40, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.icon) $$render(consequent);
          }),
          "if",
          Alert,
          39,
          4
        );
      }
      var node_3 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var div_1 = root_32();
          var node_4 = child(div_1);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Alert, 45, 8);
          reset(div_1);
          append($$anchor3, div_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_5, () => $$props.children), "render", Alert, 48, 6);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.icon || $$props.dismissable) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          Alert,
          43,
          4
        );
      }
      var node_6 = sibling(node_3, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_7 = first_child(fragment_3);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_4 = comment();
              var node_8 = first_child(fragment_4);
              add_svelte_meta(
                () => CloseButton_default(node_8, {
                  class: "-my-1.5 ms-auto -me-1.5",
                  get color() {
                    return color();
                  },
                  ariaLabel: "Remove alert",
                  children: wrap_snippet(Alert, ($$anchor5, $$slotProps) => {
                    var fragment_5 = comment();
                    var node_9 = first_child(fragment_5);
                    add_svelte_meta(
                      () => component(node_9, () => $$props.closeIcon, ($$anchor6, CloseIcon_1) => {
                        CloseIcon_1($$anchor6, {});
                      }),
                      "component",
                      Alert,
                      54,
                      10,
                      { componentTag: "CloseIcon" }
                    );
                    append($$anchor5, fragment_5);
                  }),
                  $$slots: { default: true }
                }),
                "component",
                Alert,
                53,
                8,
                { componentTag: "CloseButton" }
              );
              append($$anchor4, fragment_4);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_6 = comment();
              var node_10 = first_child(fragment_6);
              add_svelte_meta(
                () => CloseButton_default(node_10, {
                  class: "-my-1.5 ms-auto -me-1.5",
                  get color() {
                    return color();
                  },
                  ariaLabel: "Remove alert"
                }),
                "component",
                Alert,
                57,
                8,
                { componentTag: "CloseButton" }
              );
              append($$anchor4, fragment_6);
            };
            add_svelte_meta(
              () => if_block(node_7, ($$render) => {
                if ($$props.closeIcon) $$render(consequent_2);
                else $$render(alternate_1, false);
              }),
              "if",
              Alert,
              52,
              6
            );
          }
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if ($$props.dismissable) $$render(consequent_3);
          }),
          "if",
          Alert,
          51,
          4
        );
      }
      reset(div);
      bind_this(div, ($$value) => set(ref, $$value), () => get(ref));
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (alertStatus()) $$render(consequent_4);
      }),
      "if",
      Alert,
      37,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Alert = hmr(Alert, () => Alert[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Alert[HMR].source;
    set(Alert[HMR].source, module.default[HMR].original);
  });
}
var Alert_default = Alert;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/avatar/theme.js
var avatar = T({
  base: "relative flex items-center justify-center bg-gray-100 dark:bg-gray-600 text-gray-600 dark:text-gray-300",
  variants: {
    cornerStyle: {
      rounded: "rounded-sm",
      circular: "rounded-full"
    },
    border: {
      true: "p-1 ring-2 ring-gray-300 dark:ring-gray-500",
      false: ""
    },
    stacked: {
      true: "border-2 not-first:-ms-4 border-white dark:border-gray-800",
      false: ""
    },
    size: {
      xs: "w-6 h-6",
      sm: "w-8 h-8",
      md: "w-10 h-10",
      lg: "w-20 h-20",
      xl: "w-36 h-36"
    }
  },
  defaultVariants: {
    cornerStyle: "circular",
    border: false,
    stacked: false,
    size: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/indicator/theme.js
var indicator = T({
  base: "shrink-0",
  variants: {
    color: {
      // 'primary' secondary 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'
      primary: "bg-primary-500",
      secondary: "bg-secondary-500",
      gray: "bg-gray-200",
      red: "bg-red-500",
      orange: "bg-orange-600",
      amber: "bg-amber-500",
      yellow: "bg-yellow-300",
      lime: "bg-lime-500",
      green: "bg-green-500",
      emerald: "bg-emerald-500",
      teal: "bg-teal-500",
      cyan: "bg-cyan-500",
      sky: "bg-sky-500",
      blue: "bg-blue-500",
      indigo: "bg-indigo-500",
      violet: "bg-violet-500",
      purple: "bg-purple-500",
      fuchsia: "bg-fuchsia-500",
      pink: "bg-pink-500",
      rose: "bg-rose-500"
    },
    size: {
      xs: "w-2 h-2",
      sm: "w-2.5 h-2.5",
      md: "w-3 h-3",
      lg: "w-3.5 h-3.5",
      xl: "w-6 h-6"
    },
    cornerStyle: {
      rounded: "rounded-sm",
      circular: "rounded-full"
    },
    border: {
      true: "border border-gray-300 dark:border-gray-300",
      false: {}
    },
    hasChildren: {
      true: "inline-flex items-center justify-center",
      false: {}
    },
    placement: {
      default: "",
      "top-left": "absolute top-0 start-0",
      "top-center": "absolute top-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2",
      "top-right": "absolute top-0 end-0",
      "center-left": "absolute top-1/2 -translate-y-1/2 start-0",
      center: "absolute top-1/2 -translate-y-1/2 start-1/2 -translate-x-1/2 rtl:translate-x-1/2",
      "center-right": "absolute top-1/2 -translate-y-1/2 end-0",
      "bottom-left": "absolute bottom-0 start-0",
      "bottom-center": "absolute bottom-0 start-1/2 -translate-x-1/2 rtl:translate-x-1/2",
      "bottom-right": "absolute bottom-0 end-0"
    },
    offset: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      placement: "top-left",
      offset: true,
      class: "-translate-x-1/3 rtl:translate-x-1/3 -translate-y-1/3"
    },
    {
      placement: "top-center",
      offset: true,
      class: "-translate-y-1/3"
    },
    {
      placement: "top-right",
      offset: true,
      class: "translate-x-1/3 rtl:-translate-x-1/3 -translate-y-1/3"
    },
    {
      placement: "center-left",
      offset: true,
      class: "-translate-x-1/3 rtl:translate-x-1/3"
    },
    {
      placement: "center-right",
      offset: true,
      class: "translate-x-1/3 rtl:-translate-x-1/3"
    },
    {
      placement: "bottom-left",
      offset: true,
      class: "-translate-x-1/3 rtl:translate-x-1/3 translate-y-1/3"
    },
    {
      placement: "bottom-center",
      offset: true,
      class: "translate-y-1/3"
    },
    {
      placement: "bottom-right",
      offset: true,
      class: "translate-x-1/3 rtl:-translate-x-1/3 translate-y-1/3"
    }
  ],
  defaultVariants: {
    color: "primary",
    size: "md",
    cornerStyle: "circular",
    border: false,
    offset: true,
    hasChildren: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/indicator/Indicator.svelte
Indicator[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/indicator/Indicator.svelte";
var root3 = add_locations(from_html(`<div><!></div>`), Indicator[FILENAME], [[26, 0]]);
function Indicator($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Indicator);
  let color = prop($$props, "color", 3, "primary"), cornerStyle = prop($$props, "cornerStyle", 3, "circular"), size2 = prop($$props, "size", 3, "md"), border = prop($$props, "border", 3, false), offset3 = prop($$props, "offset", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "cornerStyle",
      "size",
      "border",
      "placement",
      "offset",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("indicator");
  let hasChildren = !!$$props.children;
  const base = tag(
    user_derived(() => indicator({
      color: color(),
      size: size2(),
      cornerStyle: cornerStyle(),
      border: border(),
      placement: $$props.placement,
      offset: offset3(),
      hasChildren,
      class: clsx_default(theme, $$props.class)
    })),
    "base"
  );
  var $$exports = { ...legacy_api() };
  var div = root3();
  attribute_effect(div, () => ({ ...restProps, class: get(base) }));
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Indicator, 28, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Indicator,
      27,
      2
    );
  }
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Indicator = hmr(Indicator, () => Indicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Indicator[HMR].source;
    set(Indicator[HMR].source, module.default[HMR].original);
  });
}
var Indicator_default = Indicator;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/avatar/Avatar.svelte
Avatar[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/avatar/Avatar.svelte";
var root_33 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[29, 6]]);
var root_63 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z" clip-rule="evenodd"></path></svg>`), Avatar[FILENAME], [[33, 6, [[34, 8]]]]);
var root_22 = add_locations(from_html(`<!> <!> <!>`, 1), Avatar[FILENAME], []);
var root_92 = add_locations(from_html(`<img/>`), Avatar[FILENAME], [[45, 2]]);
function Avatar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Avatar);
  let cornerStyle = prop($$props, "cornerStyle", 3, "circular"), border = prop($$props, "border", 3, false), stacked = prop($$props, "stacked", 3, false), dot = prop($$props, "dot", 7), size2 = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "indicator",
      "src",
      "href",
      "target",
      "cornerStyle",
      "border",
      "stacked",
      "dot",
      "class",
      "alt",
      "size",
      "onclick"
    ],
    "restProps"
  );
  const theme = getTheme("avatar");
  dot(dot() && { placement: "top-right", color: "gray", size: "lg", ...dot() });
  let avatarClass = tag(
    user_derived(() => avatar({
      cornerStyle: cornerStyle(),
      border: border(),
      stacked: stacked(),
      size: size2(),
      class: clsx_default(theme, $$props.class)
    })),
    "avatarClass"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        validate_void_dynamic_element(() => $$props.href ? "a" : "div");
        validate_dynamic_element_tag(() => $$props.href ? "a" : "div");
        element(
          node_1,
          () => $$props.href ? "a" : "div",
          false,
          ($$element, $$anchor3) => {
            attribute_effect($$element, () => ({
              role: $$props.href ? void 0 : "button",
              onclick: $$props.onclick,
              href: $$props.href,
              target: $$props.target,
              ...restProps,
              class: get(avatarClass)
            }));
            var fragment_2 = root_22();
            var node_2 = first_child(fragment_2);
            {
              var consequent = ($$anchor4) => {
                var img2 = root_33();
                template_effect(() => {
                  set_attribute(img2, "alt", $$props.alt);
                  set_attribute(img2, "src", $$props.src);
                  set_class(img2, 1, clsx2(strict_equals(cornerStyle(), "circular") ? "rounded-full" : "rounded-sm"));
                });
                append($$anchor4, img2);
              };
              var alternate_1 = ($$anchor4) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                {
                  var consequent_1 = ($$anchor5) => {
                    var fragment_4 = comment();
                    var node_4 = first_child(fragment_4);
                    add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Avatar, 31, 6);
                    append($$anchor5, fragment_4);
                  };
                  var alternate = ($$anchor5) => {
                    var svg = root_63();
                    template_effect(() => set_class(svg, 0, `h-full w-full ${strict_equals(cornerStyle(), "circular") ? "rounded-full" : "rounded-sm"}`));
                    append($$anchor5, svg);
                  };
                  add_svelte_meta(
                    () => if_block(
                      node_3,
                      ($$render) => {
                        if ($$props.children) $$render(consequent_1);
                        else $$render(alternate, false);
                      },
                      true
                    ),
                    "if",
                    Avatar,
                    30,
                    4
                  );
                }
                append($$anchor4, fragment_3);
              };
              add_svelte_meta(
                () => if_block(node_2, ($$render) => {
                  if ($$props.src) $$render(consequent);
                  else $$render(alternate_1, false);
                }),
                "if",
                Avatar,
                28,
                4
              );
            }
            var node_5 = sibling(node_2, 2);
            {
              var consequent_2 = ($$anchor4) => {
                var fragment_5 = comment();
                var node_6 = first_child(fragment_5);
                {
                  let $0 = user_derived(() => strict_equals(cornerStyle(), "circular") ? true : false);
                  add_svelte_meta(
                    () => Indicator_default(node_6, spread_props(
                      {
                        border: true,
                        get offset() {
                          return get($0);
                        }
                      },
                      dot
                    )),
                    "component",
                    Avatar,
                    38,
                    6,
                    { componentTag: "Indicator" }
                  );
                }
                append($$anchor4, fragment_5);
              };
              add_svelte_meta(
                () => if_block(node_5, ($$render) => {
                  if (dot()) $$render(consequent_2);
                }),
                "if",
                Avatar,
                37,
                4
              );
            }
            var node_7 = sibling(node_5, 2);
            {
              var consequent_3 = ($$anchor4) => {
                var fragment_6 = comment();
                var node_8 = first_child(fragment_6);
                add_svelte_meta(() => snippet(node_8, () => $$props.indicator), "render", Avatar, 41, 6);
                append($$anchor4, fragment_6);
              };
              add_svelte_meta(
                () => if_block(node_7, ($$render) => {
                  if ($$props.indicator) $$render(consequent_3);
                }),
                "if",
                Avatar,
                40,
                4
              );
            }
            append($$anchor3, fragment_2);
          },
          void 0,
          [27, 2]
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_2 = ($$anchor2) => {
      var img_1 = root_92();
      attribute_effect(img_1, () => ({
        alt: $$props.alt,
        src: $$props.src,
        ...restProps,
        onclick: $$props.onclick,
        class: get(avatarClass)
      }));
      replay_events(img_1);
      append($$anchor2, img_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!$$props.src || !!$$props.href || $$props.children || dot() || $$props.indicator) $$render(consequent_4);
        else $$render(alternate_2, false);
      }),
      "if",
      Avatar,
      26,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Avatar = hmr(Avatar, () => Avatar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Avatar[HMR].source;
    set(Avatar[HMR].source, module.default[HMR].original);
  });
}
var Avatar_default = Avatar;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/badge/theme.js
var badge = T({
  slots: {
    linkClass: "flex align-middle",
    base: "font-medium inline-flex items-center justify-center px-2.5 py-0.5"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: { base: "bg-primary-100 text-primary-800 dark:bg-primary-900 dark:text-primary-300" },
      secondary: { base: "bg-secondary-100 text-secondary-800 dark:bg-secondary-900 dark:text-secondary-300" },
      gray: { base: "bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300" },
      red: { base: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300" },
      orange: { base: "bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300" },
      amber: { base: "bg-amber-100 text-amber-800 dark:bg-amber-900 dark:text-amber-300" },
      yellow: { base: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300" },
      lime: { base: "bg-lime-100 text-lime-800 dark:bg-lime-900 dark:text-lime-300" },
      green: { base: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" },
      emerald: { base: "bg-emerald-100 text-emerald-800 dark:bg-emerald-900 dark:text-emerald-300" },
      teal: { base: "bg-teal-100 text-teal-800 dark:bg-teal-900 dark:text-teal-300" },
      cyan: { base: "bg-cyan-100 text-cyan-800 dark:bg-cyan-900 dark:text-cyan-300" },
      sky: { base: "bg-sky-100 text-sky-800 dark:bg-sky-900 dark:text-sky-300" },
      blue: { base: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300" },
      indigo: { base: "bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-300" },
      violet: { base: "bg-violet-100 text-violet-800 dark:bg-violet-900 dark:text-violet-300" },
      fuchsia: { base: "bg-fuchsia-100 text-fuchsia-800 dark:bg-fuchsia-900 dark:text-fuchsia-300" },
      purple: { base: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300" },
      pink: { base: "bg-pink-100 text-pink-800 dark:bg-pink-900 dark:text-pink-300" },
      rose: { base: "bg-rose-100 text-rose-800 dark:bg-rose-900 dark:text-rose-300" }
    },
    size: {
      small: "text-xs",
      large: "text-sm"
    },
    border: {
      true: { base: "border" }
    },
    rounded: {
      true: { base: "rounded-full" },
      false: "rounded-sm"
    }
  },
  compoundVariants: [
    {
      border: true,
      color: "primary",
      class: "dark:bg-transparent dark:text-primary-400 border-primary-400 dark:border-primary-400"
    },
    {
      border: true,
      color: "secondary",
      class: "dark:bg-transparent dark:text-secondary-400 border-secondary-400 dark:border-secondary-400"
    },
    {
      border: true,
      color: "gray",
      class: "dark:bg-transparent dark:text-gray-400 border-gray-400 dark:border-gray-400"
    },
    {
      border: true,
      color: "red",
      class: "dark:bg-transparent dark:text-red-400 border-red-400 dark:border-red-400"
    },
    {
      border: true,
      color: "orange",
      class: "dark:bg-transparent dark:text-orange-400 border-orange-400 dark:border-orange-400"
    },
    {
      border: true,
      color: "amber",
      class: "dark:bg-transparent dark:text-amber-400 border-amber-400 dark:border-amber-400"
    },
    {
      border: true,
      color: "yellow",
      class: "dark:bg-transparent dark:text-yellow-300 border-yellow-300 dark:border-yellow-300"
    },
    {
      border: true,
      color: "lime",
      class: "dark:bg-transparent dark:text-lime-400 border-lime-400 dark:border-lime-400"
    },
    {
      border: true,
      color: "green",
      class: "dark:bg-transparent dark:text-green-400 border-green-400 dark:border-green-400"
    },
    {
      border: true,
      color: "emerald",
      class: "dark:bg-transparent dark:text-emerald-400 border-emerald-400 dark:border-emerald-400"
    },
    {
      border: true,
      color: "teal",
      class: "dark:bg-transparent dark:text-teal-400 border-teal-400 dark:border-teal-400"
    },
    {
      border: true,
      color: "cyan",
      class: "dark:bg-transparent dark:text-cyan-400 border-cyan-400 dark:border-cyan-400"
    },
    {
      border: true,
      color: "sky",
      class: "dark:bg-transparent dark:text-sky-400 border-sky-400 dark:border-sky-400"
    },
    {
      border: true,
      color: "blue",
      class: "dark:bg-transparent dark:text-blue-400 border-blue-400 dark:border-blue-400"
    },
    {
      border: true,
      color: "indigo",
      class: "dark:bg-transparent dark:text-indigo-400 border-indigo-400 dark:border-indigo-400"
    },
    {
      border: true,
      color: "violet",
      class: "dark:bg-transparent dark:text-violet-400 border-violet-400 dark:border-violet-400"
    },
    {
      border: true,
      color: "purple",
      class: "dark:bg-transparent dark:text-purple-400 border-purple-400 dark:border-purple-400"
    },
    {
      border: true,
      color: "fuchsia",
      class: "dark:bg-transparent dark:text-fuchsia-400 border-fuchsia-400 dark:border-fuchsia-400"
    },
    {
      border: true,
      color: "pink",
      class: "dark:bg-transparent dark:text-pink-400 border-pink-400 dark:border-pink-400"
    },
    {
      border: true,
      color: "rose",
      class: "dark:bg-transparent dark:text-rose-400 border-rose-400 dark:border-rose-400"
    },
    {
      href: true,
      color: "primary",
      class: "hover:bg-primary-200"
    },
    {
      href: true,
      color: "secondary",
      class: "hover:bg-secondary-200"
    },
    {
      href: true,
      color: "gray",
      class: "hover:bg-gray-200"
    },
    {
      href: true,
      color: "red",
      class: "hover:bg-red-200"
    },
    {
      href: true,
      color: "orange",
      class: "hover:bg-orange-200"
    },
    {
      href: true,
      color: "amber",
      class: "hover:bg-amber-200"
    },
    {
      href: true,
      color: "yellow",
      class: "hover:bg-yellow-200"
    },
    {
      href: true,
      color: "lime",
      class: "hover:bg-lime-200"
    },
    {
      href: true,
      color: "green",
      class: "hover:bg-green-200"
    },
    {
      href: true,
      color: "emerald",
      class: "hover:bg-emerald-200"
    },
    {
      href: true,
      color: "teal",
      class: "hover:bg-teal-200"
    },
    {
      href: true,
      color: "cyan",
      class: "hover:bg-cyan-200"
    },
    {
      href: true,
      color: "sky",
      class: "hover:bg-sky-200"
    },
    {
      href: true,
      color: "blue",
      class: "hover:bg-blue-200"
    },
    {
      href: true,
      color: "indigo",
      class: "hover:bg-indigo-200"
    },
    {
      href: true,
      color: "violet",
      class: "hover:bg-violet-200"
    },
    {
      href: true,
      color: "purple",
      class: "hover:bg-purple-200"
    },
    {
      href: true,
      color: "fuchsia",
      class: "hover:bg-fuchsia-200"
    },
    {
      href: true,
      color: "pink",
      class: "hover:bg-pink-200"
    },
    {
      href: true,
      color: "rose",
      class: "hover:bg-rose-200"
    }
  ],
  defaultVariants: {
    color: "primary",
    size: "small",
    rounded: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/badge/Badge.svelte
Badge[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/badge/Badge.svelte";
var root_23 = add_locations(from_html(`<a><!></a>`), Badge[FILENAME], [[35, 6]]);
var root_14 = add_locations(from_html(`<div><!> <!></div>`), Badge[FILENAME], [[33, 2]]);
function Badge($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Badge);
  let badgeStatus = prop($$props, "badgeStatus", 15, true), color = prop($$props, "color", 3, "primary"), large = prop($$props, "large", 3, false), dismissable = prop($$props, "dismissable", 3, false), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "badgeStatus",
      "color",
      "large",
      "dismissable",
      "class",
      "classes",
      "border",
      "href",
      "target",
      "rounded",
      "transition",
      "params",
      "aClass"
    ],
    "restProps"
  );
  warnThemeDeprecation("Badge", { aClass: $$props.aClass }, { aClass: "linkClass" });
  const styling = tag(user_derived(() => $$props.classes ?? { linkClass: $$props.aClass }), "styling");
  const theme = getTheme("badge");
  const $$d = tag(
    user_derived(() => badge({
      color: color(),
      size: large() ? "large" : "small",
      rounded: $$props.rounded,
      border: $$props.border
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), linkClass = tag(user_derived(() => get($$d).linkClass), "linkClass");
  let ref = tag(state(void 0), "ref");
  const close = (ev) => {
    if (get(ref)?.dispatchEvent(new Event("close", { bubbles: true, cancelable: true }))) {
      badgeStatus(false);
    }
  };
  createDismissableContext(close);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var div = root_14();
      attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var a2 = root_23();
          var node_2 = child(a2);
          add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", Badge, 36, 8);
          reset(a2);
          template_effect(
            ($0) => {
              set_attribute(a2, "href", $$props.href);
              set_attribute(a2, "target", $$props.target);
              set_class(a2, 1, $0);
            },
            [
              () => clsx2(get(linkClass)({ class: clsx_default(theme?.linkClass, get(styling).linkClass) }))
            ]
          );
          append($$anchor3, a2);
        };
        var alternate = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", Badge, 39, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.href) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Badge,
          34,
          4
        );
      }
      var node_4 = sibling(node_1, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_6 = first_child(fragment_3);
              {
                let $0 = user_derived(() => large() ? "sm" : "xs");
                add_svelte_meta(
                  () => CloseButton_default(node_6, {
                    class: "ms-1.5 -me-1.5",
                    get color() {
                      return color();
                    },
                    get size() {
                      return get($0);
                    },
                    ariaLabel: "Remove badge",
                    children: wrap_snippet(Badge, ($$anchor5, $$slotProps) => {
                      var fragment_4 = comment();
                      var node_7 = first_child(fragment_4);
                      add_svelte_meta(() => snippet(node_7, () => $$props.icon), "render", Badge, 45, 10);
                      append($$anchor5, fragment_4);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Badge,
                  44,
                  8,
                  { componentTag: "CloseButton" }
                );
              }
              append($$anchor4, fragment_3);
            };
            var alternate_1 = ($$anchor4) => {
              var fragment_5 = comment();
              var node_8 = first_child(fragment_5);
              {
                let $0 = user_derived(() => large() ? "sm" : "xs");
                add_svelte_meta(
                  () => CloseButton_default(node_8, {
                    class: "ms-1.5 -me-1.5",
                    get color() {
                      return color();
                    },
                    get size() {
                      return get($0);
                    },
                    ariaLabel: "Remove badge"
                  }),
                  "component",
                  Badge,
                  48,
                  8,
                  { componentTag: "CloseButton" }
                );
              }
              append($$anchor4, fragment_5);
            };
            add_svelte_meta(
              () => if_block(node_5, ($$render) => {
                if ($$props.icon) $$render(consequent_1);
                else $$render(alternate_1, false);
              }),
              "if",
              Badge,
              43,
              6
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (dismissable()) $$render(consequent_2);
          }),
          "if",
          Badge,
          42,
          4
        );
      }
      reset(div);
      bind_this(div, ($$value) => set(ref, $$value), () => get(ref));
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (badgeStatus()) $$render(consequent_3);
      }),
      "if",
      Badge,
      32,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Badge = hmr(Badge, () => Badge[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Badge[HMR].source;
    set(Badge[HMR].source, module.default[HMR].original);
  });
}
var Badge_default = Badge;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/banner/theme.js
var banner = T({
  slots: {
    base: "fixed z-50 flex justify-between p-4 mx-auto dark:bg-gray-700 dark:border-gray-600",
    insideDiv: "flex flex-col md:flex-row md:items-center gap-2 mx-auto",
    dismissable: "absolute end-2.5 top-2.5 md:static md:end-auto md:top-auto"
  },
  variants: {
    type: {
      top: {
        base: "top-0 start-0 w-full border-b border-gray-200 bg-gray-50"
      },
      bottom: {
        base: "bottom-0 start-0 w-full border-t border-gray-200 bg-gray-50"
      }
    },
    color: {
      // 'primary' secondary, | 'gray' | 'red' | 'orange' | 'amber' | 'yellow' | 'lime' | 'green' | 'emerald' | 'teal' | 'cyan' | 'sky' | 'blue' | 'indigo' | 'violet' | 'purple' | 'fuchsia' | 'pink' | 'rose'
      primary: { base: "bg-primary-50 dark:bg-primary-900" },
      secondary: { base: "bg-secondary-50 dark:bg-secondary-900" },
      gray: { base: "bg-gray-50 dark:bg-gray-700" },
      red: { base: "bg-red-50 dark:bg-red-900" },
      orange: { base: "bg-orange-50 dark:bg-orange-900" },
      amber: { base: "bg-amber-50 dark:bg-amber-900" },
      yellow: { base: "bg-yellow-50 dark:bg-yellow-900" },
      lime: { base: "bg-lime-50 dark:bg-lime-900" },
      green: { base: "bg-green-50 dark:bg-green-900" },
      emerald: { base: "bg-emerald-50 dark:bg-emerald-900" },
      teal: { base: "bg-teal-50 dark:bg-teal-900" },
      cyan: { base: "bg-cyan-50 dark:bg-cyan-900" },
      sky: { base: "bg-sky-50 dark:bg-sky-900" },
      blue: { base: "bg-blue-50 dark:bg-blue-900" },
      indigo: { base: "bg-indigo-50 dark:bg-indigo-900" },
      violet: { base: "bg-violet-50 dark:bg-violet-900" },
      purple: { base: "bg-purple-50 dark:bg-purple-900" },
      fuchsia: { base: "bg-fuchsia-50 dark:bg-fuchsia-900" },
      pink: { base: "bg-pink-50 dark:bg-pink-900" },
      rose: { base: "bg-rose-50 dark:bg-rose-900" }
    }
  },
  defaultVariants: {
    type: "top",
    multiline: true
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/banner/Banner.svelte
Banner[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/banner/Banner.svelte";
var root_24 = add_locations(from_html(`<div class="flex items-center justify-end"><!></div>`), Banner[FILENAME], [[37, 6]]);
var root_15 = add_locations(from_html(`<div><div><!></div> <!></div>`), Banner[FILENAME], [[31, 2, [[32, 4]]]]);
function Banner($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Banner);
  let open = prop($$props, "open", 15, true), dismissable = prop($$props, "dismissable", 3, true), color = prop($$props, "color", 3, "gray"), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "open",
      "dismissable",
      "color",
      "type",
      "class",
      "classes",
      "innerClass",
      "transition",
      "params",
      "closeClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Banner",
    {
      innerClass: $$props.innerClass,
      closeClass: $$props.closeClass
    },
    { innerClass: "insideDiv", closeClass: "dismissable" }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      insideDiv: $$props.innerClass,
      dismissable: $$props.closeClass
    }),
    "styling"
  );
  const theme = getTheme("banner");
  const $$d = tag(user_derived(() => banner({ type: $$props.type, color: color() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), insideDiv = tag(user_derived(() => get($$d).insideDiv), "insideDiv"), dismissableClass = tag(user_derived(() => get($$d).dismissable), "dismissableClass");
  let ref = tag(state(void 0), "ref");
  function close(event2) {
    if (get(ref)?.dispatchEvent(new Event("close", { bubbles: true, cancelable: true }))) {
      open(false);
    }
  }
  createDismissableContext(close);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_15();
      attribute_effect(div, ($0) => ({ tabindex: "-1", class: $0, ...restProps }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var div_1 = child(div);
      var node_1 = child(div_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", Banner, 33, 6);
      reset(div_1);
      var node_2 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_2 = root_24();
          var node_3 = child(div_2);
          {
            let $0 = user_derived(() => get(dismissableClass)({ class: clsx_default(theme?.dismissable, get(styling).dismissable) }));
            add_svelte_meta(
              () => CloseButton_default(node_3, {
                get class() {
                  return get($0);
                },
                get color() {
                  return color();
                },
                ariaLabel: "Remove banner"
              }),
              "component",
              Banner,
              38,
              8,
              { componentTag: "CloseButton" }
            );
          }
          reset(div_2);
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (dismissable()) $$render(consequent);
          }),
          "if",
          Banner,
          36,
          4
        );
      }
      reset(div);
      bind_this(div, ($$value) => set(ref, $$value), () => get(ref));
      template_effect(($0) => set_class(div_1, 1, $0), [
        () => clsx2(get(insideDiv)({ class: clsx_default(theme?.insideDiv, get(styling).insideDiv) }))
      ]);
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (open()) $$render(consequent_1);
      }),
      "if",
      Banner,
      30,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Banner = hmr(Banner, () => Banner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Banner[HMR].source;
    set(Banner[HMR].source, module.default[HMR].original);
  });
}
var Banner_default = Banner;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/actions.js
function trapFocus(node, options = {}) {
  if (options === null) {
    return {
      update(newOptions = {}) {
        options = newOptions;
      },
      destroy() {
      }
    };
  }
  const previous = document.activeElement;
  let isClosingViaOutsideClick = false;
  let isFocusMovedOutside = false;
  function focusable() {
    return Array.from(node.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'));
  }
  function handleKeydown(event2) {
    if (event2.key === "Tab" && options !== null) {
      const current = document.activeElement;
      const elements = focusable();
      const first = elements.at(0);
      const last = elements.at(-1);
      if (event2.shiftKey && current === first) {
        last?.focus();
        event2.preventDefault();
      }
      if (!event2.shiftKey && current === last) {
        first?.focus();
        event2.preventDefault();
      }
    } else if (event2.key === "Escape" && options !== null && options.onEscape) {
      event2.preventDefault();
      isClosingViaOutsideClick = true;
      options.onEscape();
    }
  }
  function handleFocusOut(event2) {
    if (!node.contains(event2.relatedTarget) && event2.relatedTarget !== previous) {
      isFocusMovedOutside = true;
    }
  }
  function initialize() {
    if (options !== null) {
      isClosingViaOutsideClick = !!options.isClosing;
      if (!isClosingViaOutsideClick && !isFocusMovedOutside) {
        const elements = focusable();
        if (elements.length > 0) {
          elements[0].focus();
        }
      }
      node.addEventListener("keydown", handleKeydown);
      node.addEventListener("focusout", handleFocusOut);
    }
  }
  function cleanup() {
    if (options !== null) {
      node.removeEventListener("keydown", handleKeydown);
      node.removeEventListener("focusout", handleFocusOut);
      if (!isClosingViaOutsideClick && !isFocusMovedOutside && previous) {
        setTimeout(() => {
          previous.focus({ preventScroll: true });
        }, 0);
      }
    }
  }
  initialize();
  return {
    update(newOptions = {}) {
      node.removeEventListener("keydown", handleKeydown);
      node.removeEventListener("focusout", handleFocusOut);
      if (newOptions && newOptions.isClosing !== void 0) {
        isClosingViaOutsideClick = newOptions.isClosing;
      }
      options = newOptions;
      if (options !== null) {
        node.addEventListener("keydown", handleKeydown);
        node.addEventListener("focusout", handleFocusOut);
      }
    },
    destroy() {
      cleanup();
    }
  };
}

// node_modules/.pnpm/@floating-ui+utils@0.2.10/node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v) => ({
  x: v,
  y: v
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
var yAxisSides = /* @__PURE__ */ new Set(["top", "bottom"]);
function getSideAxis(placement) {
  return yAxisSides.has(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
var lrPlacement = ["left", "right"];
var rlPlacement = ["right", "left"];
var tbPlacement = ["top", "bottom"];
var btPlacement = ["bottom", "top"];
function getSideList(side, isStart, rtl) {
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rlPlacement : lrPlacement;
      return isStart ? lrPlacement : rlPlacement;
    case "left":
    case "right":
      return isStart ? tbPlacement : btPlacement;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list2 = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list2 = list2.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list2 = list2.concat(list2.map(getOppositeAlignmentPlacement));
    }
  }
  return list2;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x2,
    y: y2,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y2,
    left: x2,
    right: x2 + width,
    bottom: y2 + height,
    x: x2,
    y: y2
  };
}

// node_modules/.pnpm/@floating-ui+core@1.7.3/node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x2,
    y: y2
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i2 = 0; i2 < validMiddleware.length; i2++) {
    const {
      name,
      fn
    } = validMiddleware[i2];
    const {
      x: nextX,
      y: nextY,
      data,
      reset: reset2
    } = await fn({
      x: x2,
      y: y2,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x2 = nextX != null ? nextX : x2;
    y2 = nextY != null ? nextY : y2;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset2 && resetCount <= 50) {
      resetCount++;
      if (typeof reset2 === "object") {
        if (reset2.placement) {
          statefulPlacement = reset2.placement;
        }
        if (reset2.rects) {
          rects = reset2.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset2.rects;
        }
        ({
          x: x2,
          y: y2
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i2 = -1;
    }
  }
  return {
    x: x2,
    y: y2,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state2, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x2,
    y: y2,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state2;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state2);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element2 = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element2))) != null ? _await$platform$isEle : true) ? element2 : element2.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x2,
    y: y2,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state2) {
    const {
      x: x2,
      y: y2,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state2;
    const {
      element: element2,
      padding = 0
    } = evaluate(options, state2) || {};
    if (element2 == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x2,
      y: y2
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element2);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element2));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max3 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset3 = clamp(min$1, center, max3);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max3 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset3,
        centerOffset: center - offset3 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state2) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state2;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state2);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const initialSideAxis = getSideAxis(initialPlacement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
      if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state2, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          const ignoreCrossAxisOverflow = checkCrossAxis === "alignment" ? initialSideAxis !== getSideAxis(nextPlacement) : false;
          if (!ignoreCrossAxisOverflow || // We leave the current main axis only if every placement on that axis
          // overflows the main axis.
          overflowsData.every((d2) => getSideAxis(d2.placement) === initialSideAxis ? d2.overflows[0] > 0 : true)) {
            return {
              data: {
                index: nextIndex,
                overflows: overflowsData
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d2) => d2.overflows[0] <= 0).sort((a2, b) => a2.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$filter2;
              const placement2 = (_overflowsData$filter2 = overflowsData.filter((d2) => {
                if (hasFallbackAxisSideDirection) {
                  const currentSideAxis = getSideAxis(d2.placement);
                  return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                  // reading directions favoring greater width.
                  currentSideAxis === "y";
                }
                return true;
              }).map((d2) => [d2.placement, d2.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a2, b) => a2[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
var originSides = /* @__PURE__ */ new Set(["left", "top"]);
async function convertValueToCoords(state2, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state2;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = originSides.has(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state2);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: rawValue.mainAxis || 0,
    crossAxis: rawValue.crossAxis || 0,
    alignmentAxis: rawValue.alignmentAxis
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state2) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x2,
        y: y2,
        placement,
        middlewareData
      } = state2;
      const diffCoords = await convertValueToCoords(state2, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x2 + diffCoords.x,
        y: y2 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state2) {
      const {
        x: x2,
        y: y2,
        placement
      } = state2;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x3,
              y: y3
            } = _ref;
            return {
              x: x3,
              y: y3
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state2);
      const coords = {
        x: x2,
        y: y2
      };
      const overflow = await detectOverflow(state2, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min3 = mainAxisCoord + overflow[minSide];
        const max3 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min3, mainAxisCoord, max3);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min3 = crossAxisCoord + overflow[minSide];
        const max3 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min3, crossAxisCoord, max3);
      }
      const limitedCoords = limiter.fn({
        ...state2,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x2,
          y: limitedCoords.y - y2,
          enabled: {
            [mainAxis]: checkMainAxis,
            [crossAxis]: checkCrossAxis
          }
        }
      };
    }
  };
};

// node_modules/.pnpm/@floating-ui+utils@0.2.10/node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function hasWindow() {
  return typeof window !== "undefined";
}
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  if (!hasWindow()) {
    return false;
  }
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (!hasWindow() || typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
var invalidOverflowDisplayValues = /* @__PURE__ */ new Set(["inline", "contents"]);
function isOverflowElement(element2) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element2);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
}
var tableElements = /* @__PURE__ */ new Set(["table", "td", "th"]);
function isTableElement(element2) {
  return tableElements.has(getNodeName(element2));
}
var topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element2) {
  return topLayerSelectors.some((selector) => {
    try {
      return element2.matches(selector);
    } catch (_e) {
      return false;
    }
  });
}
var transformProperties = ["transform", "translate", "scale", "rotate", "perspective"];
var willChangeValues = ["transform", "translate", "scale", "rotate", "perspective", "filter"];
var containValues = ["paint", "layout", "strict", "content"];
function isContainingBlock(elementOrCss) {
  const webkit = isWebKit();
  const css = isElement(elementOrCss) ? getComputedStyle2(elementOrCss) : elementOrCss;
  return transformProperties.some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || willChangeValues.some((value) => (css.willChange || "").includes(value)) || containValues.some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element2) {
  let currentNode = getParentNode(element2);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    } else if (isTopLayer(currentNode)) {
      return null;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
var lastTraversableNodeNames = /* @__PURE__ */ new Set(["html", "body", "#document"]);
function isLastTraversableNode(node) {
  return lastTraversableNodeNames.has(getNodeName(node));
}
function getComputedStyle2(element2) {
  return getWindow(element2).getComputedStyle(element2);
}
function getNodeScroll(element2) {
  if (isElement(element2)) {
    return {
      scrollLeft: element2.scrollLeft,
      scrollTop: element2.scrollTop
    };
  }
  return {
    scrollLeft: element2.scrollX,
    scrollTop: element2.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list2, traverseIframes) {
  var _node$ownerDocument2;
  if (list2 === void 0) {
    list2 = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    const frameElement = getFrameElement(win);
    return list2.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
  }
  return list2.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
function getFrameElement(win) {
  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
}

// node_modules/.pnpm/@floating-ui+dom@1.7.4/node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element2) {
  const css = getComputedStyle2(element2);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element2);
  const offsetWidth = hasOffset ? element2.offsetWidth : width;
  const offsetHeight = hasOffset ? element2.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element2) {
  return !isElement(element2) ? element2.contextElement : element2;
}
function getScale(element2) {
  const domElement = unwrapElement(element2);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x2 = ($ ? round(rect.width) : rect.width) / width;
  let y2 = ($ ? round(rect.height) : rect.height) / height;
  if (!x2 || !Number.isFinite(x2)) {
    x2 = 1;
  }
  if (!y2 || !Number.isFinite(y2)) {
    y2 = 1;
  }
  return {
    x: x2,
    y: y2
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element2) {
  const win = getWindow(element2);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element2, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element2)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element2, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element2.getBoundingClientRect();
  const domElement = unwrapElement(element2);
  let scale2 = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale2 = getScale(offsetParent);
      }
    } else {
      scale2 = getScale(element2);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x2 = (clientRect.left + visualOffsets.x) / scale2.x;
  let y2 = (clientRect.top + visualOffsets.y) / scale2.y;
  let width = clientRect.width / scale2.x;
  let height = clientRect.height / scale2.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = getFrameElement(currentWin);
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x2 *= iframeScale.x;
      y2 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x2 += left;
      y2 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = getFrameElement(currentWin);
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x2,
    y: y2
  });
}
function getWindowScrollBarX(element2, rect) {
  const leftScroll = getNodeScroll(element2).scrollLeft;
  if (!rect) {
    return getBoundingClientRect(getDocumentElement(element2)).left + leftScroll;
  }
  return rect.left + leftScroll;
}
function getHTMLOffset(documentElement, scroll) {
  const htmlRect = documentElement.getBoundingClientRect();
  const x2 = htmlRect.left + scroll.scrollLeft - getWindowScrollBarX(documentElement, htmlRect);
  const y2 = htmlRect.top + scroll.scrollTop;
  return {
    x: x2,
    y: y2
  };
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale2 = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale2 = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  return {
    width: rect.width * scale2.x,
    height: rect.height * scale2.y,
    x: rect.x * scale2.x - scroll.scrollLeft * scale2.x + offsets.x + htmlOffset.x,
    y: rect.y * scale2.y - scroll.scrollTop * scale2.y + offsets.y + htmlOffset.y
  };
}
function getClientRects(element2) {
  return Array.from(element2.getClientRects());
}
function getDocumentRect(element2) {
  const html2 = getDocumentElement(element2);
  const scroll = getNodeScroll(element2);
  const body = element2.ownerDocument.body;
  const width = max(html2.scrollWidth, html2.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html2.scrollHeight, html2.clientHeight, body.scrollHeight, body.clientHeight);
  let x2 = -scroll.scrollLeft + getWindowScrollBarX(element2);
  const y2 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x2 += max(html2.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
var SCROLLBAR_MAX = 25;
function getViewportRect(element2, strategy) {
  const win = getWindow(element2);
  const html2 = getDocumentElement(element2);
  const visualViewport = win.visualViewport;
  let width = html2.clientWidth;
  let height = html2.clientHeight;
  let x2 = 0;
  let y2 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x2 = visualViewport.offsetLeft;
      y2 = visualViewport.offsetTop;
    }
  }
  const windowScrollbarX = getWindowScrollBarX(html2);
  if (windowScrollbarX <= 0) {
    const doc = html2.ownerDocument;
    const body = doc.body;
    const bodyStyles = getComputedStyle(body);
    const bodyMarginInline = doc.compatMode === "CSS1Compat" ? parseFloat(bodyStyles.marginLeft) + parseFloat(bodyStyles.marginRight) || 0 : 0;
    const clippingStableScrollbarWidth = Math.abs(html2.clientWidth - body.clientWidth - bodyMarginInline);
    if (clippingStableScrollbarWidth <= SCROLLBAR_MAX) {
      width -= clippingStableScrollbarWidth;
    }
  } else if (windowScrollbarX <= SCROLLBAR_MAX) {
    width += windowScrollbarX;
  }
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
var absoluteOrFixed = /* @__PURE__ */ new Set(["absolute", "fixed"]);
function getInnerBoundingClientRect(element2, strategy) {
  const clientRect = getBoundingClientRect(element2, true, strategy === "fixed");
  const top = clientRect.top + element2.clientTop;
  const left = clientRect.left + element2.clientLeft;
  const scale2 = isHTMLElement(element2) ? getScale(element2) : createCoords(1);
  const width = element2.clientWidth * scale2.x;
  const height = element2.clientHeight * scale2.y;
  const x2 = left * scale2.x;
  const y2 = top * scale2.y;
  return {
    width,
    height,
    x: x2,
    y: y2
  };
}
function getClientRectFromClippingAncestor(element2, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element2, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element2));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element2);
    rect = {
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y,
      width: clippingAncestor.width,
      height: clippingAncestor.height
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element2, stopNode) {
  const parentNode = getParentNode(element2);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element2, cache) {
  const cachedResult = cache.get(element2);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element2, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element2).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element2) : element2;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element2, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element2, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element: element2,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element2) ? [] : getClippingElementAncestors(element2, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element2, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element2, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element2) {
  const {
    width,
    height
  } = getCssDimensions(element2);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element2, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element2, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  function setLeftRTLScrollbarOffset() {
    offsets.x = getWindowScrollBarX(documentElement);
  }
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      setLeftRTLScrollbarOffset();
    }
  }
  if (isFixed && !isOffsetParentAnElement && documentElement) {
    setLeftRTLScrollbarOffset();
  }
  const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
  const x2 = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
  const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
  return {
    x: x2,
    y: y2,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element2) {
  return getComputedStyle2(element2).position === "static";
}
function getTrueOffsetParent(element2, polyfill) {
  if (!isHTMLElement(element2) || getComputedStyle2(element2).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element2);
  }
  let rawOffsetParent = element2.offsetParent;
  if (getDocumentElement(element2) === rawOffsetParent) {
    rawOffsetParent = rawOffsetParent.ownerDocument.body;
  }
  return rawOffsetParent;
}
function getOffsetParent(element2, polyfill) {
  const win = getWindow(element2);
  if (isTopLayer(element2)) {
    return win;
  }
  if (!isHTMLElement(element2)) {
    let svgOffsetParent = getParentNode(element2);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element2, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element2) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element2) {
  return getComputedStyle2(element2).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function rectsAreEqual(a2, b) {
  return a2.x === b.x && a2.y === b.y && a2.width === b.width && a2.height === b.height;
}
function observeMove(element2, onMove) {
  let io = null;
  let timeoutId;
  const root117 = getDocumentElement(element2);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const elementRectForRootMargin = element2.getBoundingClientRect();
    const {
      left,
      top,
      width,
      height
    } = elementRectForRootMargin;
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root117.clientWidth - (left + width));
    const insetBottom = floor(root117.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element2.getBoundingClientRect())) {
        refresh();
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root117.ownerDocument
      });
    } catch (_e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element2);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update2, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update2, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update2);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update2) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update2();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
      update2();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update2();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update2);
      ancestorResize && ancestor.removeEventListener("resize", update2);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var arrow2 = arrow;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/Arrow.svelte
Arrow[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/Arrow.svelte";
var root4 = add_locations(from_html(`<div></div>`), Arrow[FILENAME], [[47, 0]]);
var $$css = {
  hash: "s-MjQcBD1bZLXo",
  code: "\n  .clip {\n    clip-path: polygon(0 0, 0% 100%, 100% 100%, 100% 85%, 15% 0);\n  }\n\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyb3cuc3ZlbHRlIiwic291cmNlcyI6WyJBcnJvdy5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdCBsYW5nPVwidHNcIj5cbiAgaW1wb3J0IHR5cGUgeyBTaWRlIH0gZnJvbSBcIkBmbG9hdGluZy11aS9kb21cIjtcbiAgaW1wb3J0IHsgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQsIGdldFNpZGUgfSBmcm9tIFwiQGZsb2F0aW5nLXVpL3V0aWxzXCI7XG4gIGltcG9ydCB0eXBlIHsgQXJyb3dQcm9wcyB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG4gIGxldCB7IHBsYWNlbWVudCA9IFwidG9wXCIsIGNvcmRzLCBzdHJhdGVneSA9IFwiYWJzb2x1dGVcIiwgY2xhc3M6IGNsYXNzTmFtZSA9IFwiXCIgfTogQXJyb3dQcm9wcyA9ICRwcm9wcygpO1xuXG4gIGNvbnN0IHB4ID0gKG46IG51bWJlciB8IHVuZGVmaW5lZCkgPT4gKG4gPyBgJHtufXB4YCA6IFwiXCIpO1xuXG4gIC8vIGNhbG1pbmcgZG93biB0aGUgd2FybmluZ3NcbiAgZ2V0U2lkZTtcbiAgZ2V0T3Bwb3NpdGVQbGFjZW1lbnQ7XG5cbiAgZnVuY3Rpb24gZ2V0Qm9yZGVyV2lkdGgoZWxlbWVudDogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBjb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWxlbWVudCk7XG4gICAgcmV0dXJuIE1hdGgubWF4KHBhcnNlRmxvYXQoY29tcHV0ZWRTdHlsZS5ib3JkZXJMZWZ0V2lkdGgpLCBwYXJzZUZsb2F0KGNvbXB1dGVkU3R5bGUuYm9yZGVyQm90dG9tV2lkdGgpKSAtIDAuMztcbiAgfVxuXG4gIGNvbnN0IHJvdGF0aW9uTWFwOiBSZWNvcmQ8U2lkZSwgc3RyaW5nPiA9IHtcbiAgICBsZWZ0OiBcIiByb3RhdGUtNDVcIixcbiAgICByaWdodDogXCIgLXJvdGF0ZS0xMzVcIixcbiAgICB0b3A6IFwiIHJvdGF0ZS0xMzVcIixcbiAgICBib3R0b206IFwiIC1yb3RhdGUtNDVcIlxuICB9O1xuXG4gIGZ1bmN0aW9uIHBvc2l0aW9uaW5nKG5vZGU6IEhUTUxFbGVtZW50KSB7XG4gICAgJGVmZmVjdCgoKSA9PiB7XG4gICAgICBub2RlLnN0eWxlLnBvc2l0aW9uID0gc3RyYXRlZ3k7XG4gICAgICBub2RlLnN0eWxlLmxlZnQgPSBweChjb3Jkcy54KTtcbiAgICAgIG5vZGUuc3R5bGUudG9wID0gcHgoY29yZHMueSk7XG4gICAgICBub2RlLnN0eWxlLnJpZ2h0ID0gXCJcIjtcbiAgICAgIG5vZGUuc3R5bGUuYm90dG9tID0gXCJcIjtcblxuICAgICAgbGV0IGFycm93U2lkZSA9IGdldFNpZGUoZ2V0T3Bwb3NpdGVQbGFjZW1lbnQocGxhY2VtZW50KSk7XG4gICAgICAvLyBub2RlLnN0eWxlW2Fycm93U2lkZV0gPSBweCgtbm9kZS5vZmZzZXRXaWR0aCAvIDIgLSAoYm9yZGVyID8gMSA6IDApICsgMSk7XG4gICAgICBub2RlLnN0eWxlW2Fycm93U2lkZV0gPSBweCgtbm9kZS5vZmZzZXRXaWR0aCAvIDIgLSBnZXRCb3JkZXJXaWR0aChub2RlKSk7XG5cbiAgICAgIC8vIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShcImJvcmRlci10XCIsIFwiYm9yZGVyLWJcIiwgXCJib3JkZXItc1wiLCBcImJvcmRlci1lXCIpO1xuICAgICAgLy8gYm9yZGVyICYmIChub2RlLmNsYXNzTmFtZSArPSBhcnJvd0JvcmRlcnNNYXBbYXJyb3dTaWRlXSk7XG5cbiAgICAgIG5vZGUuY2xhc3NMaXN0LnJlbW92ZShcInJvdGF0ZS00NVwiLCBcIi1yb3RhdGUtNDVcIiwgXCJyb3RhdGUtMTM1XCIsIFwiLXJvdGF0ZS0xMzVcIik7XG4gICAgICBub2RlLmNsYXNzTmFtZSArPSByb3RhdGlvbk1hcFthcnJvd1NpZGVdO1xuICAgIH0pO1xuICB9XG48L3NjcmlwdD5cblxuPGRpdiB1c2U6cG9zaXRpb25pbmcgY2xhc3M9XCJwb3BvdmVyLWFycm93IGNsaXAgcG9pbnRlci1ldmVudHMtbm9uZSBibG9jayBoLVsxMHB4XSB3LVsxMHB4XSBib3JkZXItYiBib3JkZXItbCBib3JkZXItaW5oZXJpdCBiZy1pbmhlcml0IHRleHQtaW5oZXJpdCB7Y2xhc3NOYW1lfVwiPjwvZGl2PlxuXG48IS0tXG5AY29tcG9uZW50XG5bR28gdG8gZG9jc10oaHR0cHM6Ly9mbG93Yml0ZS1zdmVsdGUuY29tLylcbiMjIFR5cGVcbltBcnJvd1Byb3BzXShodHRwczovL2dpdGh1Yi5jb20vdGhlbWVzYmVyZy9mbG93Yml0ZS1zdmVsdGUvYmxvYi9tYWluL3NyYy9saWIvdHlwZXMudHMjTDIwNDQpXG4jIyBQcm9wc1xuQHByb3AgcGxhY2VtZW50ID0gXCJ0b3BcIlxuQHByb3AgY29yZHNcbkBwcm9wIHN0cmF0ZWd5ID0gXCJhYnNvbHV0ZVwiXG5AcHJvcCBjbGFzczogY2xhc3NOYW1lID0gXCJcIlxuLS0+XG5cbjxzdHlsZT5cbiAgOmdsb2JhbCguY2xpcCkge1xuICAgIGNsaXAtcGF0aDogcG9seWdvbigwIDAsIDAlIDEwMCUsIDEwMCUgMTAwJSwgMTAwJSA4NSUsIDE1JSAwKTtcbiAgfVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwiaWdub3JlTGlzdCI6W119 */"
};
function Arrow($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Arrow);
  append_styles($$anchor, $$css);
  let placement = prop($$props, "placement", 3, "top"), strategy = prop($$props, "strategy", 3, "absolute"), className = prop($$props, "class", 3, "");
  const px = (n2) => n2 ? `${n2}px` : "";
  getSide;
  getOppositePlacement;
  function getBorderWidth(element2) {
    const computedStyle = window.getComputedStyle(element2);
    return Math.max(parseFloat(computedStyle.borderLeftWidth), parseFloat(computedStyle.borderBottomWidth)) - 0.3;
  }
  const rotationMap = {
    left: " rotate-45",
    right: " -rotate-135",
    top: " rotate-135",
    bottom: " -rotate-45"
  };
  function positioning(node) {
    user_effect(() => {
      node.style.position = strategy();
      node.style.left = px($$props.cords.x);
      node.style.top = px($$props.cords.y);
      node.style.right = "";
      node.style.bottom = "";
      let arrowSide = getSide(getOppositePlacement(placement()));
      node.style[arrowSide] = px(-node.offsetWidth / 2 - getBorderWidth(node));
      node.classList.remove("rotate-45", "-rotate-45", "rotate-135", "-rotate-135");
      node.className += rotationMap[arrowSide];
    });
  }
  var $$exports = { ...legacy_api() };
  var div = root4();
  action(div, ($$node) => positioning?.($$node));
  template_effect(() => set_class(div, 1, `popover-arrow clip pointer-events-none block h-[10px] w-[10px] border-b border-l border-inherit bg-inherit text-inherit ${className() ?? ""}`));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Arrow = hmr(Arrow, () => Arrow[HMR].source);
  import.meta.hot.accept((module) => {
    cleanup_styles("s-MjQcBD1bZLXo");
    module.default[HMR].source = Arrow[HMR].source;
    set(Arrow[HMR].source, module.default[HMR].original);
  });
}
var Arrow_default = Arrow;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/Popper.svelte
Popper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/Popper.svelte";
var root_16 = add_locations(from_html(`<div><!> <!></div>`), Popper[FILENAME], [[204, 2]]);
var root5 = add_locations(from_html(`<div hidden=""></div> <!>`, 1), Popper[FILENAME], [[201, 0]]);
function Popper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Popper);
  let triggerDelay = prop($$props, "triggerDelay", 3, 200), trigger = prop($$props, "trigger", 3, "click"), placement = prop($$props, "placement", 3, "top"), offset3 = prop($$props, "offset", 3, 8), arrow3 = prop($$props, "arrow", 3, false), yOnly = prop($$props, "yOnly", 3, false), strategy = prop($$props, "strategy", 3, "absolute"), middlewares = prop($$props, "middlewares", 19, () => [flip2(), shift2()]), className = prop($$props, "class", 3, ""), arrowClass = prop($$props, "arrowClass", 3, ""), isOpen = prop($$props, "isOpen", 15, false), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "triggeredBy",
      "triggerDelay",
      "trigger",
      "placement",
      "offset",
      "arrow",
      "yOnly",
      "strategy",
      "reference",
      "middlewares",
      "onbeforetoggle",
      "ontoggle",
      "class",
      "arrowClass",
      "isOpen",
      "transitionParams",
      "transition",
      "children"
    ],
    "restProps"
  );
  let focusable = true;
  let clickable = tag(user_derived(() => strict_equals(trigger(), "click")), "clickable");
  let hoverable = tag(user_derived(() => strict_equals(trigger(), "hover")), "hoverable");
  let popover2 = tag(state(null), "popover");
  let invoker = null;
  let referenceElement = null;
  let triggerEls = [];
  let arrowParams = tag(
    state(proxy({
      placement: placement(),
      cords: { x: 0, y: 0 },
      strategy: strategy()
    })),
    "arrowParams"
  );
  const paramsDefault = { duration: 100, easing: sineIn };
  const paramsOptions = tag(user_derived(() => $$props.transitionParams ?? paramsDefault), "paramsOptions");
  const px = (n2) => n2 ? `${n2}px` : "";
  function updatePopoverPosition() {
    if (!invoker || !get(popover2)) {
      return;
    }
    const arrowEl = get(popover2).querySelector(".popover-arrow");
    let middleware = [...middlewares(), offset2(offset3())];
    if (arrowEl) middleware.push(arrow2({ element: arrowEl }));
    return computePosition2(referenceElement ?? invoker, get(popover2), { placement: placement(), middleware, strategy: strategy() }).then(({ x: x2, y: y2, middlewareData: { arrow: arrow4 }, placement: pl, strategy: strategy2 }) => {
      if (get(popover2)) {
        Object.assign(get(popover2).style, { position: strategy2, left: yOnly() ? "0" : px(x2), top: px(y2) });
        if (arrow4 && arrowEl) {
          set(arrowParams, { placement: pl, cords: { x: arrow4.x, y: arrow4.y }, strategy: strategy2 }, true);
        }
      }
    });
  }
  let isTriggered = false;
  async function open_popover(ev) {
    isTriggered = true;
    (await track_reactivity_loss(new Promise((resolve) => setTimeout(resolve, triggerDelay()))))();
    if (!isTriggered) {
      return;
    }
    ev.preventDefault();
    if (strict_equals(ev.target, invoker, false) && triggerEls.includes(ev.target)) {
      invoker = ev.target;
      isOpen(false);
      (await track_reactivity_loss(new Promise((resolve) => setTimeout(resolve, triggerDelay()))))();
    }
    if (strict_equals(ev.type, "mousedown")) {
      isOpen(!isOpen());
    } else {
      isOpen(true);
    }
  }
  async function close_popover(ev) {
    if (strict_equals(trigger(), "click") && strict_equals(ev.type, "focusout")) {
      const relatedTarget = ev.relatedTarget;
      if (get(popover2) && relatedTarget && get(popover2).contains(relatedTarget)) {
        return;
      }
      if (!relatedTarget) {
        return;
      }
    }
    isTriggered = false;
    (await track_reactivity_loss(new Promise((resolve) => setTimeout(resolve, triggerDelay()))))();
    if (isTriggered) {
      return;
    }
    if (strict_equals(ev?.type, "mouseleave") && get(popover2)?.contains(get(popover2).ownerDocument.activeElement)) {
      return;
    }
    if (strict_equals(ev?.type, "focusout") && get(popover2)?.contains(get(popover2).ownerDocument.activeElement)) {
      return;
    }
    isOpen(false);
  }
  let autoUpdateDestroy = () => {
  };
  function on_before_toggle(ev) {
    if (!invoker || !get(popover2)) return;
    ev.trigger = invoker;
    $$props.onbeforetoggle?.(ev);
    if (strict_equals(ev.newState, "open")) {
      autoUpdateDestroy = autoUpdate(referenceElement ?? invoker, get(popover2), updatePopoverPosition);
      get(popover2).ownerDocument.addEventListener("click", closeOnClickOutside);
      get(popover2).ownerDocument.addEventListener("keydown", closeOnEscape);
    } else {
      autoUpdateDestroy();
      get(popover2).ownerDocument.removeEventListener("click", closeOnClickOutside);
      get(popover2).ownerDocument.removeEventListener("keydown", closeOnEscape);
    }
  }
  function on_toggle(ev) {
    if (!invoker) return;
    isOpen(strict_equals(ev.newState, "open"));
    ev.trigger = invoker;
    $$props.ontoggle?.(ev);
  }
  function set_triggers(node) {
    const events = [
      ["focusin", open_popover, focusable],
      ["focusout", close_popover, focusable],
      ["mousedown", open_popover, get(clickable)],
      ["mouseenter", open_popover, get(hoverable)],
      ["mouseleave", close_popover, get(hoverable)]
    ];
    if ($$props.triggeredBy) triggerEls = [...node.ownerDocument.querySelectorAll($$props.triggeredBy)];
    else if (node.previousElementSibling) triggerEls = [node.previousElementSibling];
    else if (node.parentElement) triggerEls = [node.parentElement];
    if (!triggerEls.length) {
      console.error(...log_if_contains_state("error", "No triggers found.", $$props.triggeredBy));
      return;
    }
    if ($$props.reference) referenceElement = node.ownerDocument.querySelector($$props.reference);
    invoker = triggerEls[0];
    triggerEls.forEach((element2) => {
      if (element2.tabIndex < 0) element2.tabIndex = 0;
      for (const [name, handler, cond] of events) if (cond) element2.addEventListener(name, handler);
    });
    user_effect(() => {
      return () => {
        triggerEls.forEach((element2) => {
          for (const [name, handler, cond] of events) if (cond) element2.removeEventListener(name, handler);
        });
      };
    });
  }
  function closeOnEscape(event2) {
    if (strict_equals(event2.key, "Escape")) {
      isOpen(false);
    }
  }
  function closeOnClickOutside(event2) {
    if (!get(popover2)) {
      return;
    }
    const clickPath = event2.composedPath();
    const isClickInsidePopover = clickPath.includes(get(popover2));
    const isClickOnTrigger = triggerEls.some((el) => clickPath.includes(el));
    if (!isClickInsidePopover && !isClickOnTrigger) {
      close_popover(event2);
      isOpen(false);
    }
  }
  var $$exports = { ...legacy_api() };
  var fragment = root5();
  var div = first_child(fragment);
  action(div, ($$node) => set_triggers?.($$node));
  var node_1 = sibling(div, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_1 = root_16();
      var event_handler = () => get(popover2)?.showPopover();
      var event_handler_1 = () => get(popover2)?.hidePopover();
      attribute_effect(
        div_1,
        ($0) => ({
          popover: "manual",
          role: "tooltip",
          onfocusout: close_popover,
          onmouseleave: get(hoverable) ? close_popover : void 0,
          onmouseenter: get(hoverable) ? open_popover : void 0,
          onbeforetoggle: on_before_toggle,
          ontoggle: on_toggle,
          class: $0,
          onintrostart: event_handler,
          onoutroend: event_handler_1,
          ...restProps,
          [CLASS]: { "overflow-visible": true }
        }),
        [() => clsx_default(className())]
      );
      var node_2 = child(div_1);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", Popper, 205, 4);
      var node_3 = sibling(node_2, 2);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          add_svelte_meta(
            () => Arrow_default(node_4, spread_props(() => get(arrowParams), {
              get class() {
                return arrowClass();
              }
            })),
            "component",
            Popper,
            207,
            6,
            { componentTag: "Arrow" }
          );
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (arrow3()) $$render(consequent);
          }),
          "if",
          Popper,
          206,
          4
        );
      }
      reset(div_1);
      bind_this(div_1, ($$value) => set(popover2, $$value), () => get(popover2));
      transition(3, div_1, transition2, () => get(paramsOptions));
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (isOpen()) $$render(consequent_1);
      }),
      "if",
      Popper,
      203,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Popper = hmr(Popper, () => Popper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popper[HMR].source;
    set(Popper[HMR].source, module.default[HMR].original);
  });
}
var Popper_default = Popper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/responsive.svelte
Responsive[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/responsive.svelte";
function useMediaQuery(query) {
  let matches = tag(state(false), "matches");
  user_effect(() => {
    if (strict_equals(typeof window, "undefined")) return;
    const mediaQuery = window.matchMedia(query);
    set(matches, mediaQuery.matches, true);
    const handler = (e) => {
      set(matches, e.matches, true);
    };
    mediaQuery.addEventListener("change", handler);
    return () => {
      mediaQuery.removeEventListener("change", handler);
    };
  });
  return () => get(matches);
}
function useBreakpoints() {
  const sm = useMediaQuery("(min-width: 640px)");
  const md = useMediaQuery("(min-width: 768px)");
  const lg = useMediaQuery("(min-width: 1024px)");
  const xl = useMediaQuery("(min-width: 1280px)");
  const xxl = useMediaQuery("(min-width: 1536px)");
  return {
    get sm() {
      return sm();
    },
    get md() {
      return md();
    },
    get lg() {
      return lg();
    },
    get xl() {
      return xl();
    },
    get "2xl"() {
      return xxl();
    },
    get isMobile() {
      return !sm();
    },
    get isTablet() {
      return sm() && !lg();
    },
    get isDesktop() {
      return lg();
    }
  };
}
function useCurrentBreakpoint() {
  let currentBreakpoint = tag(state("xs"), "currentBreakpoint");
  user_effect(() => {
    if (strict_equals(typeof window, "undefined")) return;
    const updateBreakpoint = () => {
      const width = window.innerWidth;
      if (width >= 1536) set(currentBreakpoint, "2xl");
      else if (width >= 1280) set(currentBreakpoint, "xl");
      else if (width >= 1024) set(currentBreakpoint, "lg");
      else if (width >= 768) set(currentBreakpoint, "md");
      else if (width >= 640) set(currentBreakpoint, "sm");
      else set(currentBreakpoint, "xs");
    };
    updateBreakpoint();
    window.addEventListener("resize", updateBreakpoint);
    return () => {
      window.removeEventListener("resize", updateBreakpoint);
    };
  });
  return () => get(currentBreakpoint);
}
var BREAKPOINTS = { xs: 0, sm: 640, md: 768, lg: 1024, xl: 1280, "2xl": 1536 };
function Responsive($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Responsive);
  var $$exports = { ...legacy_api() };
  return pop($$exports);
}
if (import.meta.hot) {
  Responsive = hmr(Responsive, () => Responsive[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Responsive[HMR].source;
    set(Responsive[HMR].source, module.default[HMR].original);
  });
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/utils/index.js
function cn(...inputs) {
  return twMerge(clsx(inputs));
}
var n = Date.now();
function idGenerator() {
  return (++n).toString(36);
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/theme.js
var bottomNav = T({
  slots: {
    base: "w-full z-30 border-gray-200 dark:bg-gray-700 dark:border-gray-600",
    inner: "grid h-full max-w-lg mx-auto"
  },
  variants: {
    position: {
      static: { base: "static" },
      fixed: { base: "fixed" },
      absolute: { base: "absolute" },
      relative: { base: "relative" },
      sticky: { base: "sticky" }
    },
    navType: {
      default: { base: "bottom-0 start-0 h-16 bg-white border-t" },
      border: { base: "bottom-0 start-0 h-16 bg-white border-t" },
      application: {
        base: "h-16 max-w-lg -translate-x-1/2 rtl:translate-x-1/2 bg-white border rounded-full bottom-4 start-1/2"
      },
      pagination: {
        base: "bottom-0 h-16 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2"
      },
      group: {
        base: "bottom-0 -translate-x-1/2 rtl:translate-x-1/2 bg-white border-t start-1/2"
      },
      card: { base: "bottom-0 start-0 h-16 bg-white border-t" },
      meeting: {
        base: "bottom-0 start-0 grid h-16 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
        inner: "flex items-center justify-center mx-auto"
      },
      video: {
        base: "bottom-0 start-0 grid h-24 grid-cols-1 px-8 bg-white border-t md:grid-cols-3",
        inner: "flex items-center w-full"
      }
    }
  },
  defaultVariants: {
    position: "fixed",
    navType: "default"
  }
});
var bottomNavItem = T({
  slots: {
    base: "inline-flex flex-col items-center justify-center",
    span: "text-sm"
  },
  variants: {
    navType: {
      default: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      border: {
        base: "px-5 border-gray-200 border-x hover:bg-gray-50 dark:hover:bg-gray-800 group dark:border-gray-600",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      application: {
        base: "",
        span: "sr-only"
      },
      pagination: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "sr-only"
      },
      group: {
        base: "p-4 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "sr-only"
      },
      card: {
        base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group",
        span: "text-gray-500 dark:text-gray-400 group-hover:text-primary-600 dark:group-hover:text-primary-500"
      },
      meeting: {
        base: "",
        span: ""
      },
      video: {
        base: "",
        span: ""
      }
    },
    appBtnPosition: {
      left: {
        base: "px-5 rounded-s-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
      },
      middle: { base: "px-5 hover:bg-gray-50 dark:hover:bg-gray-800 group" },
      right: {
        base: "px-5 rounded-e-full hover:bg-gray-50 dark:hover:bg-gray-800 group"
      }
    }
  },
  defaultVariants: {
    navType: "default",
    appBtnPosition: "middle",
    active: false
  }
});
var bottomNavHeader = T({
  slots: {
    base: "w-full",
    innerDiv: "grid max-w-xs grid-cols-3 gap-1 p-1 mx-auto my-2 bg-gray-100 rounded-lg dark:bg-gray-600"
  }
});
var bottomNavHeaderItem = T({
  base: "px-5 py-1.5 text-xs font-medium rounded-lg",
  variants: {
    active: {
      true: "text-white bg-gray-900 dark:bg-gray-300 dark:text-gray-900",
      false: "text-gray-900 hover:bg-gray-200 dark:text-white dark:hover:bg-gray-700"
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte
BottomNav[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNav.svelte";
var root6 = add_locations(from_html(`<div><!> <div><!></div></div>`), BottomNav[FILENAME], [[31, 0, [[36, 2]]]]);
function BottomNav($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNav);
  let position = prop($$props, "position", 3, "fixed"), navType = prop($$props, "navType", 3, "default"), activeUrl = prop($$props, "activeUrl", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "position",
      "navType",
      "class",
      "classes",
      "outerClass",
      "innerClass",
      "activeClass",
      "activeUrl"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "BottomNav",
    {
      innerClass: $$props.innerClass,
      outerClass: $$props.outerClass
    },
    { innerClass: "inner", outerClass: "class" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { inner: $$props.innerClass }), "styling");
  const theme = getTheme("bottomNav");
  const activeCls = cn("text-primary-700 dark:text-primary-700 hover:text-primary-900 dark:hover:text-primary-900", $$props.activeClass);
  let context = tag_proxy(
    proxy({
      activeClass: activeCls,
      activeUrl: activeUrl(),
      navType: navType()
    }),
    "context"
  );
  setContext("bottomNavType", context);
  const $$d = tag(user_derived(() => bottomNav({ position: position(), navType: navType() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), inner = tag(user_derived(() => get($$d).inner), "inner");
  user_effect(() => {
    context.activeUrl = activeUrl();
    context.navType = navType();
    context.activeClass = activeCls;
  });
  var $$exports = { ...legacy_api() };
  var div = root6();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({
      class: clsx_default(theme?.base, $$props.class ?? $$props.outerClass)
    })
  ]);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.header), "render", BottomNav, 33, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.header) $$render(consequent);
      }),
      "if",
      BottomNav,
      32,
      2
    );
  }
  var div_1 = sibling(node, 2);
  var node_2 = child(div_1);
  add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", BottomNav, 37, 4);
  reset(div_1);
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(get(inner)({ class: clsx_default(theme?.inner, get(styling).inner) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNav = hmr(BottomNav, () => BottomNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNav[HMR].source;
    set(BottomNav[HMR].source, module.default[HMR].original);
  });
}
var BottomNav_default = BottomNav;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte
BottomNavItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavItem.svelte";
var root_17 = add_locations(from_html(`<button><!> <span> </span></button>`), BottomNavItem[FILENAME], [[55, 2, [[57, 4]]]]);
var root_25 = add_locations(from_html(`<a><!> <span> </span></a>`), BottomNavItem[FILENAME], [[60, 2, [[62, 4]]]]);
function BottomNavItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavItem);
  let appBtnPosition = prop($$props, "appBtnPosition", 3, "middle"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "btnName",
      "appBtnPosition",
      "activeClass",
      "class",
      "classes",
      "btnClass",
      "spanClass",
      "active"
    ],
    "restProps"
  );
  warnThemeDeprecation("BottomNavItem", { spanClass: $$props.spanClass, btnClass: $$props.btnClass }, { spanClass: "span", btnClass: "class" });
  const styling = tag(user_derived(() => $$props.classes ?? { span: $$props.spanClass }), "styling");
  const theme = getTheme("bottomNavItem");
  const context = getContext("bottomNavType") ?? {};
  let navUrl = tag(user_derived(() => context.activeUrl || ""), "navUrl");
  const $$d = tag(user_derived(() => bottomNavItem({ navType: context.navType, appBtnPosition: appBtnPosition() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), span2 = tag(user_derived(() => get($$d).span), "span");
  let isActive = tag(
    user_derived(() => {
      const href = $$props.href ?? "";
      return strict_equals($$props.active, void 0, false) ? !!$$props.active : get(navUrl) ? strict_equals(href, "/") ? strict_equals(get(navUrl), "/") : href && (strict_equals(get(navUrl), href) || get(navUrl).startsWith(href + "/") || strict_equals(href, "/", false) && get(navUrl).replace(/^https?:\/\/[^/]+/, "").startsWith(href)) : false;
    }),
    "isActive"
  );
  function getCommonClass() {
    return get(base)({
      class: clsx_default(get(isActive) && ($$props.activeClass ?? context.activeClass), theme?.base, $$props.class ?? $$props.btnClass)
    });
  }
  function getSpanClass() {
    return get(span2)({
      class: clsx_default(get(isActive) && ($$props.activeClass ?? context.activeClass), theme?.span, get(styling).span)
    });
  }
  const commonProps = tag(
    user_derived(() => ({
      "aria-label": $$props.btnName,
      class: getCommonClass(),
      ...restProps
    })),
    "commonProps"
  );
  const anchorProps = tag(user_derived(() => ({ ...get(commonProps) })), "anchorProps");
  const buttonProps = tag(user_derived(() => ({ ...get(commonProps), type: "button" })), "buttonProps");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var button2 = root_17();
      attribute_effect(button2, () => ({ ...get(buttonProps) }));
      var node_1 = child(button2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", BottomNavItem, 56, 4);
      var span_1 = sibling(node_1, 2);
      var text2 = child(span_1, true);
      reset(span_1);
      reset(button2);
      template_effect(
        ($0) => {
          set_class(span_1, 1, $0);
          set_text(text2, $$props.btnName);
        },
        [() => clsx2(getSpanClass())]
      );
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a2 = root_25();
      attribute_effect(a2, () => ({ ...get(anchorProps) }));
      var node_2 = child(a2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", BottomNavItem, 61, 4);
      var span_2 = sibling(node_2, 2);
      var text_1 = child(span_2, true);
      reset(span_2);
      reset(a2);
      template_effect(
        ($0) => {
          set_class(span_2, 1, $0);
          set_text(text_1, $$props.btnName);
        },
        [() => clsx2(getSpanClass())]
      );
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      BottomNavItem,
      54,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavItem = hmr(BottomNavItem, () => BottomNavItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavItem[HMR].source;
    set(BottomNavItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavItem_default = BottomNavItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte
BottomNavHeaderItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeaderItem.svelte";
var root7 = add_locations(from_html(`<button> </button>`), BottomNavHeaderItem[FILENAME], [[15, 0]]);
function BottomNavHeaderItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavHeaderItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "itemName",
      "active",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("bottomNavHeaderItem");
  let base = tag(user_derived(() => bottomNavHeaderItem({ active: $$props.active, class: clsx_default(theme, $$props.class) })), "base");
  var $$exports = { ...legacy_api() };
  var button2 = root7();
  attribute_effect(button2, () => ({ ...restProps, class: get(base) }));
  var text2 = child(button2, true);
  reset(button2);
  template_effect(() => set_text(text2, $$props.itemName));
  append($$anchor, button2);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavHeaderItem = hmr(BottomNavHeaderItem, () => BottomNavHeaderItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeaderItem[HMR].source;
    set(BottomNavHeaderItem[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeaderItem_default = BottomNavHeaderItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte
BottomNavHeader[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/bottom-navigation/BottomNavHeader.svelte";
var root8 = add_locations(from_html(`<div><div role="group"><!></div></div>`), BottomNavHeader[FILENAME], [[19, 0, [[20, 2]]]]);
function BottomNavHeader($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BottomNavHeader);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "outerClass",
      "innerClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "BottomNavHeader",
    {
      innerClass: $$props.innerClass,
      outerClass: $$props.outerClass
    },
    { innerClass: "inner", outerClass: "class" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { innerDiv: $$props.innerClass }), "styling");
  const theme = getTheme("bottomNavHeader");
  const $$d = tag(user_derived(bottomNavHeader), "[$derived object]"), innerDiv = tag(user_derived(() => get($$d).innerDiv), "innerDiv"), base = tag(user_derived(() => get($$d).base), "base");
  var $$exports = { ...legacy_api() };
  var div = root8();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({
      class: clsx_default(theme?.base, $$props.class ?? $$props.outerClass)
    })
  ]);
  var div_1 = child(div);
  var node = child(div_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", BottomNavHeader, 21, 4);
  reset(div_1);
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(get(innerDiv)({ class: clsx_default(theme?.innerDiv, get(styling).innerDiv) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  BottomNavHeader = hmr(BottomNavHeader, () => BottomNavHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BottomNavHeader[HMR].source;
    set(BottomNavHeader[HMR].source, module.default[HMR].original);
  });
}
var BottomNavHeader_default = BottomNavHeader;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/breadcrumb/theme.js
var breadcrumb = T({
  slots: {
    base: "flex",
    list: "inline-flex items-center space-x-1 rtl:space-x-reverse md:space-x-3 rtl:space-x-reverse"
  },
  variants: {
    solid: {
      true: {
        base: "px-5 py-3 text-gray-700 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-800 dark:border-gray-700"
      },
      false: ""
    }
  },
  defaultVariants: {
    solid: false
  }
});
var breadcrumbItem = T({
  slots: {
    base: "inline-flex items-center",
    separator: "h-6 w-6 text-gray-400 rtl:-scale-x-100"
  },
  variants: {
    home: {
      true: "",
      false: ""
    },
    hasHref: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      home: true,
      class: {
        base: "inline-flex items-center text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white",
        separator: "me-2 h-4 w-4"
      }
    },
    {
      home: false,
      hasHref: true,
      class: {
        base: "ms-1 text-sm font-medium text-gray-700 hover:text-gray-900 md:ms-2 dark:text-gray-400 dark:hover:text-white"
      }
    },
    {
      home: false,
      hasHref: false,
      class: {
        base: "ms-1 text-sm font-medium text-gray-500 md:ms-2 dark:text-gray-400"
      }
    }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte
Breadcrumb[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/breadcrumb/Breadcrumb.svelte";
var root9 = add_locations(from_html(`<nav><ol><!></ol></nav>`), Breadcrumb[FILENAME], [[19, 0, [[20, 2]]]]);
function Breadcrumb($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Breadcrumb);
  let solid = prop($$props, "solid", 3, false), ariaLabel = prop($$props, "ariaLabel", 3, "Breadcrumb"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "solid",
      "class",
      "classes",
      "olClass",
      "ariaLabel"
    ],
    "restProps"
  );
  warnThemeDeprecation("Breadcrumb", { olClass: $$props.olClass }, { olClass: "list" });
  const styling = tag(user_derived(() => $$props.classes ?? { list: $$props.olClass }), "styling");
  const theme = getTheme("breadcrumb");
  const { base, list: list2 } = breadcrumb({ solid: solid() });
  let classNav = tag(user_derived(() => base({ class: clsx_default(theme?.base, $$props.class) })), "classNav");
  let classList = tag(user_derived(() => list2({ class: clsx_default(theme?.list, get(styling).list) })), "classList");
  var $$exports = { ...legacy_api() };
  var nav = root9();
  attribute_effect(nav, () => ({
    "aria-label": ariaLabel(),
    ...restProps,
    class: get(classNav)
  }));
  var ol = child(nav);
  var node = child(ol);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Breadcrumb, 21, 4);
  reset(ol);
  reset(nav);
  template_effect(() => set_class(ol, 1, clsx2(get(classList))));
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Breadcrumb = hmr(Breadcrumb, () => Breadcrumb[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Breadcrumb[HMR].source;
    set(Breadcrumb[HMR].source, module.default[HMR].original);
  });
}
var Breadcrumb_default = Breadcrumb;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte
BreadcrumbItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/breadcrumb/BreadcrumbItem.svelte";
var root_34 = add_locations(from_svg(`<svg class="me-2 h-4 w-4" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z"></path></svg>`), BreadcrumbItem[FILENAME], [[27, 8, [[28, 10]]]]);
var root_18 = add_locations(from_html(`<a><!> <!></a>`), BreadcrumbItem[FILENAME], [[23, 4]]);
var root_64 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path></svg>`), BreadcrumbItem[FILENAME], [[38, 6, [[39, 8]]]]);
var root_7 = add_locations(from_html(`<a><!></a>`), BreadcrumbItem[FILENAME], [[44, 6]]);
var root_82 = add_locations(from_html(`<span><!></span>`), BreadcrumbItem[FILENAME], [[48, 6]]);
var root_42 = add_locations(from_html(`<!> <!>`, 1), BreadcrumbItem[FILENAME], []);
var root10 = add_locations(from_html(`<li><!></li>`), BreadcrumbItem[FILENAME], [[21, 0]]);
function BreadcrumbItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BreadcrumbItem);
  let home = prop($$props, "home", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "home",
      "href",
      "linkClass",
      "spanClass",
      "homeClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  const styling = tag(user_derived(() => $$props.classes ?? {}), "styling");
  const theme = getTheme("breadcrumbItem");
  const $$d = tag(user_derived(() => breadcrumbItem({ home: home(), hasHref: !!$$props.href })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), separator = tag(user_derived(() => get($$d).separator), "separator");
  var $$exports = { ...legacy_api() };
  var li = root10();
  attribute_effect(li, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(li);
  {
    var consequent_1 = ($$anchor2) => {
      var a2 = root_18();
      var node_1 = child(a2);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          add_svelte_meta(() => snippet(node_2, () => $$props.icon), "render", BreadcrumbItem, 25, 8);
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var svg = root_34();
          append($$anchor3, svg);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.icon) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          BreadcrumbItem,
          24,
          6
        );
      }
      var node_3 = sibling(node_1, 2);
      add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", BreadcrumbItem, 32, 6);
      reset(a2);
      template_effect(
        ($0) => {
          set_class(a2, 1, $0);
          set_attribute(a2, "href", $$props.href);
        },
        [
          () => clsx2(get(base)({ home: true, class: clsx_default(theme?.base, $$props.homeClass) }))
        ]
      );
      append($$anchor2, a2);
    };
    var alternate_3 = ($$anchor2) => {
      var fragment_1 = root_42();
      var node_4 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_5, () => $$props.icon), "render", BreadcrumbItem, 36, 6);
          append($$anchor3, fragment_2);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_1 = root_64();
          template_effect(($0) => set_class(svg_1, 0, $0), [
            () => clsx2(get(separator)({ class: clsx_default(theme?.separator, get(styling).separator) }))
          ]);
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if ($$props.icon) $$render(consequent_2);
            else $$render(alternate_1, false);
          }),
          "if",
          BreadcrumbItem,
          35,
          4
        );
      }
      var node_6 = sibling(node_4, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a_1 = root_7();
          var node_7 = child(a_1);
          add_svelte_meta(() => snippet(node_7, () => $$props.children), "render", BreadcrumbItem, 45, 8);
          reset(a_1);
          template_effect(
            ($0) => {
              set_class(a_1, 1, $0);
              set_attribute(a_1, "href", $$props.href);
            },
            [
              () => clsx2(get(base)({
                home: false,
                hasHref: true,
                class: clsx_default(theme?.base, $$props.linkClass)
              }))
            ]
          );
          append($$anchor3, a_1);
        };
        var alternate_2 = ($$anchor3) => {
          var span2 = root_82();
          var node_8 = child(span2);
          add_svelte_meta(() => snippet(node_8, () => $$props.children), "render", BreadcrumbItem, 49, 8);
          reset(span2);
          template_effect(($0) => set_class(span2, 1, $0), [
            () => clsx2(get(base)({
              home: false,
              hasHref: false,
              class: clsx_default(theme?.base, $$props.spanClass)
            }))
          ]);
          append($$anchor3, span2);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if ($$props.href) $$render(consequent_3);
            else $$render(alternate_2, false);
          }),
          "if",
          BreadcrumbItem,
          43,
          4
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (home()) $$render(consequent_1);
        else $$render(alternate_3, false);
      }),
      "if",
      BreadcrumbItem,
      22,
      2
    );
  }
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  BreadcrumbItem = hmr(BreadcrumbItem, () => BreadcrumbItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BreadcrumbItem[HMR].source;
    set(BreadcrumbItem[HMR].source, module.default[HMR].original);
  });
}
var BreadcrumbItem_default = BreadcrumbItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/button-group/theme.js
var buttonGroup = T({
  base: "inline-flex rounded-lg shadow-xs",
  variants: {
    size: {
      sm: "scale-90",
      md: "scale-100",
      lg: "scale-110"
    }
  },
  defaultVariants: {
    size: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte
ButtonGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/button-group/ButtonGroup.svelte";
var root11 = add_locations(from_html(`<div><!></div>`), ButtonGroup[FILENAME], [[17, 0]]);
function ButtonGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonGroup);
  let size2 = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "disabled",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("buttonGroup");
  let groupClass = tag(user_derived(() => buttonGroup({ size: size2(), class: clsx_default(theme, $$props.class) })), "groupClass");
  setContext("group", size2());
  setContext("disabled", $$props.disabled);
  var $$exports = { ...legacy_api() };
  var div = root11();
  attribute_effect(div, () => ({ ...restProps, class: get(groupClass), role: "group" }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", ButtonGroup, 18, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonGroup = hmr(ButtonGroup, () => ButtonGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonGroup[HMR].source;
    set(ButtonGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonGroup_default = ButtonGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/buttons/theme.js
var button = T({
  slots: {
    base: "text-center font-medium inline-flex items-center justify-center",
    outline: "bg-transparent border hover:text-white dark:bg-transparent dark:hover-text-white",
    shadow: "shadow-lg"
  },
  variants: {
    color: {
      // "primary" | "dark" | "alternative" | "light" | "secondary" | "gray" | "red" | "orange" | "amber" | "yellow" | "lime" | "green" | "emerald" | "teal" | "cyan" | "sky" | "blue" | "indigo" | "violet" | "purple" | "fuchsia" | "pink" | "rose"
      primary: {
        base: "text-white bg-primary-700 hover:bg-primary-800 dark:bg-primary-600 dark:hover:bg-primary-700 focus-within:ring-primary-300 dark:focus-within:ring-primary-800",
        outline: "text-primary-700 border-primary-700 hover:bg-primary-800 dark:border-primary-500 dark:text-primary-500 dark:hover:bg-primary-600",
        shadow: "shadow-primary-500/50 dark:shadow-primary-800/80"
      },
      dark: {
        base: "text-white bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:hover:bg-gray-700 focus-within:ring-gray-300 dark:focus-within:ring-gray-700",
        outline: "text-gray-900 border-gray-800 hover:bg-gray-900 dark:border-gray-600 dark:text-gray-400 dark:hover:bg-gray-600",
        shadow: "shadow-gray-500/50 gray:shadow-gray-800/80"
      },
      alternative: {
        base: "text-gray-900 bg-transparent border border-gray-200 dark:border-gray-600 hover:bg-gray-100 dark:bg-gray-800 dark:text-gray-400 hover:text-primary-700 focus-within:text-primary-700 dark:focus-within:text-white dark:hover:text-white dark:hover:bg-gray-700 focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "_shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      light: {
        base: "text-gray-900 bg-white border border-gray-300 hover:bg-gray-100 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 focus-within:ring-gray-200 dark:focus-within:ring-gray-700",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      secondary: {
        base: "text-white bg-secondary-700 hover:bg-secondary-800 dark:bg-secondary-600 dark:hover:bg-secondary-700 focus-within:ring-secondary-300 dark:focus-within:ring-secondary-800",
        outline: "text-secondary-700 border-secondary-700 hover:bg-secondary-800 dark:border-secondary-400 dark:text-secondary-400 dark:hover:bg-secondary-500",
        shadow: "shadow-secondary-500/50 dark:shadow-secondary-800/80"
      },
      gray: {
        base: "text-white bg-gray-700 hover:bg-gray-800 dark:bg-gray-600 dark:hover:bg-gray-700 focus-within:ring-gray-300 dark:focus-within:ring-gray-800",
        outline: "text-gray-700 border-gray-700 hover:bg-gray-800 dark:border-gray-400 dark:text-gray-400 dark:hover:bg-gray-500",
        shadow: "shadow-gray-500/50 dark:shadow-gray-800/80"
      },
      red: {
        base: "text-white bg-red-700 hover:bg-red-800 dark:bg-red-600 dark:hover:bg-red-700 focus-within:ring-red-300 dark:focus-within:ring-red-900",
        outline: "text-red-700 border-red-700 hover:bg-red-800 dark:border-red-500 dark:text-red-500 dark:hover:bg-red-600",
        shadow: "shadow-red-500/50 dark:shadow-red-800/80"
      },
      orange: {
        base: "text-white bg-orange-700 hover:bg-orange-800 dark:bg-orange-600 dark:hover:bg-orange-700 focus-within:ring-orange-300 dark:focus-within:ring-orange-900",
        outline: "text-orange-700 border-orange-700 hover:bg-orange-800 dark:border-orange-400 dark:text-orange-400 dark:hover:bg-orange-500",
        shadow: "shadow-orange-500/50 dark:shadow-orange-800/80"
      },
      amber: {
        base: "text-white bg-amber-700 hover:bg-amber-800 dark:bg-amber-600 dark:hover:bg-amber-700 focus-within:ring-amber-300 dark:focus-within:ring-amber-900",
        outline: "text-amber-700 border-amber-700 hover:bg-amber-800 dark:border-amber-400 dark:text-amber-400 dark:hover:bg-amber-500",
        shadow: "shadow-amber-500/50 dark:shadow-amber-800/80"
      },
      yellow: {
        base: "text-white bg-yellow-400 hover:bg-yellow-500 focus-within:ring-yellow-300 dark:focus-within:ring-yellow-900",
        outline: "text-yellow-400 border-yellow-400 hover:bg-yellow-500 dark:border-yellow-300 dark:text-yellow-300 dark:hover:bg-yellow-400",
        shadow: "shadow-yellow-500/50 dark:shadow-yellow-800/80"
      },
      lime: {
        base: "text-white bg-lime-700 hover:bg-lime-800 dark:bg-lime-600 dark:hover:bg-lime-700 focus-within:ring-lime-300 dark:focus-within:ring-lime-800",
        outline: "text-lime-700 border-lime-700 hover:bg-lime-800 dark:border-lime-400 dark:text-lime-400 dark:hover:bg-lime-500",
        shadow: "shadow-lime-500/50 dark:shadow-lime-800/80"
      },
      green: {
        base: "text-white bg-green-700 hover:bg-green-800 dark:bg-green-600 dark:hover:bg-green-700 focus-within:ring-green-300 dark:focus-within:ring-green-800",
        outline: "text-green-700 border-green-700 hover:bg-green-800 dark:border-green-500 dark:text-green-500 dark:hover:bg-green-600",
        shadow: "shadow-green-500/50 dark:shadow-green-800/80"
      },
      emerald: {
        base: "text-white bg-emerald-700 hover:bg-emerald-800 dark:bg-emerald-600 dark:hover:bg-emerald-700 focus-within:ring-emerald-300 dark:focus-within:ring-emerald-800",
        outline: "text-emerald-700 border-emerald-700 hover:bg-emerald-800 dark:border-emerald-400 dark:text-emerald-400 dark:hover:bg-emerald-500",
        shadow: "shadow-emerald-500/50 dark:shadow-emerald-800/80"
      },
      teal: {
        base: "text-white bg-teal-700 hover:bg-teal-800 dark:bg-teal-600 dark:hover:bg-teal-700 focus-within:ring-teal-300 dark:focus-within:ring-teal-800",
        outline: "text-teal-700 border-teal-700 hover:bg-teal-800 dark:border-teal-400 dark:text-teal-400 dark:hover:bg-teal-500",
        shadow: "shadow-teal-500/50 dark:shadow-teal-800/80"
      },
      cyan: {
        base: "text-white bg-cyan-700 hover:bg-cyan-800 dark:bg-cyan-600 dark:hover:bg-cyan-700 focus-within:ring-cyan-300 dark:focus-within:ring-cyan-800",
        outline: "text-cyan-700 border-cyan-700 hover:bg-cyan-800 dark:border-cyan-400 dark:text-cyan-400 dark:hover:bg-cyan-500",
        shadow: "shadow-cyan-500/50 dark:shadow-cyan-800/80"
      },
      sky: {
        base: "text-white bg-sky-700 hover:bg-sky-800 dark:bg-sky-600 dark:hover:bg-sky-700 focus-within:ring-sky-300 dark:focus-within:ring-sky-800",
        outline: "text-sky-700 border-sky-700 hover:bg-sky-800 dark:border-sky-400 dark:text-sky-400 dark:hover:bg-sky-500",
        shadow: "shadow-sky-500/50 dark:shadow-sky-800/80"
      },
      blue: {
        base: "text-white bg-blue-700 hover:bg-blue-800 dark:bg-blue-600 dark:hover:bg-blue-700 focus-within:ring-blue-300 dark:focus-within:ring-blue-800",
        outline: "text-blue-700 border-blue-700 hover:bg-blue-800 dark:border-blue-500 dark:text-blue-500 dark:hover:bg-blue-500",
        shadow: "shadow-blue-500/50 dark:shadow-blue-800/80"
      },
      indigo: {
        base: "text-white bg-indigo-700 hover:bg-indigo-800 dark:bg-indigo-600 dark:hover:bg-indigo-700 focus-within:ring-indigo-300 dark:focus-within:ring-indigo-800",
        outline: "text-indigo-700 border-indigo-700 hover:bg-indigo-800 dark:border-indigo-400 dark:text-indigo-400 dark:hover:bg-indigo-500",
        shadow: "shadow-indigo-500/50 dark:shadow-indigo-800/80"
      },
      violet: {
        base: "text-white bg-violet-700 hover:bg-violet-800 dark:bg-violet-600 dark:hover:bg-violet-700 focus-within:ring-violet-300 dark:focus-within:ring-violet-800",
        outline: "text-violet-700 border-violet-700 hover:bg-violet-800 dark:border-violet-400 dark:text-violet-400 dark:hover:bg-violet-500",
        shadow: "shadow-violet-500/50 dark:shadow-violet-800/80"
      },
      purple: {
        base: "text-white bg-purple-700 hover:bg-purple-800 dark:bg-purple-600 dark:hover:bg-purple-700",
        outline: "text-purple-700 border-purple-700 hover:bg-purple-800 dark:border-purple-400 dark:text-purple-400 dark:hover:bg-purple-500",
        shadow: "shadow-purple-500/50 dark:shadow-purple-800/80"
      },
      fuchsia: {
        base: "text-white bg-fuchsia-700 hover:bg-fuchsia-800 dark:bg-fuchsia-600 dark:hover:bg-fuchsia-700",
        outline: "text-fuchsia-700 border-fuchsia-700 hover:bg-fuchsia-800 dark:border-fuchsia-400 dark:text-fuchsia-400 dark:hover:bg-fuchsia-500",
        shadow: "shadow-fuchsia-500/50 dark:shadow-fuchsia-800/80"
      },
      pink: {
        base: "text-white bg-pink-700 hover:bg-pink-800 dark:bg-pink-600 dark:hover:bg-pink-700",
        outline: "text-pink-700 border-pink-700 hover:bg-pink-800 dark:border-pink-400 dark:text-pink-400 dark:hover:bg-pink-500",
        shadow: "shadow-pink-500/50 dark:shadow-pink-800/80"
      },
      rose: {
        base: "text-white bg-rose-700 hover:bg-rose-800 dark:bg-rose-600 dark:hover:bg-rose-700",
        outline: "text-rose-700 border-rose-700 hover:bg-rose-800 dark:border-rose-400 dark:text-rose-400 dark:hover:bg-rose-500",
        shadow: "shadow-rose-500/50 dark:shadow-rose-800/80"
      }
    },
    size: {
      xs: "px-3 py-2 text-xs",
      sm: "px-4 py-2 text-sm",
      md: "px-5 py-2.5 text-sm",
      lg: "px-5 py-3 text-base",
      xl: "px-6 py-3.5 text-base"
    },
    group: {
      true: "focus-within:ring-2 focus-within:z-10 [&:not(:first-child)]:rounded-s-none [&:not(:last-child)]:rounded-e-none [&:not(:last-child)]:border-e-0",
      false: "focus-within:ring-4 focus-within:outline-hidden"
    },
    disabled: {
      true: "cursor-not-allowed opacity-50",
      false: ""
    },
    pill: {
      true: "rounded-full",
      false: "rounded-lg"
    },
    checked: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [],
  defaultVariants: {
    pill: false
  }
});
var gradientButton = T({
  slots: {
    base: "inline-flex items-center justify-center transition-all duration-75 ease-in text-white bg-linear-to-r ",
    outlineWrapper: "inline-flex items-center justify-center w-full border-0!"
  },
  variants: {
    color: {
      blue: { base: "from-blue-500 via-blue-600 to-blue-700 hover:bg-linear-to-br focus:ring-blue-300 dark:focus:ring-blue-800" },
      green: { base: "from-green-400 via-green-500 to-green-600 hover:bg-linear-to-br focus:ring-green-300 dark:focus:ring-green-800" },
      cyan: { base: "text-white bg-linear-to-r from-cyan-400 via-cyan-500 to-cyan-600 hover:bg-linear-to-br focus:ring-cyan-300 dark:focus:ring-cyan-800" },
      teal: { base: "text-white bg-linear-to-r from-teal-400 via-teal-500 to-teal-600 hover:bg-linear-to-br focus:ring-teal-300 dark:focus:ring-teal-800" },
      lime: { base: "text-gray-900 bg-linear-to-r from-lime-200 via-lime-400 to-lime-500 hover:bg-linear-to-br focus:ring-lime-300 dark:focus:ring-lime-800" },
      red: { base: "text-white bg-linear-to-r from-red-400 via-red-500 to-red-600 hover:bg-linear-to-br focus:ring-red-300 dark:focus:ring-red-800" },
      pink: { base: "text-white bg-linear-to-r from-pink-400 via-pink-500 to-pink-600 hover:bg-linear-to-br focus:ring-pink-300 dark:focus:ring-pink-800" },
      purple: { base: "text-white bg-linear-to-r from-purple-500 via-purple-600 to-purple-700 hover:bg-linear-to-br focus:ring-purple-300 dark:focus:ring-purple-800" },
      purpleToBlue: { base: "text-white bg-linear-to-br from-purple-600 to-blue-500 hover:bg-linear-to-bl focus:ring-blue-300 dark:focus:ring-blue-800" },
      cyanToBlue: { base: "text-white bg-linear-to-r from-cyan-500 to-blue-500 hover:bg-linear-to-bl focus:ring-cyan-300 dark:focus:ring-cyan-800" },
      greenToBlue: { base: "text-white bg-linear-to-br from-green-400 to-blue-600 hover:bg-linear-to-bl focus:ring-green-200 dark:focus:ring-green-800" },
      purpleToPink: { base: "text-white bg-linear-to-r from-purple-500 to-pink-500 hover:bg-linear-to-l focus:ring-purple-200 dark:focus:ring-purple-800" },
      pinkToOrange: { base: "text-white bg-linear-to-br from-pink-500 to-orange-400 hover:bg-linear-to-bl focus:ring-pink-200 dark:focus:ring-pink-800" },
      tealToLime: { base: "text-gray-900 bg-linear-to-r from-teal-200 to-lime-200 hover:bg-linear-to-l focus:ring-lime-200 dark:focus:ring-teal-700" },
      redToYellow: { base: "text-gray-900 bg-linear-to-r from-red-200 via-red-300 to-yellow-200 hover:bg-linear-to-bl focus:ring-red-100 dark:focus:ring-red-400" }
    },
    outline: {
      true: {
        base: "p-0.5",
        outlineWrapper: "bg-white text-gray-900! dark:bg-gray-900 dark:text-white! hover:bg-transparent hover:text-inherit! group-hover:opacity-0! group-hover:text-inherit!"
      }
    },
    pill: {
      true: {
        base: "rounded-full",
        outlineWrapper: "rounded-full"
      },
      false: {
        base: "rounded-lg",
        outlineWrapper: "rounded-lg"
      }
    },
    size: {
      xs: "px-3 py-2 text-xs",
      sm: "px-4 py-2 text-sm",
      md: "px-5 py-2.5 text-sm",
      lg: "px-5 py-3 text-base",
      xl: "px-6 py-3.5 text-base"
    },
    shadow: {
      true: {
        base: "shadow-lg"
      }
    },
    group: {
      true: "rounded-none",
      false: ""
    },
    disabled: {
      true: { base: "opacity-50 cursor-not-allowed" }
    }
  },
  compoundVariants: [
    {
      shadow: true,
      color: "blue",
      class: { base: "shadow-blue-500/50 dark:shadow-blue-800/80" }
    },
    {
      shadow: true,
      color: "green",
      class: { base: "shadow-green-500/50 dark:shadow-green-800/80" }
    },
    {
      shadow: true,
      color: "cyan",
      class: { base: "shadow-cyan-500/50 dark:shadow-cyan-800/80" }
    },
    {
      shadow: true,
      color: "teal",
      class: { base: "shadow-teal-500/50 dark:shadow-teal-800/80" }
    },
    {
      shadow: true,
      color: "lime",
      class: { base: "shadow-lime-500/50 dark:shadow-lime-800/80" }
    },
    {
      shadow: true,
      color: "red",
      class: { base: "shadow-red-500/50 dark:shadow-red-800/80" }
    },
    {
      shadow: true,
      color: "pink",
      class: { base: "shadow-pink-500/50 dark:shadow-pink-800/80" }
    },
    {
      shadow: true,
      color: "purple",
      class: { base: "shadow-purple-500/50 dark:shadow-purple-800/80" }
    },
    {
      shadow: true,
      color: "purpleToBlue",
      class: { base: "shadow-blue-500/50 dark:shadow-blue-800/80" }
    },
    {
      shadow: true,
      color: "cyanToBlue",
      class: { base: "shadow-cyan-500/50 dark:shadow-cyan-800/80" }
    },
    {
      shadow: true,
      color: "greenToBlue",
      class: { base: "shadow-green-500/50 dark:shadow-green-800/80" }
    },
    {
      shadow: true,
      color: "purpleToPink",
      class: { base: "shadow-purple-500/50 dark:shadow-purple-800/80" }
    },
    {
      shadow: true,
      color: "pinkToOrange",
      class: { base: "shadow-pink-500/50 dark:shadow-pink-800/80" }
    },
    {
      shadow: true,
      color: "tealToLime",
      class: { base: "shadow-lime-500/50 dark:shadow-teal-800/80" }
    },
    {
      shadow: true,
      color: "redToYellow",
      class: { base: "shadow-red-500/50 dark:shadow-red-800/80" }
    },
    {
      group: true,
      pill: true,
      class: "first:rounded-s-full last:rounded-e-full"
    },
    {
      group: true,
      pill: false,
      class: "first:rounded-s-lg last:rounded-e-lg"
    }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/buttons/Button.svelte
Button[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/buttons/Button.svelte";
var root_19 = add_locations(from_html(`<a><!></a>`), Button[FILENAME], [[24, 2]]);
var root_43 = add_locations(from_svg(`<svg class="ml-2 h-4 w-4 animate-spin text-white" fill="none" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path></svg>`), Button[FILENAME], [[31, 6, [[32, 8], [33, 8]]]]);
var root_35 = add_locations(from_html(`<button><!> <!></button>`), Button[FILENAME], [[28, 2]]);
function Button($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Button);
  const group2 = getContext("group");
  const ctxDisabled = getContext("disabled");
  let outline = prop($$props, "outline", 3, false), size2 = prop($$props, "size", 3, "md"), shadow = prop($$props, "shadow", 3, false), tag2 = prop($$props, "tag", 3, "button"), loading = prop($$props, "loading", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "pill",
      "outline",
      "size",
      "color",
      "shadow",
      "tag",
      "disabled",
      "loading",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("button");
  let actualSize = tag(user_derived(() => group2 ? "sm" : size2()), "actualSize");
  let actualColor = tag(user_derived(() => $$props.color ?? (group2 ? outline() ? "dark" : "alternative" : "primary")), "actualColor");
  let isDisabled = tag(user_derived(() => Boolean(ctxDisabled) || Boolean($$props.disabled) || loading()), "isDisabled");
  const $$d = tag(
    user_derived(() => button({
      color: get(actualColor),
      size: get(actualSize),
      disabled: get(isDisabled),
      pill: $$props.pill,
      group: !!group2
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), outline_ = tag(user_derived(() => get($$d).outline), "outline_"), shadow_ = tag(user_derived(() => get($$d).shadow), "shadow_");
  let btnCls = tag(
    user_derived(() => get(base)({
      class: clsx_default(outline() && get(outline_)(), shadow() && get(shadow_)(), theme?.base, $$props.class)
    })),
    "btnCls"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a2 = root_19();
      attribute_effect(a2, () => ({ ...restProps, class: get(btnCls) }));
      var node_1 = child(a2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", Button, 25, 4);
      reset(a2);
      append($$anchor2, a2);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var button_1 = root_35();
          attribute_effect(button_1, () => ({
            type: "button",
            ...restProps,
            class: get(btnCls),
            disabled: get(isDisabled)
          }));
          var node_3 = child(button_1);
          add_svelte_meta(() => snippet(node_3, () => $$props.children ?? noop), "render", Button, 29, 4);
          var node_4 = sibling(node_3, 2);
          {
            var consequent_1 = ($$anchor4) => {
              var svg = root_43();
              append($$anchor4, svg);
            };
            add_svelte_meta(
              () => if_block(node_4, ($$render) => {
                if (loading()) $$render(consequent_1);
              }),
              "if",
              Button,
              30,
              4
            );
          }
          reset(button_1);
          append($$anchor3, button_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_5 = first_child(fragment_2);
          {
            validate_void_dynamic_element(tag2);
            validate_dynamic_element_tag(tag2);
            element(
              node_5,
              tag2,
              false,
              ($$element, $$anchor4) => {
                attribute_effect($$element, () => ({ ...restProps, class: get(btnCls) }));
                var fragment_3 = comment();
                var node_6 = first_child(fragment_3);
                add_svelte_meta(() => snippet(node_6, () => $$props.children ?? noop), "render", Button, 39, 4);
                append($$anchor4, fragment_3);
              },
              void 0,
              [38, 2]
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (strict_equals(tag2(), "button")) $$render(consequent_2);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          Button,
          27,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0, false)) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      Button,
      23,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Button = hmr(Button, () => Button[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Button[HMR].source;
    set(Button[HMR].source, module.default[HMR].original);
  });
}
var Button_default = Button;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte
GradientButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/buttons/GradientButton.svelte";
var root_110 = add_locations(from_html(`<div><!></div>`), GradientButton[FILENAME], [[19, 2]]);
function GradientButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, GradientButton);
  const group2 = getContext("group");
  let color = prop($$props, "color", 3, "blue"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "outline",
      "pill",
      "color",
      "shadow",
      "class",
      "href",
      "disabled",
      "size",
      "btnClass"
    ],
    "restProps"
  );
  const theme = getTheme("gradientButton");
  const $$d = tag(
    user_derived(() => gradientButton({
      color: color(),
      outline: $$props.outline,
      pill: $$props.pill,
      shadow: $$props.shadow,
      disabled: $$props.disabled,
      size: $$props.size,
      group: !!group2
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), outlineWrapper = tag(user_derived(() => get($$d).outlineWrapper), "outlineWrapper");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_110();
      var node_1 = child(div);
      {
        let $0 = user_derived(() => get(outlineWrapper)({ class: clsx_default(theme?.outlineWrapper, $$props.btnClass) }));
        add_svelte_meta(
          () => Button_default(node_1, spread_props(() => restProps, {
            get class() {
              return get($0);
            },
            get disabled() {
              return $$props.disabled;
            },
            get href() {
              return $$props.href;
            },
            get size() {
              return $$props.size;
            },
            children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
              var fragment_1 = comment();
              var node_2 = first_child(fragment_1);
              add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", GradientButton, 21, 6);
              append($$anchor3, fragment_1);
            }),
            $$slots: { default: true }
          })),
          "component",
          GradientButton,
          20,
          4,
          { componentTag: "Button" }
        );
      }
      reset(div);
      template_effect(($0) => set_class(div, 1, $0), [
        () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) }))
      ]);
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      {
        let $0 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
        add_svelte_meta(
          () => Button_default(node_3, spread_props(() => restProps, {
            get class() {
              return get($0);
            },
            get disabled() {
              return $$props.disabled;
            },
            get href() {
              return $$props.href;
            },
            get size() {
              return $$props.size;
            },
            children: wrap_snippet(GradientButton, ($$anchor3, $$slotProps) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              add_svelte_meta(() => snippet(node_4, () => $$props.children ?? noop), "render", GradientButton, 26, 4);
              append($$anchor3, fragment_3);
            }),
            $$slots: { default: true }
          })),
          "component",
          GradientButton,
          25,
          2,
          { componentTag: "Button" }
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.outline) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      GradientButton,
      18,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  GradientButton = hmr(GradientButton, () => GradientButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GradientButton[HMR].source;
    set(GradientButton[HMR].source, module.default[HMR].original);
  });
}
var GradientButton_default = GradientButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/card/theme.js
var card = T({
  slots: {
    base: "w-full flex max-w-sm bg-white border border-gray-200 rounded-lg dark:bg-gray-800 dark:border-gray-700",
    image: "rounded-t-lg"
  },
  variants: {
    size: {
      xs: { base: "max-w-xs" },
      sm: { base: "max-w-sm" },
      md: { base: "max-w-lg" },
      lg: { base: "max-w-2xl" },
      xl: { base: "max-w-none" }
    },
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      gray: { base: "border-gray-200 dark:bg-gray-800 dark:border-gray-700" },
      primary: { base: "border-primary-200 bg-primary-400 dark:bg-primary-800 dark:border-primary-700" },
      secondary: { base: "border-secondary-200 bg-secondary-400 dark:bg-secondary-800 dark:border-secondary-700" },
      red: { base: "border-red-200 bg-red-400 dark:bg-red-800 dark:border-red-700" },
      orange: { base: "border-orange-200 bg-orange-400 dark:bg-orange-800 dark:border-orange-700" },
      amber: { base: "border-amber-200 bg-amber-400 dark:bg-amber-800 dark:border-amber-700" },
      yellow: { base: "border-yellow-200 bg-yellow-400 dark:bg-yellow-800 dark:border-yellow-700" },
      lime: { base: "border-lime-200 bg-lime-400 dark:bg-lime-800 dark:border-lime-700" },
      green: { base: "border-green-200 bg-green-400 dark:bg-green-800 dark:border-green-700" },
      emerald: { base: "border-emerald-200 bg-emerald-400 dark:bg-emerald-800 dark:border-emerald-700" },
      teal: { base: "border-teal-200 bg-teal-400 dark:bg-teal-800 dark:border-teal-700" },
      cyan: { base: "border-cyan-200 bg-cyan-400 dark:bg-cyan-800 dark:border-cyan-700" },
      sky: { base: "border-sky-200 bg-sky-400 dark:bg-sky-800 dark:border-sky-700" },
      blue: { base: "border-blue-200 bg-blue-400 dark:bg-blue-800 dark:border-blue-700" },
      indigo: { base: "border-indigo-200 bg-indigo-400 dark:bg-indigo-800 dark:border-indigo-700" },
      violet: { base: "border-violet-200 bg-violet-400 dark:bg-violet-800 dark:border-violet-700" },
      purple: { base: "border-purple-200 bg-purple-400 dark:bg-purple-800 dark:border-purple-700" },
      fuchsia: { base: "border-fuchsia-200 bg-fuchsia-400 dark:bg-fuchsia-800 dark:border-fuchsia-700" },
      pink: { base: "border-pink-200 bg-pink-400 dark:bg-pink-800 dark:border-pink-700" },
      rose: { base: "border-rose-200 bg-rose-400 dark:bg-rose-800 dark:border-rose-700" }
    },
    shadow: {
      sm: { base: "shadow-md" },
      normal: { base: "shadow-sm" },
      md: { base: "shadow-md" },
      lg: { base: "shadow-lg" },
      xl: { base: "shadow-xl" },
      "2xl": { base: "shadow-2xl" },
      inner: { base: "shadow-inner" }
    },
    horizontal: {
      true: {
        base: "md:flex-row",
        image: "object-cover w-full h-96 md:h-auto md:w-48 md:rounded-none"
      }
    },
    reverse: {
      true: { base: "flex-col-reverse", image: "rounded-b-lg rounded-tl-none" },
      false: { base: "flex-col", image: "rounded-t-lg" }
    },
    href: {
      true: "",
      false: ""
    },
    hasImage: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      horizontal: true,
      reverse: true,
      class: { base: "md:flex-row-reverse", image: "md:rounded-e-lg" }
    },
    {
      horizontal: true,
      reverse: false,
      class: { base: "md:flex-row", image: "md:rounded-s-lg" }
    },
    // gray, primary, secondary, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      href: true,
      color: "gray",
      class: { base: "cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700" }
    },
    {
      href: true,
      color: "primary",
      class: { base: "cursor-pointer hover:bg-primary-500 dark:hover:bg-primary-700" }
    },
    {
      href: true,
      color: "secondary",
      class: { base: "cursor-pointer hover:bg-secondary-500 dark:hover:bg-secondary-700" }
    },
    {
      href: true,
      color: "red",
      class: { base: "cursor-pointer hover:bg-red-500 dark:hover:bg-red-700" }
    },
    {
      href: true,
      color: "orange",
      class: { base: "cursor-pointer hover:bg-orange-500 dark:hover:bg-orange-700" }
    },
    {
      href: true,
      color: "amber",
      class: { base: "cursor-pointer hover:bg-amber-500 dark:hover:bg-amber-700" }
    },
    {
      href: true,
      color: "yellow",
      class: { base: "cursor-pointer hover:bg-yellow-500 dark:hover:bg-yellow-700" }
    },
    {
      href: true,
      color: "lime",
      class: { base: "cursor-pointer hover:bg-lime-500 dark:hover:bg-lime-700" }
    },
    {
      href: true,
      color: "green",
      class: { base: "cursor-pointer hover:bg-green-500 dark:hover:bg-green-700" }
    },
    {
      href: true,
      color: "emerald",
      class: { base: "cursor-pointer hover:bg-emerald-500 dark:hover:bg-emerald-700" }
    },
    {
      href: true,
      color: "teal",
      class: { base: "cursor-pointer hover:bg-teal-500 dark:hover:bg-teal-700" }
    },
    {
      href: true,
      color: "cyan",
      class: { base: "cursor-pointer hover:bg-cyan-500 dark:hover:bg-cyan-700" }
    },
    {
      href: true,
      color: "sky",
      class: { base: "cursor-pointer hover:bg-sky-500 dark:hover:bg-sky-700" }
    },
    {
      href: true,
      color: "blue",
      class: { base: "cursor-pointer hover:bg-blue-500 dark:hover:bg-blue-700" }
    },
    {
      href: true,
      color: "indigo",
      class: { base: "cursor-pointer hover:bg-indigo-500 dark:hover:bg-indigo-700" }
    },
    {
      href: true,
      color: "violet",
      class: { base: "cursor-pointer hover:bg-violet-500 dark:hover:bg-violet-700" }
    },
    {
      href: true,
      color: "purple",
      class: { base: "cursor-pointer hover:bg-purple-500 dark:hover:bg-purple-700" }
    },
    {
      href: true,
      color: "fuchsia",
      class: { base: "cursor-pointer hover:bg-fuchsia-500 dark:hover:bg-fuchsia-700" }
    },
    {
      href: true,
      color: "pink",
      class: { base: "cursor-pointer hover:bg-pink-500 dark:hover:bg-pink-700" }
    },
    {
      href: true,
      color: "rose",
      class: { base: "cursor-pointer hover:bg-rose-500 dark:hover:bg-rose-700" }
    }
  ],
  defaultVariants: {
    size: "sm",
    shadow: "normal",
    horizontal: false,
    reverse: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/card/Card.svelte
Card[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/card/Card.svelte";
var root_26 = add_locations(from_html(`<img/> <!>`, 1), Card[FILENAME], [[29, 4]]);
var root_44 = add_locations(from_html(`<div><!></div>`), Card[FILENAME], [[37, 2]]);
var root_52 = add_locations(from_html(`<a><!></a>`), Card[FILENAME], [[41, 2]]);
function Card($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Card);
  const childSlot = wrap_snippet(Card, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = root_26();
        var img_1 = first_child(fragment_1);
        var node_1 = sibling(img_1, 2);
        add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Card, 30, 4);
        template_effect(
          ($0) => {
            set_class(img_1, 1, $0);
            set_attribute(img_1, "src", $$props.img);
            set_attribute(img_1, "alt", $$props.img);
          },
          [
            () => clsx2(get(image)({ class: clsx_default(theme?.image, get(styling).image) }))
          ]
        );
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_2 = comment();
        var node_2 = first_child(fragment_2);
        add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", Card, 32, 4);
        append($$anchor3, fragment_2);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.img) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        Card,
        28,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let color = prop($$props, "color", 3, "gray"), horizontal = prop($$props, "horizontal", 3, false), shadow = prop($$props, "shadow", 3, "md"), reverse = prop($$props, "reverse", 3, false), size2 = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "horizontal",
      "shadow",
      "reverse",
      "img",
      "size",
      "class",
      "classes",
      "imgClass"
    ],
    "restProps"
  );
  warnThemeDeprecation("Card", { imgClass: $$props.imgClass }, { imgClass: "image" });
  const styling = tag(user_derived(() => $$props.classes ?? { image: $$props.imgClass }), "styling");
  const theme = getTheme("card");
  const $$d = tag(
    user_derived(() => card({
      size: size2(),
      color: color(),
      shadow: shadow(),
      horizontal: horizontal(),
      reverse: reverse(),
      href: !!$$props.href
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), image = tag(user_derived(() => get($$d).image), "image");
  var $$exports = { ...legacy_api() };
  var fragment_3 = comment();
  var node_3 = first_child(fragment_3);
  {
    var consequent_1 = ($$anchor2) => {
      var div = root_44();
      attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var node_4 = child(div);
      add_svelte_meta(() => childSlot(node_4), "render", Card, 38, 4);
      reset(div);
      append($$anchor2, div);
    };
    var alternate_1 = ($$anchor2) => {
      var a2 = root_52();
      attribute_effect(a2, ($0) => ({ ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var node_5 = child(a2);
      add_svelte_meta(() => childSlot(node_5), "render", Card, 42, 4);
      reset(a2);
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (strict_equals($$props.href, void 0)) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      Card,
      36,
      0
    );
  }
  append($$anchor, fragment_3);
  return pop($$exports);
}
if (import.meta.hot) {
  Card = hmr(Card, () => Card[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Card[HMR].source;
    set(Card[HMR].source, module.default[HMR].original);
  });
}
var Card_default = Card;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/theme.js
var carousel = T({
  slots: {
    base: "grid overflow-hidden relative rounded-lg h-56 sm:h-64 xl:h-80 2xl:h-96",
    slide: ""
  },
  variants: {},
  compoundVariants: [],
  defaultVariants: {}
});
var carouselIndicators = T({
  slots: {
    base: "absolute start-1/2 z-30 flex -translate-x-1/2 space-x-3 rtl:translate-x-1/2 rtl:space-x-reverse",
    indicator: "bg-gray-100 hover:bg-gray-300"
  },
  variants: {
    selected: {
      true: { indicator: "opacity-100" },
      false: { indicator: "opacity-60" }
    },
    position: {
      top: { base: "top-5" },
      bottom: { base: "bottom-5" }
    }
  }
});
var controlButton = T({
  slots: {
    base: "flex absolute top-0 z-30 justify-center items-center px-4 h-full group focus:outline-hidden text-white dark:text-gray-300",
    span: "inline-flex h-8 w-8 items-center justify-center rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white group-focus:outline-hidden sm:h-10 sm:w-10 dark:bg-gray-800/30 dark:group-hover:bg-gray-800/60 dark:group-focus:ring-gray-800/70"
  },
  variants: {
    forward: {
      true: "end-0",
      false: "start-0"
    }
  }
});
var thumbnails = T({
  base: "flex flex-row justify-center bg-gray-100 w-full"
});
var thumbnail = T({
  base: "",
  variants: {
    selected: {
      true: "opacity-100",
      false: "opacity-60"
    }
  },
  defaultVariants: {
    selected: false
  }
});
var slide2 = T({
  base: "absolute block w-full h-full",
  variants: {
    fit: {
      contain: "object-contain",
      cover: "object-cover",
      fill: "object-fill",
      none: "object-none",
      "scale-down": "object-scale-down"
    }
  },
  defaultVariants: {
    fit: "cover"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Slide.svelte
Slide[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Slide.svelte";
var root_27 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[36, 4]]);
var root_45 = add_locations(from_html(`<img/>`), Slide[FILENAME], [[40, 4]]);
function Slide($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Slide);
  const _state = getContext("state");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "image",
      "transition",
      "fit",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("slide");
  let transitionSlideIn = tag(
    user_derived(() => ({
      x: _state.forward ? "100%" : "-100%",
      opacity: 1,
      width: "100%",
      height: "100%",
      duration: _state.slideDuration
    })),
    "transitionSlideIn"
  );
  let transitionSlideOut = tag(
    user_derived(() => ({
      x: _state.forward ? "-100%" : "100%",
      opacity: 0.9,
      width: "100%",
      height: "100%",
      duration: _state.slideDuration
    })),
    "transitionSlideOut"
  );
  let imgClass = tag(user_derived(() => slide2({ fit: $$props.fit, class: clsx_default(theme, $$props.class) })), "imgClass");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => key(node_1, () => $$props.image, ($$anchor3) => {
          var img2 = root_27();
          attribute_effect(img2, () => ({
            alt: "...",
            ...$$props.image,
            ...restProps,
            class: get(imgClass)
          }));
          replay_events(img2);
          transition(3, img2, () => $$props.transition, () => ({}));
          append($$anchor3, img2);
        }),
        "key",
        Slide,
        35,
        2
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_2 = first_child(fragment_2);
      add_svelte_meta(
        () => key(node_2, () => $$props.image, ($$anchor3) => {
          var img_1 = root_45();
          attribute_effect(img_1, () => ({
            alt: "...",
            ...$$props.image,
            ...restProps,
            class: get(imgClass)
          }));
          replay_events(img_1);
          transition(2, img_1, () => fly, () => get(transitionSlideOut));
          transition(1, img_1, () => fly, () => get(transitionSlideIn));
          append($$anchor3, img_1);
        }),
        "key",
        Slide,
        39,
        2
      );
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.transition) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Slide,
      34,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Slide = hmr(Slide, () => Slide[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Slide[HMR].source;
    set(Slide[HMR].source, module.default[HMR].original);
  });
}
var Slide_default = Slide;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/CarouselSlide.js
var canChangeSlide = ({ lastSlideChange, slideDuration, slideDurationRatio = 1 }) => {
  if (lastSlideChange && Date.now() - lastSlideChange < slideDuration * slideDurationRatio) {
    console.warn("Can't change slide yet, too soon");
    return false;
  }
  return true;
};

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Carousel.svelte
Carousel[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Carousel.svelte";
var root_36 = add_locations(from_html(`<link rel="preload" as="image"/>`), Carousel[FILENAME], [[169, 6]]);
var root12 = add_locations(from_html(`<div><!> <!></div>`), Carousel[FILENAME], [[176, 0]]);
function Carousel($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Carousel);
  const SLIDE_DURATION_RATIO = 0.25;
  let index2 = prop($$props, "index", 15, 0), slideDuration = prop($$props, "slideDuration", 3, 1e3), duration = prop($$props, "duration", 3, 0), ariaLabel = prop($$props, "aria-label", 3, "Draggable Carousel"), disableSwipe = prop($$props, "disableSwipe", 3, false), imgClass = prop($$props, "imgClass", 3, ""), isPreload = prop($$props, "isPreload", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "slide",
      "images",
      "index",
      "slideDuration",
      "slideFit",
      "transition",
      "duration",
      "aria-label",
      "disableSwipe",
      "imgClass",
      "class",
      "classes",
      "onchange",
      "isPreload"
    ],
    "restProps"
  );
  warnThemeDeprecation("Carousel", { imgClass: imgClass() }, { imgClass: "slide" });
  const styling = tag(user_derived(() => $$props.classes ?? { slide: imgClass() }), "styling");
  const theme = getTheme("carousel");
  let $$d = tag(user_derived(carousel), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), slideCls = tag(user_derived(() => get($$d).slide), "slideCls");
  const changeSlide = (n2) => {
    if (strict_equals($$props.images.length, 0)) return;
    if (strict_equals(n2 % $$props.images.length, _state.index)) return;
    if (!canChangeSlide({
      lastSlideChange: _state.lastSlideChange,
      slideDuration: _state.slideDuration,
      slideDurationRatio: SLIDE_DURATION_RATIO
    })) return;
    _state.forward = n2 >= _state.index;
    _state.index = ($$props.images.length + n2) % $$props.images.length;
    _state.lastSlideChange = Date.now();
    index2(
      _state.index
      // Update the bindable index
    );
    $$props.onchange?.($$props.images[_state.index]);
  };
  const _state = tag_proxy(
    proxy({
      images: $$props.images,
      index: index2() ?? 0,
      forward: true,
      slideDuration: slideDuration(),
      lastSlideChange: Date.now(),
      changeSlide
    }),
    "_state"
  );
  setContext("state", _state);
  let initialized = false;
  user_effect(() => {
    changeSlide(index2());
  });
  user_effect(() => {
    _state.slideDuration = slideDuration();
  });
  onMount(() => {
    $$props.onchange?.($$props.images[index2()]);
    initialized = true;
  });
  const nextSlide = () => changeSlide(_state.index + 1);
  const prevSlide = () => changeSlide(_state.index - 1);
  const loop = (node) => {
    let intervalId;
    if (duration() > 0) {
      intervalId = setInterval(nextSlide, duration());
      if (initialized) {
        if (_state.forward) nextSlide();
        else prevSlide();
      }
    }
    return () => clearInterval(intervalId);
  };
  let activeDragGesture = tag(state(void 0), "activeDragGesture");
  let carouselDiv = tag(state(void 0), "carouselDiv");
  let percentOffset = tag(state(0), "percentOffset");
  let touchEvent = null;
  const getPositionFromEvent = (evt) => {
    const mousePos = evt?.clientX;
    if (strict_equals(mousePos, void 0, false)) return mousePos;
    let touchEvt = evt;
    if (/^touch/.test(touchEvt?.type)) {
      return touchEvt.touches[0].clientX;
    }
  };
  const onDragStart = (evt) => {
    if (disableSwipe()) return;
    touchEvent = evt;
    evt.cancelable && evt.preventDefault();
    const start = getPositionFromEvent(evt);
    const width = get(carouselDiv)?.getBoundingClientRect().width;
    if (strict_equals(start, void 0) || strict_equals(width, void 0)) return;
    set(activeDragGesture, { start, position: start, width, timestamp: Date.now() }, true);
  };
  let onDragMove = tag(
    user_derived(() => strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
      const position = getPositionFromEvent(evt);
      if (!get(activeDragGesture) || strict_equals(position, void 0)) return;
      const { start, width } = get(activeDragGesture);
      set(percentOffset, Math.min(100, Math.max(-100, (position - start) / width * 100)), true);
      get(activeDragGesture).position = position;
    }),
    "onDragMove"
  );
  let onDragStop = tag(
    user_derived(() => strict_equals(get(activeDragGesture), void 0) ? void 0 : (evt) => {
      const SWIPE_MAX_DURATION = 250;
      const SWIPE_MIN_DISTANCE = 30;
      const DRAG_MIN_PERCENT = 50;
      if (get(activeDragGesture)) {
        const { timestamp, position, start } = get(activeDragGesture);
        const duration2 = Date.now() - timestamp;
        const distance = position - start;
        if (Math.abs(distance) >= SWIPE_MIN_DISTANCE && duration2 <= SWIPE_MAX_DURATION && duration2 > 0) {
          if (distance > 0) prevSlide();
          else nextSlide();
        } else if (get(percentOffset) > DRAG_MIN_PERCENT) prevSlide();
        else if (get(percentOffset) < -DRAG_MIN_PERCENT) nextSlide();
        else {
          if (strict_equals(touchEvent?.constructor.name, "TouchEvent")) {
            touchEvent?.target?.dispatchEvent(new Event("click", { bubbles: true }));
          }
        }
      }
      set(percentOffset, 0);
      set(activeDragGesture, void 0);
      touchEvent = null;
    }),
    "onDragStop"
  );
  var $$exports = { ...legacy_api() };
  var div = root12();
  head(($$anchor2) => {
    var fragment = comment();
    var node_1 = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_2 = first_child(fragment_1);
        add_svelte_meta(
          () => each(node_2, 17, () => $$props.images, index, ($$anchor4, image) => {
            var link = root_36();
            template_effect(() => set_attribute(link, "href", get(image).src));
            append($$anchor4, link);
          }),
          "each",
          Carousel,
          168,
          4
        );
        append($$anchor3, fragment_1);
      };
      add_svelte_meta(
        () => if_block(node_1, ($$render) => {
          if (isPreload() && $$props.images.length > 0) $$render(consequent);
        }),
        "if",
        Carousel,
        167,
        2
      );
    }
    append($$anchor2, fragment);
  });
  event("mousemove", $document, function(...$$args) {
    apply(() => get(onDragMove), this, $$args, Carousel, [175, 30]);
  });
  event("mouseup", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [175, 53]);
  });
  event(
    "touchmove",
    $document,
    function(...$$args) {
      apply(() => get(onDragMove), this, $$args, Carousel, [175, 78]);
    },
    void 0,
    true
  );
  event("touchend", $document, function(...$$args) {
    apply(() => get(onDragStop), this, $$args, Carousel, [175, 102]);
  });
  attribute_effect(
    div,
    ($0) => ({
      onmousedown: onDragStart,
      ontouchstart: onDragStart,
      onmousemove: get(onDragMove),
      onmouseup: get(onDragStop),
      ontouchmove: get(onDragMove),
      ontouchend: get(onDragStop),
      role: "button",
      "aria-label": ariaLabel(),
      tabindex: "0",
      ...restProps,
      class: $0
    }),
    [
      () => get(base)({
        class: clsx_default(strict_equals(get(activeDragGesture), void 0) ? "transition-transform" : "", theme?.base, $$props.class)
      })
    ]
  );
  var node_3 = child(div);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      add_svelte_meta(() => snippet(node_4, () => $$props.slide, () => ({ index: _state.index, Slide: Slide_default })), "render", Carousel, 178, 4);
      append($$anchor2, fragment_2);
    };
    var alternate = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      {
        let $0 = user_derived(() => get(slideCls)({ class: clsx_default(theme?.slide, get(styling).slide) }));
        add_svelte_meta(
          () => Slide_default(node_5, {
            get image() {
              return $$props.images[_state.index];
            },
            get fit() {
              return $$props.slideFit;
            },
            get class() {
              return get($0);
            },
            get transition() {
              return $$props.transition;
            }
          }),
          "component",
          Carousel,
          180,
          4,
          { componentTag: "Slide" }
        );
      }
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($$props.slide) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Carousel,
      177,
      2
    );
  }
  var node_6 = sibling(node_3, 2);
  add_svelte_meta(() => snippet(node_6, () => $$props.children ?? noop, () => _state.index), "render", Carousel, 183, 2);
  reset(div);
  bind_this(div, ($$value) => set(carouselDiv, $$value), () => get(carouselDiv));
  attach(div, () => loop);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Carousel = hmr(Carousel, () => Carousel[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Carousel[HMR].source;
    set(Carousel[HMR].source, module.default[HMR].original);
  });
}
var Carousel_default = Carousel;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte
ControlButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/ControlButton.svelte";
var root_37 = add_locations(from_svg(`<svg aria-hidden="true" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg>`), ControlButton[FILENAME], [[20, 8, [[21, 10]]]]);
var root_46 = add_locations(from_svg(`<svg aria-hidden="true" class="h-5 w-5 sm:h-6 sm:w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg>`), ControlButton[FILENAME], [[24, 8, [[25, 10]]]]);
var root_53 = add_locations(from_html(`<span class="sr-only"> </span>`), ControlButton[FILENAME], [[29, 8]]);
var root_28 = add_locations(from_html(`<span><!> <!></span>`), ControlButton[FILENAME], [[18, 4]]);
var root13 = add_locations(from_html(`<button><!></button>`), ControlButton[FILENAME], [[14, 0]]);
function ControlButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ControlButton);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "forward",
      "name",
      "class",
      "spanClass"
    ],
    "restProps"
  );
  const { base, span: span2 } = controlButton({ forward: $$props.forward });
  const theme = getTheme("controlButton");
  var $$exports = { ...legacy_api() };
  var button2 = root13();
  attribute_effect(button2, ($0) => ({ type: "button", class: $0, ...restProps }), [() => base({ class: clsx_default($$props.class, theme) })]);
  var node = child(button2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", ControlButton, 16, 4);
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2) => {
      var span_1 = root_28();
      var node_2 = child(span_1);
      {
        var consequent_1 = ($$anchor3) => {
          var svg = root_37();
          append($$anchor3, svg);
        };
        var alternate = ($$anchor3) => {
          var svg_1 = root_46();
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if ($$props.forward) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          ControlButton,
          19,
          6
        );
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var span_2 = root_53();
          var text2 = child(span_2, true);
          reset(span_2);
          template_effect(() => set_text(text2, $$props.name));
          append($$anchor3, span_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.name) $$render(consequent_2);
          }),
          "if",
          ControlButton,
          28,
          6
        );
      }
      reset(span_1);
      template_effect(($0) => set_class(span_1, 1, $0), [() => clsx2(span2({ class: clsx_default($$props.spanClass) }))]);
      append($$anchor2, span_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      ControlButton,
      15,
      2
    );
  }
  reset(button2);
  append($$anchor, button2);
  return pop($$exports);
}
if (import.meta.hot) {
  ControlButton = hmr(ControlButton, () => ControlButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ControlButton[HMR].source;
    set(ControlButton[HMR].source, module.default[HMR].original);
  });
}
var ControlButton_default = ControlButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Controls.svelte
Controls[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Controls.svelte";
var root_29 = add_locations(from_html(`<!> <!>`, 1), Controls[FILENAME], []);
function Controls($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Controls);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("controlButton");
  const _state = getContext("state");
  function changeSlide(forward) {
    _state.changeSlide(forward ? _state.index + 1 : _state.index - 1);
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.children, () => changeSlide), "render", Controls, 21, 2);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = root_29();
      var node_2 = first_child(fragment_2);
      {
        let $0 = user_derived(() => clsx_default(theme, $$props.class));
        add_svelte_meta(
          () => ControlButton_default(node_2, spread_props(
            {
              name: "Previous",
              forward: false,
              onclick: () => changeSlide(false),
              get class() {
                return get($0);
              }
            },
            () => restProps
          )),
          "component",
          Controls,
          23,
          2,
          { componentTag: "ControlButton" }
        );
      }
      var node_3 = sibling(node_2, 2);
      {
        let $0 = user_derived(() => clsx_default(theme, $$props.class));
        add_svelte_meta(
          () => ControlButton_default(node_3, spread_props(
            {
              name: "Next",
              forward: true,
              onclick: () => changeSlide(true),
              get class() {
                return get($0);
              }
            },
            () => restProps
          )),
          "component",
          Controls,
          24,
          2,
          { componentTag: "ControlButton" }
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Controls,
      20,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Controls = hmr(Controls, () => Controls[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Controls[HMR].source;
    set(Controls[HMR].source, module.default[HMR].original);
  });
}
var Controls_default = Controls;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/CarouselIndicators.svelte
CarouselIndicators[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/CarouselIndicators.svelte";
var root_111 = add_locations(from_html(`<button type="button"><!></button>`), CarouselIndicators[FILENAME], [[24, 4]]);
var root14 = add_locations(from_html(`<div></div>`), CarouselIndicators[FILENAME], [[21, 0]]);
function CarouselIndicators($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CarouselIndicators);
  let position = prop($$props, "position", 3, "bottom"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "activeClass",
      "inactiveClass",
      "position",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("carouselIndicators");
  const _state = getContext("state");
  const $$d = tag(user_derived(() => carouselIndicators({ position: position() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), indicator2 = tag(user_derived(() => get($$d).indicator), "indicator");
  function goToIndex(newIndex) {
    _state.changeSlide(newIndex);
  }
  var $$exports = { ...legacy_api() };
  var div = root14();
  attribute_effect(div, ($0) => ({ class: $0, ...restProps }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  add_svelte_meta(
    () => each(div, 21, () => _state.images, index, ($$anchor2, _, idx) => {
      const selected = tag(user_derived(() => strict_equals(_state.index, idx)), "selected");
      get(selected);
      var button2 = root_111();
      button2.__click = () => goToIndex(idx);
      set_attribute(button2, "aria-label", `Go to slide ${idx + 1}`);
      var node = child(button2);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          add_svelte_meta(() => snippet(node_1, () => $$props.children, () => ({ selected: get(selected), index: idx })), "render", CarouselIndicators, 26, 8);
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          {
            let $0 = user_derived(() => get(indicator2)({
              selected: get(selected),
              class: clsx_default(get(selected) ? $$props.activeClass : $$props.inactiveClass, theme?.indicator)
            }));
            add_svelte_meta(
              () => Indicator_default(node_2, {
                get class() {
                  return get($0);
                }
              }),
              "component",
              CarouselIndicators,
              28,
              8,
              { componentTag: "Indicator" }
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node, ($$render) => {
            if ($$props.children) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          CarouselIndicators,
          25,
          6
        );
      }
      reset(button2);
      template_effect(() => set_attribute(button2, "aria-current", get(selected) ? "true" : void 0));
      append($$anchor2, button2);
    }),
    "each",
    CarouselIndicators,
    22,
    2
  );
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CarouselIndicators = hmr(CarouselIndicators, () => CarouselIndicators[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CarouselIndicators[HMR].source;
    set(CarouselIndicators[HMR].source, module.default[HMR].original);
  });
}
var CarouselIndicators_default = CarouselIndicators;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte
Thumbnail[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Thumbnail.svelte";
var root15 = add_locations(from_html(`<img/>`), Thumbnail[FILENAME], [[12, 0]]);
function Thumbnail($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbnail);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "selected", "class"], "restProps");
  const theme = getTheme("thumbnail");
  var $$exports = { ...legacy_api() };
  var img2 = root15();
  attribute_effect(img2, ($0) => ({ ...restProps, class: $0 }), [
    () => thumbnail({
      selected: $$props.selected,
      class: clsx_default(theme, $$props.class)
    })
  ]);
  replay_events(img2);
  append($$anchor, img2);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbnail = hmr(Thumbnail, () => Thumbnail[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnail[HMR].source;
    set(Thumbnail[HMR].source, module.default[HMR].original);
  });
}
var Thumbnail_default = Thumbnail;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte
Thumbnails[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/carousel/Thumbnails.svelte";
var root_112 = add_locations(from_html(`<button><!></button>`), Thumbnails[FILENAME], [[36, 4]]);
var root16 = add_locations(from_html(`<div></div>`), Thumbnails[FILENAME], [[33, 0]]);
function Thumbnails($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbnails);
  let images = prop($$props, "images", 19, () => []), index2 = prop($$props, "index", 15), ariaLabel = prop($$props, "ariaLabel", 3, "Click to view image"), throttleDelay = prop($$props, "throttleDelay", 3, 650);
  const theme = getTheme("thumbnails");
  let lastClickedAt = -Infinity;
  const btnClick = (newIndex) => {
    const now = Date.now();
    if (now - lastClickedAt < throttleDelay()) {
      console.warn("Thumbnail action throttled");
      return;
    }
    lastClickedAt = now;
    index2(newIndex);
  };
  user_effect(() => {
    if (images().length > 0) {
      index2((index2() + images().length) % images().length);
    }
  });
  var $$exports = { ...legacy_api() };
  var div = root16();
  add_svelte_meta(
    () => each(div, 21, images, index, ($$anchor2, image, idx) => {
      const selected = tag(user_derived(() => strict_equals(index2(), idx)), "selected");
      get(selected);
      var button2 = root_112();
      button2.__click = () => btnClick(idx);
      var node = child(button2);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          {
            let $0 = user_derived(() => ({
              image: get(image),
              selected: get(selected),
              imgClass: clsx_default($$props.imgClass),
              Thumbnail: Thumbnail_default
            }));
            add_svelte_meta(() => snippet(node_1, () => $$props.children, () => get($0)), "render", Thumbnails, 38, 8);
          }
          append($$anchor3, fragment);
        };
        var alternate = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          {
            let $0 = user_derived(() => clsx_default($$props.imgClass));
            add_svelte_meta(
              () => Thumbnail_default(node_2, spread_props(() => get(image), {
                get selected() {
                  return get(selected);
                },
                get class() {
                  return get($0);
                }
              })),
              "component",
              Thumbnails,
              40,
              8,
              { componentTag: "Thumbnail" }
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node, ($$render) => {
            if ($$props.children) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          Thumbnails,
          37,
          6
        );
      }
      reset(button2);
      template_effect(() => {
        set_attribute(button2, "aria-label", ariaLabel());
        set_attribute(button2, "aria-current", get(selected) ? "true" : void 0);
      });
      append($$anchor2, button2);
    }),
    "each",
    Thumbnails,
    34,
    2
  );
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(thumbnails({ class: clsx_default(theme, $$props.class) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbnails = hmr(Thumbnails, () => Thumbnails[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbnails[HMR].source;
    set(Thumbnails[HMR].source, module.default[HMR].original);
  });
}
var Thumbnails_default = Thumbnails;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/clipboard/theme.js
var clipboard = T({
  base: "gap-2",
  variants: {
    embedded: {
      true: "px-1 py-1 focus-within:ring-0 bg-transparent hover:bg-transparent text-inherit",
      false: ""
    }
  },
  defaultVariants: {
    embedded: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/clipboard/Clipboard.svelte
Clipboard[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/clipboard/Clipboard.svelte";
function Clipboard($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Clipboard);
  let embedded = prop($$props, "embedded", 3, false), value = prop($$props, "value", 11, ""), success = prop($$props, "success", 15, false), className = prop($$props, "class", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "embedded",
      "value",
      "success",
      "onclick",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("clipboard");
  const copyToClipboard = async (ev) => {
    $$props.onclick?.(ev);
    if (ev.defaultPrevented) return;
    if (success()) return;
    success(true);
    const REG_HEX = /&#x([a-fA-F0-9]+);/g;
    const decodedText = value().replace(REG_HEX, function(_match, group1) {
      const num = parseInt(group1, 16);
      return String.fromCharCode(num);
    });
    try {
      (await track_reactivity_loss(window.navigator.clipboard.writeText(decodedText)))();
    } catch (error) {
      console.error(...log_if_contains_state("error", "Failed to copy to clipboard:", error));
      success(false);
      return;
    }
    setTimeout(
      () => {
        success(false);
      },
      2e3
    );
  };
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => clipboard({ embedded: embedded(), class: clsx_default(theme, className()) }));
    add_svelte_meta(
      () => Button_default(node, spread_props({ onclick: copyToClipboard }, () => restProps, {
        get class() {
          return get($0);
        },
        children: wrap_snippet(Clipboard, ($$anchor2, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop, success), "render", Clipboard, 42, 2);
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      Clipboard,
      41,
      0,
      { componentTag: "Button" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Clipboard = hmr(Clipboard, () => Clipboard[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Clipboard[HMR].source;
    set(Clipboard[HMR].source, module.default[HMR].original);
  });
}
var Clipboard_default = Clipboard;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/darkmode/theme.js
var darkmode = T({
  base: "text-gray-500 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-700 focus:outline-hidden rounded-lg text-sm p-2.5"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte
DarkMode[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/darkmode/DarkMode.svelte";
var root_113 = add_locations(
  with_script(from_html(
    `<script lang="ts">
    if ("THEME_PREFERENCE_KEY" in localStorage) {
      localStorage.getItem("THEME_PREFERENCE_KEY") === "dark" ? window.document.documentElement.classList.add("dark") : window.document.documentElement.classList.remove("dark");
    } else {
      if (window.matchMedia("(prefers-color-scheme: dark)").matches) window.document.documentElement.classList.add("dark");
    }
  <\/script><!>`,
    1
  )),
  DarkMode[FILENAME],
  [[28, 2]]
);
var root_38 = add_locations(
  from_svg(`<svg role="img" aria-label="Light mode" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1
    0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path></svg>`),
  DarkMode[FILENAME],
  [[42, 6, [[43, 8]]]]
);
var root_54 = add_locations(from_svg(`<svg role="img" aria-label="Dark mode" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path></svg>`), DarkMode[FILENAME], [[56, 6, [[57, 8]]]]);
var root17 = add_locations(from_html(`<button><span class="hidden dark:block"><!></span> <span class="block dark:hidden"><!></span></button>`), DarkMode[FILENAME], [[37, 0, [[38, 2], [52, 2]]]]);
function DarkMode($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DarkMode);
  let size2 = prop($$props, "size", 3, "md"), ariaLabel = prop($$props, "ariaLabel", 3, "Dark mode"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "class",
      "lightIcon",
      "darkIcon",
      "size",
      "ariaLabel"
    ],
    "restProps"
  );
  const theme = getTheme("darkmode");
  const sizes = { sm: "w-4 h-4", md: "w-5 h-5", lg: "w-6 h-6" };
  const toggleTheme = (ev) => {
    const target = ev.target;
    const isDark = target.ownerDocument.documentElement.classList.toggle("dark");
    if (strict_equals(target.ownerDocument, document))
      localStorage.setItem("THEME_PREFERENCE_KEY", isDark ? "dark" : "light");
  };
  var $$exports = { ...legacy_api() };
  var button2 = root17();
  head(($$anchor2) => {
    var fragment = root_113();
    var node = sibling(first_child(fragment));
    append($$anchor2, fragment);
  });
  attribute_effect(
    button2,
    ($0) => ({
      onclick: toggleTheme,
      "aria-label": ariaLabel(),
      type: "button",
      ...restProps,
      class: $0,
      tabindex: 0
    }),
    [() => darkmode({ class: clsx_default(theme, $$props.class) })]
  );
  var span2 = child(button2);
  var node_1 = child(span2);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_2, () => $$props.lightIcon), "render", DarkMode, 40, 6);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var svg = root_38();
      template_effect(() => set_class(svg, 0, clsx2(sizes[size2()])));
      append($$anchor2, svg);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($$props.lightIcon) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      DarkMode,
      39,
      4
    );
  }
  reset(span2);
  var span_1 = sibling(span2, 2);
  var node_3 = child(span_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      add_svelte_meta(() => snippet(node_4, () => $$props.darkIcon), "render", DarkMode, 54, 6);
      append($$anchor2, fragment_2);
    };
    var alternate_1 = ($$anchor2) => {
      var svg_1 = root_54();
      template_effect(() => set_class(svg_1, 0, clsx2(sizes[size2()])));
      append($$anchor2, svg_1);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($$props.darkIcon) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      DarkMode,
      53,
      4
    );
  }
  reset(span_1);
  reset(button2);
  append($$anchor, button2);
  return pop($$exports);
}
if (import.meta.hot) {
  DarkMode = hmr(DarkMode, () => DarkMode[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DarkMode[HMR].source;
    set(DarkMode[HMR].source, module.default[HMR].original);
  });
}
var DarkMode_default = DarkMode;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/theme.js
var toolbar = T({
  slots: {
    base: "flex justify-between items-center",
    content: "flex flex-wrap items-center"
  },
  variants: {
    embedded: {
      true: {},
      false: {
        base: "py-2 px-3 rounded-lg dark:border"
      }
    },
    color: {
      default: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-600",
        content: "divide-gray-300 dark:divide-gray-800"
      },
      primary: {
        base: "bg-primary-50 dark:bg-gray-800 dark:border-primary-800",
        content: "divide-primary-300 dark:divide-primary-800"
      },
      secondary: {
        base: "bg-secondary-50 dark:bg-gray-800 dark:border-secondary-800",
        content: "divide-secondary-300 dark:divide-primary-800"
      },
      gray: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-800",
        content: "divide-gray-300 dark:divide-gray-800"
      },
      red: {
        base: "bg-red-50 dark:bg-gray-800 dark:border-red-800",
        content: "divide-red-300 dark:divide-red-800"
      },
      yellow: {
        base: "bg-yellow-50 dark:bg-gray-800 dark:border-yellow-800",
        content: "divide-yellow-300 dark:divide-yellow-800"
      },
      green: {
        base: "bg-green-50 dark:bg-gray-800 dark:border-green-800",
        content: "divide-green-300 dark:divide-green-800"
      },
      indigo: {
        base: "bg-indigo-50 dark:bg-gray-800 dark:border-indigo-800",
        content: "divide-indigo-300 dark:divide-indigo-800"
      },
      purple: {
        base: "bg-purple-50 dark:bg-gray-800 dark:border-purple-800",
        content: "divide-purple-300 dark:divide-purple-800"
      },
      pink: {
        base: "bg-pink-50 dark:bg-gray-800 dark:border-pink-800",
        content: "divide-pink-300 dark:divide-pink-800"
      },
      blue: {
        base: "bg-blue-50 dark:bg-gray-800 dark:border-blue-800",
        content: "divide-blue-300 dark:divide-blue-800"
      },
      dark: {
        base: "bg-gray-50 dark:bg-gray-800 dark:border-gray-800",
        content: "divide-gray-300 dark:divide-gray-800"
      }
    },
    separators: {
      true: {
        content: "sm:divide-x rtl:divide-x-reverse"
      }
    }
  },
  compoundVariants: [
    {
      embedded: true,
      color: "default",
      class: {
        base: "bg-transparent"
      }
    }
  ],
  defaultVariants: {
    color: "default"
  }
});
var toolbarGroup = T({
  base: "flex items-center",
  variants: {
    spacing: {
      default: "space-x-1 rtl:space-x-reverse",
      tight: "space-x-0.5 rtl:space-x-reverse",
      loose: "space-x-2 rtl:space-x-reverse"
    },
    padding: {
      default: "sm:not(:last):pe-4 sm:not(:first):ps-4",
      none: ""
    },
    position: {
      middle: "",
      first: "sm:ps-0",
      last: "sm:pe-0"
    }
  },
  compoundVariants: [
    {
      position: ["first", "last"],
      class: "sm:px-0"
    }
  ],
  defaultVariants: {
    spacing: "default",
    padding: "default"
  }
});
var toolbarButton = T({
  base: "focus:outline-hidden whitespace-normal",
  variants: {
    color: {
      dark: "text-gray-500 hover:text-gray-900 hover:bg-gray-200 dark:text-gray-400 dark:hover:text-white dark:hover:bg-gray-600",
      gray: "text-gray-500 focus:ring-gray-400 hover:bg-gray-200 dark:hover:bg-gray-800 dark:hover:text-gray-300",
      red: "text-red-500 focus:ring-red-400 hover:bg-red-200 dark:hover:bg-red-800 dark:hover:text-red-300",
      yellow: "text-yellow-500 focus:ring-yellow-400 hover:bg-yellow-200 dark:hover:bg-yellow-800 dark:hover:text-yellow-300",
      green: "text-green-500 focus:ring-green-400 hover:bg-green-200 dark:hover:bg-green-800 dark:hover:text-green-300",
      indigo: "text-indigo-500 focus:ring-indigo-400 hover:bg-indigo-200 dark:hover:bg-indigo-800 dark:hover:text-indigo-300",
      purple: "text-purple-500 focus:ring-purple-400 hover:bg-purple-200 dark:hover:bg-purple-800 dark:hover:text-purple-300",
      pink: "text-pink-500 focus:ring-pink-400 hover:bg-pink-200 dark:hover:bg-pink-800 dark:hover:text-pink-300",
      blue: "text-blue-500 focus:ring-blue-400 hover:bg-blue-200 dark:hover:bg-blue-800 dark:hover:text-blue-300",
      primary: "text-primary-500 focus:ring-primary-400 hover:bg-primary-200 dark:hover:bg-primary-800 dark:hover:text-primary-300",
      default: "focus:ring-gray-400 hover:bg-gray-100 dark:text-gray-400 dark:hover:text-gray-50"
    },
    size: {
      xs: "m-0.5 rounded-xs focus:ring-1 p-0.5",
      sm: "m-0.5 rounded-sm focus:ring-1 p-0.5",
      md: "m-0.5 rounded-lg focus:ring-2 p-1.5",
      lg: "m-0.5 rounded-lg focus:ring-2 p-2.5"
    },
    background: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      color: "default",
      background: true,
      class: "dark:hover:bg-gray-600"
    },
    {
      color: "default",
      background: false,
      class: "dark:hover:bg-gray-700"
    }
  ],
  defaultVariants: {
    color: "default",
    size: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte
ToolbarButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/ToolbarButton.svelte";
var root_210 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[25, 14]]);
var root_114 = add_locations(from_html(`<button><!> <!></button>`), ToolbarButton[FILENAME], [[24, 2]]);
var root_47 = add_locations(from_html(`<span class="sr-only"> </span>`), ToolbarButton[FILENAME], [[30, 14]]);
var root_39 = add_locations(from_html(`<a><!> <!></a>`), ToolbarButton[FILENAME], [[29, 2]]);
function ToolbarButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ToolbarButton);
  const background = getContext("background");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "name",
      "aria-label",
      "size",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("toolbarButton");
  const buttonCls = tag(
    user_derived(() => toolbarButton({
      color: $$props.color,
      size: $$props.size,
      background: !!background,
      class: clsx_default(theme, $$props.class)
    })),
    "buttonCls"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var button2 = root_114();
      attribute_effect(button2, () => ({
        type: "button",
        ...restProps,
        class: get(buttonCls),
        "aria-label": $$props["aria-label"] ?? $$props.name
      }));
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var span2 = root_210();
          var text2 = child(span2, true);
          reset(span2);
          template_effect(() => set_text(text2, $$props.name));
          append($$anchor3, span2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.name) $$render(consequent);
          }),
          "if",
          ToolbarButton,
          25,
          4
        );
      }
      var node_2 = sibling(node_1, 2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", ToolbarButton, 26, 4);
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a2 = root_39();
      attribute_effect(a2, () => ({
        ...restProps,
        class: get(buttonCls),
        "aria-label": $$props["aria-label"] ?? $$props.name
      }));
      var node_3 = child(a2);
      {
        var consequent_2 = ($$anchor3) => {
          var span_1 = root_47();
          var text_1 = child(span_1, true);
          reset(span_1);
          template_effect(() => set_text(text_1, $$props.name));
          append($$anchor3, span_1);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.name) $$render(consequent_2);
          }),
          "if",
          ToolbarButton,
          30,
          4
        );
      }
      var node_4 = sibling(node_3, 2);
      add_svelte_meta(() => snippet(node_4, () => $$props.children ?? noop), "render", ToolbarButton, 31, 4);
      reset(a2);
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0)) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      ToolbarButton,
      23,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ToolbarButton = hmr(ToolbarButton, () => ToolbarButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarButton[HMR].source;
    set(ToolbarButton[HMR].source, module.default[HMR].original);
  });
}
var ToolbarButton_default = ToolbarButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/datepicker/theme.js
var datepicker = T({
  slots: {
    base: "inline-block rounded-lg bg-white dark:bg-gray-700 shadow-lg p-4",
    input: "w-full rounded-md border px-4 py-2 text-sm focus:ring-2 focus:outline-none outline-none dark:border-gray-600 dark:bg-gray-700 dark:text-white disabled:cursor-not-allowed disabled:opacity-50 border-gray-300 bg-gray-50 text-gray-900",
    titleVariant: "mb-2 text-lg font-semibold text-gray-900 dark:text-white",
    polite: "text-sm rounded-lg text-gray-900 dark:text-white bg-white dark:bg-gray-700 font-semibold py-2.5 px-5 hover:bg-gray-100 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-200",
    button: "absolute inset-y-0 right-0 flex items-center px-3 text-gray-500 focus:outline-hidden dark:text-gray-400",
    actionButtons: "mt-4 flex justify-between",
    columnHeader: "text-center text-sm font-medium text-gray-500 dark:text-gray-400",
    grid: "grid grid-cols-7 gap-1 w-64",
    nav: "mb-4 flex items-center justify-between",
    dayButton: "h-8 w-full block flex-1 leading-9 border-0 rounded-lg cursor-pointer text-center font-semibold text-sm day p-0",
    monthButton: "rounded-lg px-3 py-2 text-sm hover:bg-gray-100 focus:ring-2 focus:ring-blue-500 dark:hover:bg-gray-700",
    actionSlot: ""
  },
  variants: {
    color: {
      primary: { input: "focus:ring-primary-500 dark:focus:ring-primary-400", dayButton: "bg-primary-100 dark:bg-primary-900" },
      blue: { input: "focus:ring-blue-500 dark:focus:ring-blue-400", dayButton: "bg-blue-100 dark:bg-blue-900" },
      red: { input: "focus:ring-red-500 dark:focus:ring-red-400", dayButton: "bg-red-100 dark:bg-red-900" },
      green: { input: "focus:ring-green-500 dark:focus:ring-green-400", dayButton: "bg-green-100 dark:bg-green-900" },
      yellow: { input: "focus:ring-yellow-500 dark:focus:ring-yellow-400", dayButton: "bg-yellow-100 dark:bg-yellow-900" },
      purple: { input: "focus:ring-purple-500 dark:focus:ring-purple-400", dayButton: "bg-purple-100 dark:bg-purple-900" },
      dark: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      light: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      alternative: { input: "focus:ring-alternative-500 dark:focus:ring-alternative-400", dayButton: "bg-alternative-100 dark:bg-alternative-900" },
      secondary: { input: "focus:ring-secondary-500 dark:focus:ring-secondary-400", dayButton: "bg-secondary-100 dark:bg-secondary-900" },
      gray: { input: "focus:ring-gray-500 dark:focus:ring-gray-400", dayButton: "bg-gray-100 dark:bg-gray-900" },
      orange: { input: "focus:ring-orange-500 dark:focus:ring-orange-400", dayButton: "bg-orange-100 dark:bg-orange-900" },
      amber: { input: "focus:ring-amber-500 dark:focus:ring-amber-400", dayButton: "bg-amber-100 dark:bg-amber-900" },
      lime: { input: "focus:ring-lime-500 dark:focus:ring-lime-400", dayButton: "bg-lime-100 dark:bg-lime-900" },
      emerald: { input: "focus:ring-emerald-500 dark:focus:ring-emerald-400", dayButton: "bg-emerald-100 dark:bg-emerald-900" },
      teal: { input: "focus:ring-teal-500 dark:focus:ring-teal-400", dayButton: "bg-teal-100 dark:bg-teal-900" },
      cyan: { input: "focus:ring-cyan-500 dark:focus:ring-cyan-400", dayButton: "bg-cyan-100 dark:bg-cyan-900" },
      sky: { input: "focus:ring-sky-500 dark:focus:ring-sky-400", dayButton: "bg-sky-100 dark:bg-sky-900" },
      indigo: { input: "focus:ring-indigo-500 dark:focus:ring-indigo-400", dayButton: "bg-indigo-100 dark:bg-indigo-900" },
      violet: { input: "focus:ring-violet-500 dark:focus:ring-violet-400", dayButton: "bg-violet-100 dark:bg-violet-900" },
      fuchsia: { input: "focus:ring-fuchsia-500 dark:focus:ring-fuchsia-400", dayButton: "bg-fuchsia-100 dark:bg-fuchsia-900" },
      pink: { input: "focus:ring-pink-500 dark:focus:ring-pink-400", dayButton: "bg-pink-100 dark:bg-pink-900" },
      rose: { input: "focus:ring-rose-500 dark:focus:ring-rose-400", dayButton: "bg-rose-100 dark:bg-rose-900" }
    },
    inline: {
      false: { base: "absolute z-10 mt-1" }
    },
    current: {
      true: { dayButton: "text-gray-400 dark:text-gray-500" }
    },
    today: {
      true: { dayButton: "font-bold" }
    },
    unavailable: {
      true: { dayButton: "opacity-50 cursor-not-allowed hover:bg-gray-100 dark:hover:bg-gray-700" }
    }
  },
  compoundVariants: []
});

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constants.js
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;
var millisecondsInWeek = 6048e5;
var millisecondsInMinute = 6e4;
var millisecondsInHour = 36e5;
var millisecondsInSecond = 1e3;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;
var constructFromSymbol = Symbol.for("constructDateFrom");

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/constructFrom.js
function constructFrom(date, value) {
  if (typeof date === "function") return date(value);
  if (date && typeof date === "object" && constructFromSymbol in date)
    return date[constructFromSymbol](value);
  if (date instanceof Date) return new date.constructor(value);
  return new Date(value);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/toDate.js
function toDate(argument, context) {
  return constructFrom(context || argument, argument);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/addDays.js
function addDays(date, amount, options) {
  const _date = toDate(date, options?.in);
  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);
  if (!amount) return _date;
  _date.setDate(_date.getDate() + amount);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/defaultOptions.js
var defaultOptions = {};
function getDefaultOptions() {
  return defaultOptions;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeek.js
function startOfWeek(date, options) {
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions2.weekStartsOn ?? defaultOptions2.locale?.options?.weekStartsOn ?? 0;
  const _date = toDate(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
  _date.setDate(_date.getDate() - diff);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeek.js
function startOfISOWeek(date, options) {
  return startOfWeek(date, { ...options, weekStartsOn: 1 });
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeekYear.js
function getISOWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  const fourthOfJanuaryOfNextYear = constructFrom(_date, 0);
  fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
  fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfISOWeek(fourthOfJanuaryOfNextYear);
  const fourthOfJanuaryOfThisYear = constructFrom(_date, 0);
  fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
  fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfISOWeek(fourthOfJanuaryOfThisYear);
  if (_date.getTime() >= startOfNextYear.getTime()) {
    return year + 1;
  } else if (_date.getTime() >= startOfThisYear.getTime()) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js
function getTimezoneOffsetInMilliseconds(date) {
  const _date = toDate(date);
  const utcDate = new Date(
    Date.UTC(
      _date.getFullYear(),
      _date.getMonth(),
      _date.getDate(),
      _date.getHours(),
      _date.getMinutes(),
      _date.getSeconds(),
      _date.getMilliseconds()
    )
  );
  utcDate.setUTCFullYear(_date.getFullYear());
  return +date - +utcDate;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/normalizeDates.js
function normalizeDates(context, ...dates) {
  const normalize = constructFrom.bind(
    null,
    context || dates.find((date) => typeof date === "object")
  );
  return dates.map(normalize);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfDay.js
function startOfDay(date, options) {
  const _date = toDate(date, options?.in);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfISOWeekYear.js
function startOfISOWeekYear(date, options) {
  const year = getISOWeekYear(date, options);
  const fourthOfJanuary = constructFrom(options?.in || date, 0);
  fourthOfJanuary.setFullYear(year, 0, 4);
  fourthOfJanuary.setHours(0, 0, 0, 0);
  return startOfISOWeek(fourthOfJanuary);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isSameDay.js
function isSameDay(laterDate, earlierDate, options) {
  const [dateLeft_, dateRight_] = normalizeDates(
    options?.in,
    laterDate,
    earlierDate
  );
  return +startOfDay(dateLeft_) === +startOfDay(dateRight_);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isDate.js
function isDate(value) {
  return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isValid.js
function isValid(date) {
  return !(!isDate(date) && typeof date !== "number" || isNaN(+toDate(date)));
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfMonth.js
function endOfMonth(date, options) {
  const _date = toDate(date, options?.in);
  const month = _date.getMonth();
  _date.setFullYear(_date.getFullYear(), month + 1, 0);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/normalizeInterval.js
function normalizeInterval(context, interval) {
  const [start, end] = normalizeDates(context, interval.start, interval.end);
  return { start, end };
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/eachDayOfInterval.js
function eachDayOfInterval(interval, options) {
  const { start, end } = normalizeInterval(options?.in, interval);
  let reversed = +start > +end;
  const endTime = reversed ? +start : +end;
  const date = reversed ? end : start;
  date.setHours(0, 0, 0, 0);
  let step = options?.step ?? 1;
  if (!step) return [];
  if (step < 0) {
    step = -step;
    reversed = !reversed;
  }
  const dates = [];
  while (+date <= endTime) {
    dates.push(constructFrom(start, date));
    date.setDate(date.getDate() + step);
    date.setHours(0, 0, 0, 0);
  }
  return reversed ? dates.reverse() : dates;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfMonth.js
function startOfMonth(date, options) {
  const _date = toDate(date, options?.in);
  _date.setDate(1);
  _date.setHours(0, 0, 0, 0);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/endOfWeek.js
function endOfWeek(date, options) {
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions2.weekStartsOn ?? defaultOptions2.locale?.options?.weekStartsOn ?? 0;
  const _date = toDate(date, options?.in);
  const day = _date.getDay();
  const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
  _date.setDate(_date.getDate() + diff);
  _date.setHours(23, 59, 59, 999);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatDistance.js
var formatDistanceLocale = {
  lessThanXSeconds: {
    one: "less than a second",
    other: "less than {{count}} seconds"
  },
  xSeconds: {
    one: "1 second",
    other: "{{count}} seconds"
  },
  halfAMinute: "half a minute",
  lessThanXMinutes: {
    one: "less than a minute",
    other: "less than {{count}} minutes"
  },
  xMinutes: {
    one: "1 minute",
    other: "{{count}} minutes"
  },
  aboutXHours: {
    one: "about 1 hour",
    other: "about {{count}} hours"
  },
  xHours: {
    one: "1 hour",
    other: "{{count}} hours"
  },
  xDays: {
    one: "1 day",
    other: "{{count}} days"
  },
  aboutXWeeks: {
    one: "about 1 week",
    other: "about {{count}} weeks"
  },
  xWeeks: {
    one: "1 week",
    other: "{{count}} weeks"
  },
  aboutXMonths: {
    one: "about 1 month",
    other: "about {{count}} months"
  },
  xMonths: {
    one: "1 month",
    other: "{{count}} months"
  },
  aboutXYears: {
    one: "about 1 year",
    other: "about {{count}} years"
  },
  xYears: {
    one: "1 year",
    other: "{{count}} years"
  },
  overXYears: {
    one: "over 1 year",
    other: "over {{count}} years"
  },
  almostXYears: {
    one: "almost 1 year",
    other: "almost {{count}} years"
  }
};
var formatDistance = (token, count, options) => {
  let result;
  const tokenValue = formatDistanceLocale[token];
  if (typeof tokenValue === "string") {
    result = tokenValue;
  } else if (count === 1) {
    result = tokenValue.one;
  } else {
    result = tokenValue.other.replace("{{count}}", count.toString());
  }
  if (options?.addSuffix) {
    if (options.comparison && options.comparison > 0) {
      return "in " + result;
    } else {
      return result + " ago";
    }
  }
  return result;
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildFormatLongFn.js
function buildFormatLongFn(args) {
  return (options = {}) => {
    const width = options.width ? String(options.width) : args.defaultWidth;
    const format2 = args.formats[width] || args.formats[args.defaultWidth];
    return format2;
  };
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatLong.js
var dateFormats = {
  full: "EEEE, MMMM do, y",
  long: "MMMM do, y",
  medium: "MMM d, y",
  short: "MM/dd/yyyy"
};
var timeFormats = {
  full: "h:mm:ss a zzzz",
  long: "h:mm:ss a z",
  medium: "h:mm:ss a",
  short: "h:mm a"
};
var dateTimeFormats = {
  full: "{{date}} 'at' {{time}}",
  long: "{{date}} 'at' {{time}}",
  medium: "{{date}}, {{time}}",
  short: "{{date}}, {{time}}"
};
var formatLong = {
  date: buildFormatLongFn({
    formats: dateFormats,
    defaultWidth: "full"
  }),
  time: buildFormatLongFn({
    formats: timeFormats,
    defaultWidth: "full"
  }),
  dateTime: buildFormatLongFn({
    formats: dateTimeFormats,
    defaultWidth: "full"
  })
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/formatRelative.js
var formatRelativeLocale = {
  lastWeek: "'last' eeee 'at' p",
  yesterday: "'yesterday at' p",
  today: "'today at' p",
  tomorrow: "'tomorrow at' p",
  nextWeek: "eeee 'at' p",
  other: "P"
};
var formatRelative = (token, _date, _baseDate, _options) => formatRelativeLocale[token];

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildLocalizeFn.js
function buildLocalizeFn(args) {
  return (value, options) => {
    const context = options?.context ? String(options.context) : "standalone";
    let valuesArray;
    if (context === "formatting" && args.formattingValues) {
      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
      const width = options?.width ? String(options.width) : defaultWidth;
      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
    } else {
      const defaultWidth = args.defaultWidth;
      const width = options?.width ? String(options.width) : args.defaultWidth;
      valuesArray = args.values[width] || args.values[defaultWidth];
    }
    const index2 = args.argumentCallback ? args.argumentCallback(value) : value;
    return valuesArray[index2];
  };
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/localize.js
var eraValues = {
  narrow: ["B", "A"],
  abbreviated: ["BC", "AD"],
  wide: ["Before Christ", "Anno Domini"]
};
var quarterValues = {
  narrow: ["1", "2", "3", "4"],
  abbreviated: ["Q1", "Q2", "Q3", "Q4"],
  wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"]
};
var monthValues = {
  narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"],
  abbreviated: [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ],
  wide: [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December"
  ]
};
var dayValues = {
  narrow: ["S", "M", "T", "W", "T", "F", "S"],
  short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"],
  abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  wide: [
    "Sunday",
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday"
  ]
};
var dayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
  }
};
var formattingDayPeriodValues = {
  narrow: {
    am: "a",
    pm: "p",
    midnight: "mi",
    noon: "n",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  abbreviated: {
    am: "AM",
    pm: "PM",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  },
  wide: {
    am: "a.m.",
    pm: "p.m.",
    midnight: "midnight",
    noon: "noon",
    morning: "in the morning",
    afternoon: "in the afternoon",
    evening: "in the evening",
    night: "at night"
  }
};
var ordinalNumber = (dirtyNumber, _options) => {
  const number = Number(dirtyNumber);
  const rem100 = number % 100;
  if (rem100 > 20 || rem100 < 10) {
    switch (rem100 % 10) {
      case 1:
        return number + "st";
      case 2:
        return number + "nd";
      case 3:
        return number + "rd";
    }
  }
  return number + "th";
};
var localize = {
  ordinalNumber,
  era: buildLocalizeFn({
    values: eraValues,
    defaultWidth: "wide"
  }),
  quarter: buildLocalizeFn({
    values: quarterValues,
    defaultWidth: "wide",
    argumentCallback: (quarter) => quarter - 1
  }),
  month: buildLocalizeFn({
    values: monthValues,
    defaultWidth: "wide"
  }),
  day: buildLocalizeFn({
    values: dayValues,
    defaultWidth: "wide"
  }),
  dayPeriod: buildLocalizeFn({
    values: dayPeriodValues,
    defaultWidth: "wide",
    formattingValues: formattingDayPeriodValues,
    defaultFormattingWidth: "wide"
  })
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchFn.js
function buildMatchFn(args) {
  return (string, options = {}) => {
    const width = options.width;
    const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
    const matchResult = string.match(matchPattern);
    if (!matchResult) {
      return null;
    }
    const matchedString = matchResult[0];
    const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
    const key2 = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString)) : (
      // [TODO] -- I challenge you to fix the type
      findKey(parsePatterns, (pattern) => pattern.test(matchedString))
    );
    let value;
    value = args.valueCallback ? args.valueCallback(key2) : key2;
    value = options.valueCallback ? (
      // [TODO] -- I challenge you to fix the type
      options.valueCallback(value)
    ) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}
function findKey(object, predicate) {
  for (const key2 in object) {
    if (Object.prototype.hasOwnProperty.call(object, key2) && predicate(object[key2])) {
      return key2;
    }
  }
  return void 0;
}
function findIndex(array, predicate) {
  for (let key2 = 0; key2 < array.length; key2++) {
    if (predicate(array[key2])) {
      return key2;
    }
  }
  return void 0;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/_lib/buildMatchPatternFn.js
function buildMatchPatternFn(args) {
  return (string, options = {}) => {
    const matchResult = string.match(args.matchPattern);
    if (!matchResult) return null;
    const matchedString = matchResult[0];
    const parseResult = string.match(args.parsePattern);
    if (!parseResult) return null;
    let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
    value = options.valueCallback ? options.valueCallback(value) : value;
    const rest = string.slice(matchedString.length);
    return { value, rest };
  };
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US/_lib/match.js
var matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
var parseOrdinalNumberPattern = /\d+/i;
var matchEraPatterns = {
  narrow: /^(b|a)/i,
  abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
  wide: /^(before christ|before common era|anno domini|common era)/i
};
var parseEraPatterns = {
  any: [/^b/i, /^(a|c)/i]
};
var matchQuarterPatterns = {
  narrow: /^[1234]/i,
  abbreviated: /^q[1234]/i,
  wide: /^[1234](th|st|nd|rd)? quarter/i
};
var parseQuarterPatterns = {
  any: [/1/i, /2/i, /3/i, /4/i]
};
var matchMonthPatterns = {
  narrow: /^[jfmasond]/i,
  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
var parseMonthPatterns = {
  narrow: [
    /^j/i,
    /^f/i,
    /^m/i,
    /^a/i,
    /^m/i,
    /^j/i,
    /^j/i,
    /^a/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ],
  any: [
    /^ja/i,
    /^f/i,
    /^mar/i,
    /^ap/i,
    /^may/i,
    /^jun/i,
    /^jul/i,
    /^au/i,
    /^s/i,
    /^o/i,
    /^n/i,
    /^d/i
  ]
};
var matchDayPatterns = {
  narrow: /^[smtwf]/i,
  short: /^(su|mo|tu|we|th|fr|sa)/i,
  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
var parseDayPatterns = {
  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],
  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]
};
var matchDayPeriodPatterns = {
  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
  any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
var parseDayPeriodPatterns = {
  any: {
    am: /^a/i,
    pm: /^p/i,
    midnight: /^mi/i,
    noon: /^no/i,
    morning: /morning/i,
    afternoon: /afternoon/i,
    evening: /evening/i,
    night: /night/i
  }
};
var match = {
  ordinalNumber: buildMatchPatternFn({
    matchPattern: matchOrdinalNumberPattern,
    parsePattern: parseOrdinalNumberPattern,
    valueCallback: (value) => parseInt(value, 10)
  }),
  era: buildMatchFn({
    matchPatterns: matchEraPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseEraPatterns,
    defaultParseWidth: "any"
  }),
  quarter: buildMatchFn({
    matchPatterns: matchQuarterPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseQuarterPatterns,
    defaultParseWidth: "any",
    valueCallback: (index2) => index2 + 1
  }),
  month: buildMatchFn({
    matchPatterns: matchMonthPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseMonthPatterns,
    defaultParseWidth: "any"
  }),
  day: buildMatchFn({
    matchPatterns: matchDayPatterns,
    defaultMatchWidth: "wide",
    parsePatterns: parseDayPatterns,
    defaultParseWidth: "any"
  }),
  dayPeriod: buildMatchFn({
    matchPatterns: matchDayPeriodPatterns,
    defaultMatchWidth: "any",
    parsePatterns: parseDayPeriodPatterns,
    defaultParseWidth: "any"
  })
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/locale/en-US.js
var enUS = {
  code: "en-US",
  formatDistance,
  formatLong,
  formatRelative,
  localize,
  match,
  options: {
    weekStartsOn: 0,
    firstWeekContainsDate: 1
  }
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISOWeek.js
function getISOWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfISOWeek(_date) - +startOfISOWeekYear(_date);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeekYear.js
function getWeekYear(date, options) {
  const _date = toDate(date, options?.in);
  const year = _date.getFullYear();
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions2.firstWeekContainsDate ?? defaultOptions2.locale?.options?.firstWeekContainsDate ?? 1;
  const firstWeekOfNextYear = constructFrom(options?.in || date, 0);
  firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
  firstWeekOfNextYear.setHours(0, 0, 0, 0);
  const startOfNextYear = startOfWeek(firstWeekOfNextYear, options);
  const firstWeekOfThisYear = constructFrom(options?.in || date, 0);
  firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
  firstWeekOfThisYear.setHours(0, 0, 0, 0);
  const startOfThisYear = startOfWeek(firstWeekOfThisYear, options);
  if (+_date >= +startOfNextYear) {
    return year + 1;
  } else if (+_date >= +startOfThisYear) {
    return year;
  } else {
    return year - 1;
  }
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/startOfWeekYear.js
function startOfWeekYear(date, options) {
  const defaultOptions2 = getDefaultOptions();
  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions2.firstWeekContainsDate ?? defaultOptions2.locale?.options?.firstWeekContainsDate ?? 1;
  const year = getWeekYear(date, options);
  const firstWeek = constructFrom(options?.in || date, 0);
  firstWeek.setFullYear(year, 0, firstWeekContainsDate);
  firstWeek.setHours(0, 0, 0, 0);
  const _date = startOfWeek(firstWeek, options);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getWeek.js
function getWeek(date, options) {
  const _date = toDate(date, options?.in);
  const diff = +startOfWeek(_date, options) - +startOfWeekYear(_date, options);
  return Math.round(diff / millisecondsInWeek) + 1;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/format/longFormatters.js
var dateLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "P":
      return formatLong2.date({ width: "short" });
    case "PP":
      return formatLong2.date({ width: "medium" });
    case "PPP":
      return formatLong2.date({ width: "long" });
    case "PPPP":
    default:
      return formatLong2.date({ width: "full" });
  }
};
var timeLongFormatter = (pattern, formatLong2) => {
  switch (pattern) {
    case "p":
      return formatLong2.time({ width: "short" });
    case "pp":
      return formatLong2.time({ width: "medium" });
    case "ppp":
      return formatLong2.time({ width: "long" });
    case "pppp":
    default:
      return formatLong2.time({ width: "full" });
  }
};
var dateTimeLongFormatter = (pattern, formatLong2) => {
  const matchResult = pattern.match(/(P+)(p+)?/) || [];
  const datePattern = matchResult[1];
  const timePattern = matchResult[2];
  if (!timePattern) {
    return dateLongFormatter(pattern, formatLong2);
  }
  let dateTimeFormat;
  switch (datePattern) {
    case "P":
      dateTimeFormat = formatLong2.dateTime({ width: "short" });
      break;
    case "PP":
      dateTimeFormat = formatLong2.dateTime({ width: "medium" });
      break;
    case "PPP":
      dateTimeFormat = formatLong2.dateTime({ width: "long" });
      break;
    case "PPPP":
    default:
      dateTimeFormat = formatLong2.dateTime({ width: "full" });
      break;
  }
  return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong2)).replace("{{time}}", timeLongFormatter(timePattern, formatLong2));
};
var longFormatters = {
  p: timeLongFormatter,
  P: dateTimeLongFormatter
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/_lib/protectedTokens.js
var dayOfYearTokenRE = /^D+$/;
var weekYearTokenRE = /^Y+$/;
var throwTokens = ["D", "DD", "YY", "YYYY"];
function isProtectedDayOfYearToken(token) {
  return dayOfYearTokenRE.test(token);
}
function isProtectedWeekYearToken(token) {
  return weekYearTokenRE.test(token);
}
function warnOrThrowProtectedError(token, format2, input2) {
  const _message = message(token, format2, input2);
  console.warn(_message);
  if (throwTokens.includes(token)) throw new RangeError(_message);
}
function message(token, format2, input2) {
  const subject = token[0] === "Y" ? "years" : "days of the month";
  return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format2}\`) for formatting ${subject} to the input \`${input2}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getDefaultOptions.js
function getDefaultOptions2() {
  return Object.assign({}, getDefaultOptions());
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/getISODay.js
function getISODay(date, options) {
  const day = toDate(date, options?.in).getDay();
  return day === 0 ? 7 : day;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isAfter.js
function isAfter(date, dateToCompare) {
  return +toDate(date) > +toDate(dateToCompare);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isBefore.js
function isBefore(date, dateToCompare) {
  return +toDate(date) < +toDate(dateToCompare);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/transpose.js
function transpose(date, constructor) {
  const date_ = isConstructor(constructor) ? new constructor(0) : constructFrom(constructor, 0);
  date_.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
  date_.setHours(
    date.getHours(),
    date.getMinutes(),
    date.getSeconds(),
    date.getMilliseconds()
  );
  return date_;
}
function isConstructor(constructor) {
  return typeof constructor === "function" && constructor.prototype?.constructor === constructor;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/Setter.js
var TIMEZONE_UNIT_PRIORITY = 10;
var Setter = class {
  subPriority = 0;
  validate(_utcDate, _options) {
    return true;
  }
};
var ValueSetter = class extends Setter {
  constructor(value, validateValue, setValue, priority, subPriority) {
    super();
    this.value = value;
    this.validateValue = validateValue;
    this.setValue = setValue;
    this.priority = priority;
    if (subPriority) {
      this.subPriority = subPriority;
    }
  }
  validate(date, options) {
    return this.validateValue(date, this.value, options);
  }
  set(date, flags, options) {
    return this.setValue(date, flags, this.value, options);
  }
};
var DateTimezoneSetter = class extends Setter {
  priority = TIMEZONE_UNIT_PRIORITY;
  subPriority = -1;
  constructor(context, reference) {
    super();
    this.context = context || ((date) => constructFrom(reference, date));
  }
  set(date, flags) {
    if (flags.timestampIsSet) return date;
    return constructFrom(date, transpose(date, this.context));
  }
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/Parser.js
var Parser = class {
  run(dateString, token, match2, options) {
    const result = this.parse(dateString, token, match2, options);
    if (!result) {
      return null;
    }
    return {
      setter: new ValueSetter(
        result.value,
        this.validate,
        this.set,
        this.priority,
        this.subPriority
      ),
      rest: result.rest
    };
  }
  validate(_utcDate, _value, _options) {
    return true;
  }
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/EraParser.js
var EraParser = class extends Parser {
  priority = 140;
  parse(dateString, token, match2) {
    switch (token) {
      // AD, BC
      case "G":
      case "GG":
      case "GGG":
        return match2.era(dateString, { width: "abbreviated" }) || match2.era(dateString, { width: "narrow" });
      // A, B
      case "GGGGG":
        return match2.era(dateString, { width: "narrow" });
      // Anno Domini, Before Christ
      case "GGGG":
      default:
        return match2.era(dateString, { width: "wide" }) || match2.era(dateString, { width: "abbreviated" }) || match2.era(dateString, { width: "narrow" });
    }
  }
  set(date, flags, value) {
    flags.era = value;
    date.setFullYear(value, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["R", "u", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/constants.js
var numericPatterns = {
  month: /^(1[0-2]|0?\d)/,
  // 0 to 12
  date: /^(3[0-1]|[0-2]?\d)/,
  // 0 to 31
  dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
  // 0 to 366
  week: /^(5[0-3]|[0-4]?\d)/,
  // 0 to 53
  hour23h: /^(2[0-3]|[0-1]?\d)/,
  // 0 to 23
  hour24h: /^(2[0-4]|[0-1]?\d)/,
  // 0 to 24
  hour11h: /^(1[0-1]|0?\d)/,
  // 0 to 11
  hour12h: /^(1[0-2]|0?\d)/,
  // 0 to 12
  minute: /^[0-5]?\d/,
  // 0 to 59
  second: /^[0-5]?\d/,
  // 0 to 59
  singleDigit: /^\d/,
  // 0 to 9
  twoDigits: /^\d{1,2}/,
  // 0 to 99
  threeDigits: /^\d{1,3}/,
  // 0 to 999
  fourDigits: /^\d{1,4}/,
  // 0 to 9999
  anyDigitsSigned: /^-?\d+/,
  singleDigitSigned: /^-?\d/,
  // 0 to 9, -0 to -9
  twoDigitsSigned: /^-?\d{1,2}/,
  // 0 to 99, -0 to -99
  threeDigitsSigned: /^-?\d{1,3}/,
  // 0 to 999, -0 to -999
  fourDigitsSigned: /^-?\d{1,4}/
  // 0 to 9999, -0 to -9999
};
var timezonePatterns = {
  basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
  basic: /^([+-])(\d{2})(\d{2})|Z/,
  basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
  extended: /^([+-])(\d{2}):(\d{2})|Z/,
  extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/utils.js
function mapValue(parseFnResult, mapFn) {
  if (!parseFnResult) {
    return parseFnResult;
  }
  return {
    value: mapFn(parseFnResult.value),
    rest: parseFnResult.rest
  };
}
function parseNumericPattern(pattern, dateString) {
  const matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  return {
    value: parseInt(matchResult[0], 10),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseTimezonePattern(pattern, dateString) {
  const matchResult = dateString.match(pattern);
  if (!matchResult) {
    return null;
  }
  if (matchResult[0] === "Z") {
    return {
      value: 0,
      rest: dateString.slice(1)
    };
  }
  const sign = matchResult[1] === "+" ? 1 : -1;
  const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
  const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
  const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
  return {
    value: sign * (hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * millisecondsInSecond),
    rest: dateString.slice(matchResult[0].length)
  };
}
function parseAnyDigitsSigned(dateString) {
  return parseNumericPattern(numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigit, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigits, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigits, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigits, dateString);
    default:
      return parseNumericPattern(new RegExp("^\\d{1," + n2 + "}"), dateString);
  }
}
function parseNDigitsSigned(n2, dateString) {
  switch (n2) {
    case 1:
      return parseNumericPattern(numericPatterns.singleDigitSigned, dateString);
    case 2:
      return parseNumericPattern(numericPatterns.twoDigitsSigned, dateString);
    case 3:
      return parseNumericPattern(numericPatterns.threeDigitsSigned, dateString);
    case 4:
      return parseNumericPattern(numericPatterns.fourDigitsSigned, dateString);
    default:
      return parseNumericPattern(new RegExp("^-?\\d{1," + n2 + "}"), dateString);
  }
}
function dayPeriodEnumToHours(dayPeriod) {
  switch (dayPeriod) {
    case "morning":
      return 4;
    case "evening":
      return 17;
    case "pm":
    case "noon":
    case "afternoon":
      return 12;
    case "am":
    case "midnight":
    case "night":
    default:
      return 0;
  }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
  const isCommonEra = currentYear > 0;
  const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
  let result;
  if (absCurrentYear <= 50) {
    result = twoDigitYear || 100;
  } else {
    const rangeEnd = absCurrentYear + 50;
    const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;
    const isPreviousCentury = twoDigitYear >= rangeEnd % 100;
    result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
  }
  return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
  return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/YearParser.js
var YearParser = class extends Parser {
  priority = 130;
  incompatibleTokens = ["Y", "R", "u", "w", "I", "i", "e", "c", "t", "T"];
  parse(dateString, token, match2) {
    const valueCallback = (year) => ({
      year,
      isTwoDigitYear: token === "yy"
    });
    switch (token) {
      case "y":
        return mapValue(parseNDigits(4, dateString), valueCallback);
      case "yo":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "year"
          }),
          valueCallback
        );
      default:
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  }
  validate(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  }
  set(date, flags, value) {
    const currentYear = date.getFullYear();
    if (value.isTwoDigitYear) {
      const normalizedTwoDigitYear = normalizeTwoDigitYear(
        value.year,
        currentYear
      );
      date.setFullYear(normalizedTwoDigitYear, 0, 1);
      date.setHours(0, 0, 0, 0);
      return date;
    }
    const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
    date.setFullYear(year, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/LocalWeekYearParser.js
var LocalWeekYearParser = class extends Parser {
  priority = 130;
  parse(dateString, token, match2) {
    const valueCallback = (year) => ({
      year,
      isTwoDigitYear: token === "YY"
    });
    switch (token) {
      case "Y":
        return mapValue(parseNDigits(4, dateString), valueCallback);
      case "Yo":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "year"
          }),
          valueCallback
        );
      default:
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
    }
  }
  validate(_date, value) {
    return value.isTwoDigitYear || value.year > 0;
  }
  set(date, flags, value, options) {
    const currentYear = getWeekYear(date, options);
    if (value.isTwoDigitYear) {
      const normalizedTwoDigitYear = normalizeTwoDigitYear(
        value.year,
        currentYear
      );
      date.setFullYear(
        normalizedTwoDigitYear,
        0,
        options.firstWeekContainsDate
      );
      date.setHours(0, 0, 0, 0);
      return startOfWeek(date, options);
    }
    const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
    date.setFullYear(year, 0, options.firstWeekContainsDate);
    date.setHours(0, 0, 0, 0);
    return startOfWeek(date, options);
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ISOWeekYearParser.js
var ISOWeekYearParser = class extends Parser {
  priority = 130;
  parse(dateString, token) {
    if (token === "R") {
      return parseNDigitsSigned(4, dateString);
    }
    return parseNDigitsSigned(token.length, dateString);
  }
  set(date, _flags, value) {
    const firstWeekOfYear = constructFrom(date, 0);
    firstWeekOfYear.setFullYear(value, 0, 4);
    firstWeekOfYear.setHours(0, 0, 0, 0);
    return startOfISOWeek(firstWeekOfYear);
  }
  incompatibleTokens = [
    "G",
    "y",
    "Y",
    "u",
    "Q",
    "q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ExtendedYearParser.js
var ExtendedYearParser = class extends Parser {
  priority = 130;
  parse(dateString, token) {
    if (token === "u") {
      return parseNDigitsSigned(4, dateString);
    }
    return parseNDigitsSigned(token.length, dateString);
  }
  set(date, _flags, value) {
    date.setFullYear(value, 0, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["G", "y", "Y", "R", "w", "I", "i", "e", "c", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/QuarterParser.js
var QuarterParser = class extends Parser {
  priority = 120;
  parse(dateString, token, match2) {
    switch (token) {
      // 1, 2, 3, 4
      case "Q":
      case "QQ":
        return parseNDigits(token.length, dateString);
      // 1st, 2nd, 3rd, 4th
      case "Qo":
        return match2.ordinalNumber(dateString, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "QQQ":
        return match2.quarter(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.quarter(dateString, {
          width: "narrow",
          context: "formatting"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "QQQQQ":
        return match2.quarter(dateString, {
          width: "narrow",
          context: "formatting"
        });
      // 1st quarter, 2nd quarter, ...
      case "QQQQ":
      default:
        return match2.quarter(dateString, {
          width: "wide",
          context: "formatting"
        }) || match2.quarter(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.quarter(dateString, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 4;
  }
  set(date, _flags, value) {
    date.setMonth((value - 1) * 3, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/StandAloneQuarterParser.js
var StandAloneQuarterParser = class extends Parser {
  priority = 120;
  parse(dateString, token, match2) {
    switch (token) {
      // 1, 2, 3, 4
      case "q":
      case "qq":
        return parseNDigits(token.length, dateString);
      // 1st, 2nd, 3rd, 4th
      case "qo":
        return match2.ordinalNumber(dateString, { unit: "quarter" });
      // Q1, Q2, Q3, Q4
      case "qqq":
        return match2.quarter(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.quarter(dateString, {
          width: "narrow",
          context: "standalone"
        });
      // 1, 2, 3, 4 (narrow quarter; could be not numerical)
      case "qqqqq":
        return match2.quarter(dateString, {
          width: "narrow",
          context: "standalone"
        });
      // 1st quarter, 2nd quarter, ...
      case "qqqq":
      default:
        return match2.quarter(dateString, {
          width: "wide",
          context: "standalone"
        }) || match2.quarter(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.quarter(dateString, {
          width: "narrow",
          context: "standalone"
        });
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 4;
  }
  set(date, _flags, value) {
    date.setMonth((value - 1) * 3, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/MonthParser.js
var MonthParser = class extends Parser {
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "L",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
  priority = 110;
  parse(dateString, token, match2) {
    const valueCallback = (value) => value - 1;
    switch (token) {
      // 1, 2, ..., 12
      case "M":
        return mapValue(
          parseNumericPattern(numericPatterns.month, dateString),
          valueCallback
        );
      // 01, 02, ..., 12
      case "MM":
        return mapValue(parseNDigits(2, dateString), valueCallback);
      // 1st, 2nd, ..., 12th
      case "Mo":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "month"
          }),
          valueCallback
        );
      // Jan, Feb, ..., Dec
      case "MMM":
        return match2.month(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.month(dateString, { width: "narrow", context: "formatting" });
      // J, F, ..., D
      case "MMMMM":
        return match2.month(dateString, {
          width: "narrow",
          context: "formatting"
        });
      // January, February, ..., December
      case "MMMM":
      default:
        return match2.month(dateString, { width: "wide", context: "formatting" }) || match2.month(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.month(dateString, { width: "narrow", context: "formatting" });
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 11;
  }
  set(date, _flags, value) {
    date.setMonth(value, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/StandAloneMonthParser.js
var StandAloneMonthParser = class extends Parser {
  priority = 110;
  parse(dateString, token, match2) {
    const valueCallback = (value) => value - 1;
    switch (token) {
      // 1, 2, ..., 12
      case "L":
        return mapValue(
          parseNumericPattern(numericPatterns.month, dateString),
          valueCallback
        );
      // 01, 02, ..., 12
      case "LL":
        return mapValue(parseNDigits(2, dateString), valueCallback);
      // 1st, 2nd, ..., 12th
      case "Lo":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "month"
          }),
          valueCallback
        );
      // Jan, Feb, ..., Dec
      case "LLL":
        return match2.month(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.month(dateString, { width: "narrow", context: "standalone" });
      // J, F, ..., D
      case "LLLLL":
        return match2.month(dateString, {
          width: "narrow",
          context: "standalone"
        });
      // January, February, ..., December
      case "LLLL":
      default:
        return match2.month(dateString, { width: "wide", context: "standalone" }) || match2.month(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.month(dateString, { width: "narrow", context: "standalone" });
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 11;
  }
  set(date, _flags, value) {
    date.setMonth(value, 1);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setWeek.js
function setWeek(date, week, options) {
  const date_ = toDate(date, options?.in);
  const diff = getWeek(date_, options) - week;
  date_.setDate(date_.getDate() - diff * 7);
  return toDate(date_, options?.in);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/LocalWeekParser.js
var LocalWeekParser = class extends Parser {
  priority = 100;
  parse(dateString, token, match2) {
    switch (token) {
      case "w":
        return parseNumericPattern(numericPatterns.week, dateString);
      case "wo":
        return match2.ordinalNumber(dateString, { unit: "week" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 53;
  }
  set(date, _flags, value, options) {
    return startOfWeek(setWeek(date, value, options), options);
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "i",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setISOWeek.js
function setISOWeek(date, week, options) {
  const _date = toDate(date, options?.in);
  const diff = getISOWeek(_date, options) - week;
  _date.setDate(_date.getDate() - diff * 7);
  return _date;
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ISOWeekParser.js
var ISOWeekParser = class extends Parser {
  priority = 100;
  parse(dateString, token, match2) {
    switch (token) {
      case "I":
        return parseNumericPattern(numericPatterns.week, dateString);
      case "Io":
        return match2.ordinalNumber(dateString, { unit: "week" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 53;
  }
  set(date, _flags, value) {
    return startOfISOWeek(setISOWeek(date, value));
  }
  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/DateParser.js
var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
var DAYS_IN_MONTH_LEAP_YEAR = [
  31,
  29,
  31,
  30,
  31,
  30,
  31,
  31,
  30,
  31,
  30,
  31
];
var DateParser = class extends Parser {
  priority = 90;
  subPriority = 1;
  parse(dateString, token, match2) {
    switch (token) {
      case "d":
        return parseNumericPattern(numericPatterns.date, dateString);
      case "do":
        return match2.ordinalNumber(dateString, { unit: "date" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(date, value) {
    const year = date.getFullYear();
    const isLeapYear2 = isLeapYearIndex(year);
    const month = date.getMonth();
    if (isLeapYear2) {
      return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
    } else {
      return value >= 1 && value <= DAYS_IN_MONTH[month];
    }
  }
  set(date, _flags, value) {
    date.setDate(value);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "w",
    "I",
    "D",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/DayOfYearParser.js
var DayOfYearParser = class extends Parser {
  priority = 90;
  subpriority = 1;
  parse(dateString, token, match2) {
    switch (token) {
      case "D":
      case "DD":
        return parseNumericPattern(numericPatterns.dayOfYear, dateString);
      case "Do":
        return match2.ordinalNumber(dateString, { unit: "date" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(date, value) {
    const year = date.getFullYear();
    const isLeapYear2 = isLeapYearIndex(year);
    if (isLeapYear2) {
      return value >= 1 && value <= 366;
    } else {
      return value >= 1 && value <= 365;
    }
  }
  set(date, _flags, value) {
    date.setMonth(0, value);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "Y",
    "R",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "I",
    "d",
    "E",
    "i",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setDay.js
function setDay(date, day, options) {
  const defaultOptions2 = getDefaultOptions();
  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions2.weekStartsOn ?? defaultOptions2.locale?.options?.weekStartsOn ?? 0;
  const date_ = toDate(date, options?.in);
  const currentDay = date_.getDay();
  const remainder = day % 7;
  const dayIndex = (remainder + 7) % 7;
  const delta = 7 - weekStartsOn;
  const diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;
  return addDays(date_, diff, options);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/DayParser.js
var DayParser = class extends Parser {
  priority = 90;
  parse(dateString, token, match2) {
    switch (token) {
      // Tue
      case "E":
      case "EE":
      case "EEE":
        return match2.day(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
      // T
      case "EEEEE":
        return match2.day(dateString, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "EEEEEE":
        return match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
      // Tuesday
      case "EEEE":
      default:
        return match2.day(dateString, { width: "wide", context: "formatting" }) || match2.day(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 6;
  }
  set(date, _flags, value, options) {
    date = setDay(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["D", "i", "e", "c", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/LocalDayParser.js
var LocalDayParser = class extends Parser {
  priority = 90;
  parse(dateString, token, match2, options) {
    const valueCallback = (value) => {
      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
    };
    switch (token) {
      // 3
      case "e":
      case "ee":
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
      // 3rd
      case "eo":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "day"
          }),
          valueCallback
        );
      // Tue
      case "eee":
        return match2.day(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
      // T
      case "eeeee":
        return match2.day(dateString, {
          width: "narrow",
          context: "formatting"
        });
      // Tu
      case "eeeeee":
        return match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
      // Tuesday
      case "eeee":
      default:
        return match2.day(dateString, { width: "wide", context: "formatting" }) || match2.day(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.day(dateString, { width: "short", context: "formatting" }) || match2.day(dateString, { width: "narrow", context: "formatting" });
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 6;
  }
  set(date, _flags, value, options) {
    date = setDay(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/StandAloneLocalDayParser.js
var StandAloneLocalDayParser = class extends Parser {
  priority = 90;
  parse(dateString, token, match2, options) {
    const valueCallback = (value) => {
      const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
      return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
    };
    switch (token) {
      // 3
      case "c":
      case "cc":
        return mapValue(parseNDigits(token.length, dateString), valueCallback);
      // 3rd
      case "co":
        return mapValue(
          match2.ordinalNumber(dateString, {
            unit: "day"
          }),
          valueCallback
        );
      // Tue
      case "ccc":
        return match2.day(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.day(dateString, { width: "short", context: "standalone" }) || match2.day(dateString, { width: "narrow", context: "standalone" });
      // T
      case "ccccc":
        return match2.day(dateString, {
          width: "narrow",
          context: "standalone"
        });
      // Tu
      case "cccccc":
        return match2.day(dateString, { width: "short", context: "standalone" }) || match2.day(dateString, { width: "narrow", context: "standalone" });
      // Tuesday
      case "cccc":
      default:
        return match2.day(dateString, { width: "wide", context: "standalone" }) || match2.day(dateString, {
          width: "abbreviated",
          context: "standalone"
        }) || match2.day(dateString, { width: "short", context: "standalone" }) || match2.day(dateString, { width: "narrow", context: "standalone" });
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 6;
  }
  set(date, _flags, value, options) {
    date = setDay(date, value, options);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "y",
    "R",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "I",
    "d",
    "D",
    "E",
    "i",
    "e",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/setISODay.js
function setISODay(date, day, options) {
  const date_ = toDate(date, options?.in);
  const currentDay = getISODay(date_, options);
  const diff = day - currentDay;
  return addDays(date_, diff, options);
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ISODayParser.js
var ISODayParser = class extends Parser {
  priority = 90;
  parse(dateString, token, match2) {
    const valueCallback = (value) => {
      if (value === 0) {
        return 7;
      }
      return value;
    };
    switch (token) {
      // 2
      case "i":
      case "ii":
        return parseNDigits(token.length, dateString);
      // 2nd
      case "io":
        return match2.ordinalNumber(dateString, { unit: "day" });
      // Tue
      case "iii":
        return mapValue(
          match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }),
          valueCallback
        );
      // T
      case "iiiii":
        return mapValue(
          match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }),
          valueCallback
        );
      // Tu
      case "iiiiii":
        return mapValue(
          match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }),
          valueCallback
        );
      // Tuesday
      case "iiii":
      default:
        return mapValue(
          match2.day(dateString, {
            width: "wide",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "abbreviated",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "short",
            context: "formatting"
          }) || match2.day(dateString, {
            width: "narrow",
            context: "formatting"
          }),
          valueCallback
        );
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 7;
  }
  set(date, _flags, value) {
    date = setISODay(date, value);
    date.setHours(0, 0, 0, 0);
    return date;
  }
  incompatibleTokens = [
    "y",
    "Y",
    "u",
    "q",
    "Q",
    "M",
    "L",
    "w",
    "d",
    "D",
    "E",
    "e",
    "c",
    "t",
    "T"
  ];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/AMPMParser.js
var AMPMParser = class extends Parser {
  priority = 80;
  parse(dateString, token, match2) {
    switch (token) {
      case "a":
      case "aa":
      case "aaa":
        return match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaaa":
        return match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "aaaa":
      default:
        return match2.dayPeriod(dateString, {
          width: "wide",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(date, _flags, value) {
    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["b", "B", "H", "k", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/AMPMMidnightParser.js
var AMPMMidnightParser = class extends Parser {
  priority = 80;
  parse(dateString, token, match2) {
    switch (token) {
      case "b":
      case "bb":
      case "bbb":
        return match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbbb":
        return match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "bbbb":
      default:
        return match2.dayPeriod(dateString, {
          width: "wide",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(date, _flags, value) {
    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["a", "B", "H", "k", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/DayPeriodParser.js
var DayPeriodParser = class extends Parser {
  priority = 80;
  parse(dateString, token, match2) {
    switch (token) {
      case "B":
      case "BB":
      case "BBB":
        return match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBBB":
        return match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
      case "BBBB":
      default:
        return match2.dayPeriod(dateString, {
          width: "wide",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "abbreviated",
          context: "formatting"
        }) || match2.dayPeriod(dateString, {
          width: "narrow",
          context: "formatting"
        });
    }
  }
  set(date, _flags, value) {
    date.setHours(dayPeriodEnumToHours(value), 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["a", "b", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/Hour1to12Parser.js
var Hour1to12Parser = class extends Parser {
  priority = 70;
  parse(dateString, token, match2) {
    switch (token) {
      case "h":
        return parseNumericPattern(numericPatterns.hour12h, dateString);
      case "ho":
        return match2.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 12;
  }
  set(date, _flags, value) {
    const isPM = date.getHours() >= 12;
    if (isPM && value < 12) {
      date.setHours(value + 12, 0, 0, 0);
    } else if (!isPM && value === 12) {
      date.setHours(0, 0, 0, 0);
    } else {
      date.setHours(value, 0, 0, 0);
    }
    return date;
  }
  incompatibleTokens = ["H", "K", "k", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/Hour0to23Parser.js
var Hour0to23Parser = class extends Parser {
  priority = 70;
  parse(dateString, token, match2) {
    switch (token) {
      case "H":
        return parseNumericPattern(numericPatterns.hour23h, dateString);
      case "Ho":
        return match2.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 23;
  }
  set(date, _flags, value) {
    date.setHours(value, 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["a", "b", "h", "K", "k", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/Hour0To11Parser.js
var Hour0To11Parser = class extends Parser {
  priority = 70;
  parse(dateString, token, match2) {
    switch (token) {
      case "K":
        return parseNumericPattern(numericPatterns.hour11h, dateString);
      case "Ko":
        return match2.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 11;
  }
  set(date, _flags, value) {
    const isPM = date.getHours() >= 12;
    if (isPM && value < 12) {
      date.setHours(value + 12, 0, 0, 0);
    } else {
      date.setHours(value, 0, 0, 0);
    }
    return date;
  }
  incompatibleTokens = ["h", "H", "k", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/Hour1To24Parser.js
var Hour1To24Parser = class extends Parser {
  priority = 70;
  parse(dateString, token, match2) {
    switch (token) {
      case "k":
        return parseNumericPattern(numericPatterns.hour24h, dateString);
      case "ko":
        return match2.ordinalNumber(dateString, { unit: "hour" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 1 && value <= 24;
  }
  set(date, _flags, value) {
    const hours = value <= 24 ? value % 24 : value;
    date.setHours(hours, 0, 0, 0);
    return date;
  }
  incompatibleTokens = ["a", "b", "h", "H", "K", "t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/MinuteParser.js
var MinuteParser = class extends Parser {
  priority = 60;
  parse(dateString, token, match2) {
    switch (token) {
      case "m":
        return parseNumericPattern(numericPatterns.minute, dateString);
      case "mo":
        return match2.ordinalNumber(dateString, { unit: "minute" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 59;
  }
  set(date, _flags, value) {
    date.setMinutes(value, 0, 0);
    return date;
  }
  incompatibleTokens = ["t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/SecondParser.js
var SecondParser = class extends Parser {
  priority = 50;
  parse(dateString, token, match2) {
    switch (token) {
      case "s":
        return parseNumericPattern(numericPatterns.second, dateString);
      case "so":
        return match2.ordinalNumber(dateString, { unit: "second" });
      default:
        return parseNDigits(token.length, dateString);
    }
  }
  validate(_date, value) {
    return value >= 0 && value <= 59;
  }
  set(date, _flags, value) {
    date.setSeconds(value, 0);
    return date;
  }
  incompatibleTokens = ["t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/FractionOfSecondParser.js
var FractionOfSecondParser = class extends Parser {
  priority = 30;
  parse(dateString, token) {
    const valueCallback = (value) => Math.trunc(value * Math.pow(10, -token.length + 3));
    return mapValue(parseNDigits(token.length, dateString), valueCallback);
  }
  set(date, _flags, value) {
    date.setMilliseconds(value);
    return date;
  }
  incompatibleTokens = ["t", "T"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneWithZParser.js
var ISOTimezoneWithZParser = class extends Parser {
  priority = 10;
  parse(dateString, token) {
    switch (token) {
      case "X":
        return parseTimezonePattern(
          timezonePatterns.basicOptionalMinutes,
          dateString
        );
      case "XX":
        return parseTimezonePattern(timezonePatterns.basic, dateString);
      case "XXXX":
        return parseTimezonePattern(
          timezonePatterns.basicOptionalSeconds,
          dateString
        );
      case "XXXXX":
        return parseTimezonePattern(
          timezonePatterns.extendedOptionalSeconds,
          dateString
        );
      case "XXX":
      default:
        return parseTimezonePattern(timezonePatterns.extended, dateString);
    }
  }
  set(date, flags, value) {
    if (flags.timestampIsSet) return date;
    return constructFrom(
      date,
      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value
    );
  }
  incompatibleTokens = ["t", "T", "x"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/ISOTimezoneParser.js
var ISOTimezoneParser = class extends Parser {
  priority = 10;
  parse(dateString, token) {
    switch (token) {
      case "x":
        return parseTimezonePattern(
          timezonePatterns.basicOptionalMinutes,
          dateString
        );
      case "xx":
        return parseTimezonePattern(timezonePatterns.basic, dateString);
      case "xxxx":
        return parseTimezonePattern(
          timezonePatterns.basicOptionalSeconds,
          dateString
        );
      case "xxxxx":
        return parseTimezonePattern(
          timezonePatterns.extendedOptionalSeconds,
          dateString
        );
      case "xxx":
      default:
        return parseTimezonePattern(timezonePatterns.extended, dateString);
    }
  }
  set(date, flags, value) {
    if (flags.timestampIsSet) return date;
    return constructFrom(
      date,
      date.getTime() - getTimezoneOffsetInMilliseconds(date) - value
    );
  }
  incompatibleTokens = ["t", "T", "X"];
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/TimestampSecondsParser.js
var TimestampSecondsParser = class extends Parser {
  priority = 40;
  parse(dateString) {
    return parseAnyDigitsSigned(dateString);
  }
  set(date, _flags, value) {
    return [constructFrom(date, value * 1e3), { timestampIsSet: true }];
  }
  incompatibleTokens = "*";
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers/TimestampMillisecondsParser.js
var TimestampMillisecondsParser = class extends Parser {
  priority = 20;
  parse(dateString) {
    return parseAnyDigitsSigned(dateString);
  }
  set(date, _flags, value) {
    return [constructFrom(date, value), { timestampIsSet: true }];
  }
  incompatibleTokens = "*";
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse/_lib/parsers.js
var parsers = {
  G: new EraParser(),
  y: new YearParser(),
  Y: new LocalWeekYearParser(),
  R: new ISOWeekYearParser(),
  u: new ExtendedYearParser(),
  Q: new QuarterParser(),
  q: new StandAloneQuarterParser(),
  M: new MonthParser(),
  L: new StandAloneMonthParser(),
  w: new LocalWeekParser(),
  I: new ISOWeekParser(),
  d: new DateParser(),
  D: new DayOfYearParser(),
  E: new DayParser(),
  e: new LocalDayParser(),
  c: new StandAloneLocalDayParser(),
  i: new ISODayParser(),
  a: new AMPMParser(),
  b: new AMPMMidnightParser(),
  B: new DayPeriodParser(),
  h: new Hour1to12Parser(),
  H: new Hour0to23Parser(),
  K: new Hour0To11Parser(),
  k: new Hour1To24Parser(),
  m: new MinuteParser(),
  s: new SecondParser(),
  S: new FractionOfSecondParser(),
  X: new ISOTimezoneWithZParser(),
  x: new ISOTimezoneParser(),
  t: new TimestampSecondsParser(),
  T: new TimestampMillisecondsParser()
};

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/parse.js
var formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var escapedStringRegExp = /^'([^]*?)'?$/;
var doubleQuoteRegExp = /''/g;
var notWhitespaceRegExp = /\S/;
var unescapedLatinCharacterRegExp = /[a-zA-Z]/;
function parse(dateStr, formatStr, referenceDate, options) {
  const invalidDate = () => constructFrom(options?.in || referenceDate, NaN);
  const defaultOptions2 = getDefaultOptions2();
  const locale = options?.locale ?? defaultOptions2.locale ?? enUS;
  const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions2.firstWeekContainsDate ?? defaultOptions2.locale?.options?.firstWeekContainsDate ?? 1;
  const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions2.weekStartsOn ?? defaultOptions2.locale?.options?.weekStartsOn ?? 0;
  if (!formatStr)
    return dateStr ? invalidDate() : toDate(referenceDate, options?.in);
  const subFnOptions = {
    firstWeekContainsDate,
    weekStartsOn,
    locale
  };
  const setters = [new DateTimezoneSetter(options?.in, referenceDate)];
  const tokens = formatStr.match(longFormattingTokensRegExp).map((substring) => {
    const firstCharacter = substring[0];
    if (firstCharacter in longFormatters) {
      const longFormatter = longFormatters[firstCharacter];
      return longFormatter(substring, locale.formatLong);
    }
    return substring;
  }).join("").match(formattingTokensRegExp);
  const usedTokens = [];
  for (let token of tokens) {
    if (!options?.useAdditionalWeekYearTokens && isProtectedWeekYearToken(token)) {
      warnOrThrowProtectedError(token, formatStr, dateStr);
    }
    if (!options?.useAdditionalDayOfYearTokens && isProtectedDayOfYearToken(token)) {
      warnOrThrowProtectedError(token, formatStr, dateStr);
    }
    const firstCharacter = token[0];
    const parser = parsers[firstCharacter];
    if (parser) {
      const { incompatibleTokens } = parser;
      if (Array.isArray(incompatibleTokens)) {
        const incompatibleToken = usedTokens.find(
          (usedToken) => incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter
        );
        if (incompatibleToken) {
          throw new RangeError(
            `The format string mustn't contain \`${incompatibleToken.fullToken}\` and \`${token}\` at the same time`
          );
        }
      } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) {
        throw new RangeError(
          `The format string mustn't contain \`${token}\` and any other token at the same time`
        );
      }
      usedTokens.push({ token: firstCharacter, fullToken: token });
      const parseResult = parser.run(
        dateStr,
        token,
        locale.match,
        subFnOptions
      );
      if (!parseResult) {
        return invalidDate();
      }
      setters.push(parseResult.setter);
      dateStr = parseResult.rest;
    } else {
      if (firstCharacter.match(unescapedLatinCharacterRegExp)) {
        throw new RangeError(
          "Format string contains an unescaped latin alphabet character `" + firstCharacter + "`"
        );
      }
      if (token === "''") {
        token = "'";
      } else if (firstCharacter === "'") {
        token = cleanEscapedString(token);
      }
      if (dateStr.indexOf(token) === 0) {
        dateStr = dateStr.slice(token.length);
      } else {
        return invalidDate();
      }
    }
  }
  if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) {
    return invalidDate();
  }
  const uniquePrioritySetters = setters.map((setter) => setter.priority).sort((a2, b) => b - a2).filter((priority, index2, array) => array.indexOf(priority) === index2).map(
    (priority) => setters.filter((setter) => setter.priority === priority).sort((a2, b) => b.subPriority - a2.subPriority)
  ).map((setterArray) => setterArray[0]);
  let date = toDate(referenceDate, options?.in);
  if (isNaN(+date)) return invalidDate();
  const flags = {};
  for (const setter of uniquePrioritySetters) {
    if (!setter.validate(date, subFnOptions)) {
      return invalidDate();
    }
    const result = setter.set(date, flags, subFnOptions);
    if (Array.isArray(result)) {
      date = result[0];
      Object.assign(flags, result[1]);
    } else {
      date = result;
    }
  }
  return date;
}
function cleanEscapedString(input2) {
  return input2.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

// node_modules/.pnpm/date-fns@4.1.0/node_modules/date-fns/isWithinInterval.js
function isWithinInterval(date, interval, options) {
  const time = +toDate(date, options?.in);
  const [startTime, endTime] = [
    +toDate(interval.start, options?.in),
    +toDate(interval.end, options?.in)
  ].sort((a2, b) => a2 - b);
  return time >= startTime && time <= endTime;
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte
Datepicker[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/datepicker/Datepicker.svelte";
var root_211 = add_locations(from_svg(`<svg class="h-3 w-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg>`), Datepicker[FILENAME], [[362, 4, [[363, 6]]]]);
var root_48 = add_locations(from_svg(`<svg class="h-3 w-3 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg>`), Datepicker[FILENAME], [[370, 4, [[371, 6]]]]);
var on_click = (__1, isOpen) => set(isOpen, !get(isOpen));
var root_55 = add_locations(from_html(`<div class="relative"><input/> <button type="button"><svg class="h-4 w-4 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path d="M20 4a2 2 0 0 0-2-2h-2V1a1 1 0 0 0-2 0v1h-3V1a1 1 0 0 0-2 0v1H6V1a1 1 0 0 0-2 0v1H2a2 2 0 0 0-2 2v2h20V4ZM0 18a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V8H0v10Zm5-8h10a1 1 0 0 1 0 2H5a1 1 0 0 1 0-2Z"></path></svg></button></div>`), Datepicker[FILENAME], [[378, 4, [[379, 6], [380, 6, [[381, 8, [[382, 10]]]]]]]]);
var root_72 = add_locations(from_html(`<h2> </h2>`), Datepicker[FILENAME], [[391, 8]]);
var root_83 = add_locations(from_html(`<div><!> <h3 aria-live="polite"> </h3> <!></div> <div class="grid grid-cols-4 gap-2 p-4"></div>`, 1), Datepicker[FILENAME], [[396, 8, [[398, 10]]], [403, 8]]);
var root_132 = add_locations(from_html(`<div role="columnheader"> </div>`), Datepicker[FILENAME], [[427, 12]]);
var root_11 = add_locations(from_html(`<div><!> <!> <!></div> <div role="grid"><!> <!></div>`, 1), Datepicker[FILENAME], [[418, 8], [425, 8]]);
var root_162 = add_locations(from_html(`<div><!> <!> <!></div>`), Datepicker[FILENAME], [[457, 8]]);
var root_20 = add_locations(from_html(`<div><!></div>`), Datepicker[FILENAME], [[465, 8]]);
var root_65 = add_locations(from_html(`<div id="datepicker-dropdown" role="dialog" aria-label="Calendar"><!> <!> <!> <!></div>`), Datepicker[FILENAME], [[389, 4]]);
var root18 = add_locations(from_html(`<div><!> <!></div>`), Datepicker[FILENAME], [[376, 0]]);
function Datepicker($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Datepicker);
  const navButton = wrap_snippet(Datepicker, function($$anchor2, forward = noop) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      let $0 = user_derived(() => forward() ? "Next month" : "Previous month");
      add_svelte_meta(
        () => ToolbarButton_default(node, {
          color: "dark",
          onclick: () => changeMonth(forward() ? 1 : -1),
          size: "lg",
          get "aria-label"() {
            return get($0);
          },
          children: wrap_snippet(Datepicker, ($$anchor3, $$slotProps) => {
            var svg = root_211();
            var path = child(svg);
            reset(svg);
            template_effect(() => set_attribute(path, "d", forward() ? "M1 5h12m0 0L9 1m4 4L9 9" : "M13 5H1m0 0 4 4M1 5l4-4"));
            append($$anchor3, svg);
          }),
          $$slots: { default: true }
        }),
        "component",
        Datepicker,
        361,
        2,
        { componentTag: "ToolbarButton" }
      );
    }
    append($$anchor2, fragment);
  });
  const yearNavButton = wrap_snippet(Datepicker, function($$anchor2, forward = noop) {
    validate_snippet_args(...arguments);
    var fragment_1 = comment();
    var node_1 = first_child(fragment_1);
    {
      let $0 = user_derived(() => forward() ? "Next year" : "Previous year");
      add_svelte_meta(
        () => ToolbarButton_default(node_1, {
          color: "dark",
          onclick: () => changeYear(forward() ? 1 : -1),
          size: "lg",
          get "aria-label"() {
            return get($0);
          },
          children: wrap_snippet(Datepicker, ($$anchor3, $$slotProps) => {
            var svg_1 = root_48();
            var path_1 = child(svg_1);
            reset(svg_1);
            template_effect(() => set_attribute(path_1, "d", forward() ? "M1 5h12m0 0L9 1m4 4L9 9" : "M13 5H1m0 0 4 4M1 5l4-4"));
            append($$anchor3, svg_1);
          }),
          $$slots: { default: true }
        }),
        "component",
        Datepicker,
        369,
        2,
        { componentTag: "ToolbarButton" }
      );
    }
    append($$anchor2, fragment_1);
  });
  let value = prop($$props, "value", 15), defaultDate = prop($$props, "defaultDate", 3, null), range2 = prop($$props, "range", 3, false), rangeFrom = prop($$props, "rangeFrom", 15), rangeTo = prop($$props, "rangeTo", 15), availableFrom = prop($$props, "availableFrom", 3, null), availableTo = prop($$props, "availableTo", 3, null), locale = prop($$props, "locale", 3, "default"), translationLocale = prop($$props, "translationLocale", 23, locale), firstDayOfWeek = prop($$props, "firstDayOfWeek", 3, 0), placeholder = prop($$props, "placeholder", 3, "Select date"), disabled = prop($$props, "disabled", 3, false), required = prop($$props, "required", 3, false), inputClass = prop($$props, "inputClass", 3, ""), color = prop($$props, "color", 3, "primary"), inline2 = prop($$props, "inline", 3, false), autohide = prop($$props, "autohide", 3, true), showActionButtons = prop($$props, "showActionButtons", 3, false), title = prop($$props, "title", 3, ""), inputmode = prop($$props, "inputmode", 3, "none"), monthColor = prop($$props, "monthColor", 3, "alternative"), monthBtnSelected = prop($$props, "monthBtnSelected", 3, "bg-primary-500 text-white"), monthBtn = prop($$props, "monthBtn", 3, "text-gray-700 dark:text-gray-300"), elementRef = prop($$props, "elementRef", 15), inputProps = prop($$props, "inputProps", 19, () => ({}));
  const theme = getTheme("datepicker");
  translationLocale(translationLocale() ?? locale());
  let isOpen = tag(state(proxy(inline2())), "isOpen");
  let showMonthSelector = tag(state(false), "showMonthSelector");
  let inputElement = tag(state(null), "inputElement");
  user_effect(() => {
    if (get(inputElement)) {
      elementRef(get(inputElement));
    }
  });
  let datepickerContainerElement;
  let currentMonth = tag(state(proxy(value() || defaultDate() || /* @__PURE__ */ new Date())), "currentMonth");
  let focusedDate = null;
  let calendarRef = tag(state(null), "calendarRef");
  let daysInMonth = tag(user_derived(() => getDaysInMonth2(get(currentMonth))), "daysInMonth");
  onMount(() => {
    if (!inline2()) {
      datepickerContainerElement?.ownerDocument.addEventListener("click", handleClickOutside);
      return () => {
        datepickerContainerElement?.ownerDocument.removeEventListener("click", handleClickOutside);
      };
    }
  });
  function getDaysInMonth2(date) {
    const monthStart = startOfMonth(date);
    const monthEnd = endOfMonth(date);
    const calendarStart = startOfWeek(monthStart, { weekStartsOn: firstDayOfWeek() });
    const calendarEnd = endOfWeek(monthEnd, { weekStartsOn: firstDayOfWeek() });
    return eachDayOfInterval({ start: calendarStart, end: calendarEnd });
  }
  const getWeekdayNames = () => {
    const referenceDate = new Date(1970, 0, 4 + firstDayOfWeek());
    return Array.from({ length: 7 }, (_, i2) => addDays(referenceDate, i2).toLocaleDateString(translationLocale(), { weekday: "short" }));
  };
  let weekdays = tag(user_derived(getWeekdayNames), "weekdays");
  const getMonthNames = () => {
    return Array.from({ length: 12 }, (_, i2) => new Date(2e3, i2, 1).toLocaleDateString(translationLocale(), { month: "short" }));
  };
  let monthNames = tag(user_derived(getMonthNames), "monthNames");
  const addDay = (date, increment) => addDays(date, increment);
  function changeMonth(increment) {
    set(currentMonth, new Date(get(currentMonth).getFullYear(), get(currentMonth).getMonth() + increment, 1), true);
  }
  function changeYear(increment) {
    set(currentMonth, new Date(get(currentMonth).getFullYear() + increment, get(currentMonth).getMonth(), 1), true);
  }
  function selectMonth(monthIndex, event2) {
    event2.stopPropagation();
    set(currentMonth, new Date(get(currentMonth).getFullYear(), monthIndex, 1), true);
    set(showMonthSelector, false);
  }
  function toggleMonthSelector(event2) {
    event2.stopPropagation();
    set(showMonthSelector, !get(showMonthSelector));
  }
  function isDateAvailable(date) {
    const dateOnly = new Date(date.getFullYear(), date.getMonth(), date.getDate());
    if (availableFrom()) {
      const fromDate = new Date(availableFrom().getFullYear(), availableFrom().getMonth(), availableFrom().getDate());
      if (dateOnly < fromDate) return false;
    }
    if (availableTo()) {
      const toDate2 = new Date(availableTo().getFullYear(), availableTo().getMonth(), availableTo().getDate());
      if (dateOnly > toDate2) return false;
    }
    return true;
  }
  function handleDaySelect(day) {
    if (!isDateAvailable(day)) return;
    if (range2()) {
      if (!rangeFrom() || rangeFrom() && rangeTo()) {
        rangeFrom(day);
        rangeTo(void 0);
      } else if (day < rangeFrom()) {
        rangeFrom(day);
        rangeTo(rangeFrom());
      } else {
        rangeTo(day);
      }
      $$props.onselect?.({ from: rangeFrom(), to: rangeTo() });
    } else {
      value(day);
      $$props.onselect?.(value());
      if (autohide() && !inline2()) set(isOpen, false);
    }
  }
  function handleInputChangeWithDateFns() {
    const inputValue = get(inputElement)?.value?.trim();
    if (!inputValue) {
      rangeFrom(void 0);
      rangeTo(void 0);
      get(inputElement)?.setCustomValidity("");
      return;
    }
    get(inputElement)?.setCustomValidity("");
    if (range2()) {
      const parts = inputValue.split(" - ");
      if (strict_equals(parts.length, 2)) {
        const parsedFrom = tryParseDate(parts[0]);
        const parsedTo = tryParseDate(parts[1]);
        if (parsedFrom && isValid(parsedFrom) && isDateAvailable(parsedFrom) && parsedTo && isValid(parsedTo) && isDateAvailable(parsedTo)) {
          (($$value) => {
            var $$array = to_array($$value, 2);
            rangeFrom($$array[0]);
            rangeTo($$array[1]);
          })(parsedFrom > parsedTo ? [parsedTo, parsedFrom] : [parsedFrom, parsedTo]);
          $$props.onselect?.({ from: rangeFrom(), to: rangeTo() });
          return;
        } else {
          get(inputElement)?.setCustomValidity(`Please enter date range in format: ${getDateFormatPattern()} - ${getDateFormatPattern()}`);
          return;
        }
      }
    }
    const parsedDate = tryParseDate(inputValue);
    if (!parsedDate || !isValid(parsedDate)) {
      const formatPattern = getDateFormatPattern();
      get(inputElement)?.setCustomValidity(`Please enter date in format: ${formatPattern}`);
      return;
    }
    if (!isDateAvailable(parsedDate)) {
      get(inputElement)?.setCustomValidity("Selected date is not available");
      return;
    }
    handleDaySelect(parsedDate);
  }
  function tryParseDate(inputValue) {
    const formatPattern = getDateFormatPattern();
    try {
      const parsedDate = parse(inputValue, formatPattern, /* @__PURE__ */ new Date());
      if (isValid(parsedDate)) {
        return parsedDate;
      }
    } catch (error) {
    }
    const commonFormats = [
      "d.M.yyyy",
      // German: 17.7.2025
      "dd.MM.yyyy",
      // German: 17.07.2025
      "M/d/yyyy",
      // US: 7/17/2025
      "MM/dd/yyyy",
      // US: 07/17/2025
      "d/M/yyyy",
      // UK: 17/7/2025
      "dd/MM/yyyy",
      // UK: 17/07/2025
      "yyyy-MM-dd",
      // ISO: 2025-07-17
      "yyyy-M-d",
      // ISO: 2025-7-17
      "M-d-yyyy",
      // US with dashes: 7-17-2025
      "d-M-yyyy"
      // EU with dashes: 17-7-2025
    ];
    for (const format2 of commonFormats) {
      try {
        const parsedDate = parse(inputValue, format2, /* @__PURE__ */ new Date());
        if (isValid(parsedDate)) {
          return parsedDate;
        }
      } catch (error) {
      }
    }
    try {
      const nativeDate = new Date(inputValue);
      if (isValid(nativeDate) && !isNaN(nativeDate.getTime())) {
        return nativeDate;
      }
    } catch (error) {
    }
    return null;
  }
  function getDateFormatPattern() {
    const actualLocale = strict_equals(locale(), "default") ? navigator.language : locale();
    const testDate = new Date(2025, 0, 15);
    const formatted = testDate.toLocaleDateString(actualLocale, $$props.dateFormat || { year: "numeric", month: "numeric", day: "numeric" });
    if (formatted.includes(".")) {
      if (formatted.startsWith("15.")) {
        return "d.M.yyyy";
      } else if (formatted.startsWith("01.")) {
        return "M.d.yyyy";
      }
      return "d.M.yyyy";
    } else if (formatted.includes("/")) {
      if (formatted.startsWith("1/")) {
        return "M/d/yyyy";
      } else if (formatted.startsWith("15/")) {
        return "d/M/yyyy";
      }
      const testDate2 = new Date(2025, 11, 3);
      const formatted2 = testDate2.toLocaleDateString(actualLocale, $$props.dateFormat || { year: "numeric", month: "numeric", day: "numeric" });
      if (formatted2.startsWith("3/") || formatted2.startsWith("03/")) {
        return "d/M/yyyy";
      } else {
        return "M/d/yyyy";
      }
    } else if (formatted.includes("-")) {
      if (formatted.startsWith("2025-")) {
        return "yyyy-M-d";
      } else if (formatted.startsWith("1-")) {
        return "M-d-yyyy";
      } else {
        return "d-M-yyyy";
      }
    }
    if (actualLocale.startsWith("en-US")) {
      return "M/d/yyyy";
    } else if (actualLocale.startsWith("de") || actualLocale.startsWith("at") || actualLocale.startsWith("ch")) {
      return "d.M.yyyy";
    } else if (actualLocale.startsWith("en-GB") || actualLocale.startsWith("en-AU")) {
      return "d/M/yyyy";
    }
    return "M/d/yyyy";
  }
  function handleClickOutside(event2) {
    if (get(isOpen) && datepickerContainerElement && !datepickerContainerElement.contains(event2.target)) {
      set(isOpen, false);
      set(showMonthSelector, false);
    }
  }
  const formatDate = (date) => date?.toLocaleDateString(locale(), $$props.dateFormat) ?? "";
  const isSameDate = (date1, date2) => date1 && date2 ? isSameDay(date1, date2) : false;
  const isToday = (day) => isSameDate(day, /* @__PURE__ */ new Date());
  const isInRange = (day) => !!(range2() && rangeFrom() && rangeTo() && isWithinInterval(day, { start: rangeFrom(), end: rangeTo() }));
  let isSelected = tag(
    user_derived(() => (day) => range2() ? isSameDate(day, rangeFrom()) || isSameDate(day, rangeTo()) : isSameDate(day, value())),
    "isSelected"
  );
  function handleCalendarKeydown(event2) {
    if (!get(isOpen)) return;
    if (!focusedDate) {
      focusedDate = value() || /* @__PURE__ */ new Date();
    }
    switch (event2.key) {
      case "ArrowLeft":
        focusedDate = addDay(focusedDate, -1);
        break;
      case "ArrowRight":
        focusedDate = addDay(focusedDate, 1);
        break;
      case "ArrowUp":
        focusedDate = addDay(focusedDate, -7);
        break;
      case "ArrowDown":
        focusedDate = addDay(focusedDate, 7);
        break;
      case "Enter":
        if (range2()) {
          if (rangeFrom() && rangeTo()) {
            if (autohide() && !inline2()) set(isOpen, false);
          } else {
            handleDaySelect(focusedDate);
          }
        } else {
          handleDaySelect(focusedDate);
          if (autohide() && !inline2()) set(isOpen, false);
        }
        break;
      case "Escape":
        set(isOpen, false);
        set(showMonthSelector, false);
        get(inputElement)?.focus();
        break;
      default:
        return;
    }
    event2.preventDefault();
    if (strict_equals(focusedDate.getMonth(), get(currentMonth).getMonth(), false)) {
      set(currentMonth, new Date(focusedDate.getFullYear(), focusedDate.getMonth(), 1), true);
    }
    setTimeout(
      () => {
        const focusedButton = get(calendarRef)?.querySelector(`button[aria-label="${focusedDate.toLocaleDateString(translationLocale(), {
          weekday: "long",
          year: "numeric",
          month: "long",
          day: "numeric"
        })}"]`);
        focusedButton?.focus();
      },
      0
    );
  }
  function handleInputKeydown(event2) {
    if (strict_equals(event2.key, "Enter")) {
      event2.preventDefault();
      handleInputChangeWithDateFns();
      if (autohide() && !inline2()) {
        set(isOpen, false);
      }
    } else if (strict_equals(event2.key, " ")) {
      event2.preventDefault();
      set(isOpen, !get(isOpen));
    }
  }
  function handleClear() {
    value(rangeFrom(rangeTo(void 0)));
    $$props.onclear?.();
  }
  function handleApply() {
    const result = range2() ? { from: rangeFrom(), to: rangeTo() } : value();
    if (result) $$props.onapply?.(result);
    if (!inline2()) set(isOpen, false);
  }
  let {
    base,
    input: input2,
    button: button2,
    titleVariant,
    actionButtons,
    columnHeader,
    polite,
    grid,
    nav,
    dayButton,
    monthButton
  } = datepicker();
  var $$exports = { ...legacy_api() };
  var div = root18();
  var node_2 = child(div);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_55();
      var input_1 = child(div_1);
      var event_handler = () => set(isOpen, true);
      attribute_effect(
        input_1,
        ($0, $1) => ({
          ...inputProps(),
          type: "text",
          class: $0,
          placeholder: placeholder(),
          value: $1,
          onfocus: event_handler,
          onchange: handleInputChangeWithDateFns,
          onkeydown: handleInputKeydown,
          disabled: disabled(),
          required: required(),
          inputmode: inputmode(),
          "aria-haspopup": "dialog"
        }),
        [
          () => input2({ color: color(), class: clsx_default(theme?.input, inputClass()) }),
          () => range2() ? `${formatDate(rangeFrom())} - ${formatDate(rangeTo())}` : formatDate(value())
        ],
        void 0,
        void 0,
        true
      );
      bind_this(input_1, ($$value) => set(inputElement, $$value), () => get(inputElement));
      var button_1 = sibling(input_1, 2);
      button_1.__click = [on_click, isOpen];
      reset(div_1);
      template_effect(
        ($0) => {
          set_class(button_1, 1, $0);
          button_1.disabled = disabled();
          set_attribute(button_1, "aria-label", get(isOpen) ? "Close date picker" : "Open date picker");
        },
        [
          () => clsx2(button2({
            class: clsx_default($$props.btnClass, theme?.button, $$props.classes?.button)
          }))
        ]
      );
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (!inline2()) $$render(consequent);
      }),
      "if",
      Datepicker,
      377,
      2
    );
  }
  var node_3 = sibling(node_2, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var div_2 = root_65();
      var node_4 = child(div_2);
      {
        var consequent_1 = ($$anchor3) => {
          var h2 = root_72();
          var text2 = child(h2, true);
          reset(h2);
          template_effect(
            ($0) => {
              set_class(h2, 1, $0);
              set_text(text2, title());
            },
            [
              () => clsx2(titleVariant({
                class: clsx_default(theme?.titleVariant, $$props.classes?.titleVariant)
              }))
            ]
          );
          append($$anchor3, h2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (title()) $$render(consequent_1);
          }),
          "if",
          Datepicker,
          390,
          6
        );
      }
      var node_5 = sibling(node_4, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = root_83();
          var div_3 = first_child(fragment_2);
          var node_6 = child(div_3);
          add_svelte_meta(() => yearNavButton(node_6, () => false), "render", Datepicker, 397, 10);
          var h3 = sibling(node_6, 2);
          var text_1 = child(h3, true);
          reset(h3);
          var node_7 = sibling(h3, 2);
          add_svelte_meta(() => yearNavButton(node_7, () => true), "render", Datepicker, 401, 10);
          reset(div_3);
          var div_4 = sibling(div_3, 2);
          add_svelte_meta(
            () => each(div_4, 21, () => get(monthNames), index, ($$anchor4, month, index2) => {
              var fragment_3 = comment();
              var node_8 = first_child(fragment_3);
              {
                let $0 = user_derived(() => monthButton({
                  class: clsx_default(strict_equals(get(currentMonth).getMonth(), index2) ? monthBtnSelected() : monthBtn(), $$props.classes?.monthButton, theme?.monthButton)
                }));
                add_svelte_meta(
                  () => Button_default(node_8, {
                    type: "button",
                    get color() {
                      return monthColor();
                    },
                    get class() {
                      return get($0);
                    },
                    onclick: (event2) => selectMonth(index2, event2),
                    children: wrap_snippet(Datepicker, ($$anchor5, $$slotProps) => {
                      next();
                      var text_2 = text();
                      template_effect(() => set_text(text_2, get(month)));
                      append($$anchor5, text_2);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Datepicker,
                  405,
                  12,
                  { componentTag: "Button" }
                );
              }
              append($$anchor4, fragment_3);
            }),
            "each",
            Datepicker,
            404,
            10
          );
          reset(div_4);
          template_effect(
            ($0, $1, $2) => {
              set_class(div_3, 1, $0);
              set_class(h3, 1, $1);
              set_text(text_1, $2);
            },
            [
              () => clsx2(nav({ class: clsx_default(theme?.nav, $$props.classes?.nav) })),
              () => clsx2(polite({ class: clsx_default(theme?.polite, $$props.classes?.polite) })),
              () => get(currentMonth).getFullYear()
            ]
          );
          append($$anchor3, fragment_2);
        };
        var alternate = ($$anchor3) => {
          var fragment_5 = root_11();
          var div_5 = first_child(fragment_5);
          var node_9 = child(div_5);
          add_svelte_meta(() => navButton(node_9, () => false), "render", Datepicker, 419, 10);
          var node_10 = sibling(node_9, 2);
          {
            let $0 = user_derived(() => polite({
              class: clsx_default("cursor-pointer rounded px-2 py-1 hover:bg-gray-100 dark:hover:bg-gray-700", $$props.classes?.polite)
            }));
            add_svelte_meta(
              () => Button_default(node_10, {
                type: "button",
                get class() {
                  return get($0);
                },
                "aria-live": "polite",
                onclick: (event2) => toggleMonthSelector(event2),
                children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
                  next();
                  var text_3 = text();
                  template_effect(($02) => set_text(text_3, $02), [
                    () => get(currentMonth).toLocaleString(translationLocale(), { month: "long", year: "numeric" })
                  ]);
                  append($$anchor4, text_3);
                }),
                $$slots: { default: true }
              }),
              "component",
              Datepicker,
              420,
              10,
              { componentTag: "Button" }
            );
          }
          var node_11 = sibling(node_10, 2);
          add_svelte_meta(() => navButton(node_11, () => true), "render", Datepicker, 423, 10);
          reset(div_5);
          var div_6 = sibling(div_5, 2);
          var node_12 = child(div_6);
          add_svelte_meta(
            () => each(node_12, 17, () => get(weekdays), index, ($$anchor4, day) => {
              var div_7 = root_132();
              var text_4 = child(div_7, true);
              reset(div_7);
              template_effect(
                ($0) => {
                  set_class(div_7, 1, $0);
                  set_text(text_4, get(day));
                },
                [
                  () => clsx2(columnHeader({
                    class: clsx_default(theme?.columnHeader, $$props.classes?.columnHeader)
                  }))
                ]
              );
              append($$anchor4, div_7);
            }),
            "each",
            Datepicker,
            426,
            10
          );
          var node_13 = sibling(node_12, 2);
          add_svelte_meta(
            () => each(node_13, 17, () => get(daysInMonth), index, ($$anchor4, day) => {
              const current = tag(user_derived(() => strict_equals(get(day).getMonth(), get(currentMonth).getMonth(), false)), "current");
              get(current);
              const available = tag(user_derived(() => isDateAvailable(get(day))), "available");
              get(available);
              var fragment_7 = comment();
              var node_14 = first_child(fragment_7);
              {
                let $0 = user_derived(() => get(isSelected)(get(day)) ? color() : "alternative");
                let $1 = user_derived(() => dayButton({
                  current: get(current),
                  today: isToday(get(day)),
                  color: isInRange(get(day)) ? color() : void 0,
                  unavailable: !get(available),
                  class: clsx_default(theme?.dayButton, $$props.classes?.dayButton, !get(available) && "cursor-not-allowed opacity-50")
                }));
                let $2 = user_derived(() => get(day).toLocaleDateString(translationLocale(), {
                  weekday: "long",
                  year: "numeric",
                  month: "long",
                  day: "numeric"
                }));
                let $3 = user_derived(() => get(isSelected)(get(day)));
                let $4 = user_derived(() => !get(available));
                let $5 = user_derived(() => !get(available));
                add_svelte_meta(
                  () => Button_default(node_14, {
                    type: "button",
                    get color() {
                      return get($0);
                    },
                    get class() {
                      return get($1);
                    },
                    onclick: () => handleDaySelect(get(day)),
                    onkeydown: handleCalendarKeydown,
                    get "aria-label"() {
                      return get($2);
                    },
                    get "aria-selected"() {
                      return get($3);
                    },
                    get "aria-disabled"() {
                      return get($4);
                    },
                    get disabled() {
                      return get($5);
                    },
                    role: "gridcell",
                    children: wrap_snippet(Datepicker, ($$anchor5, $$slotProps) => {
                      next();
                      var text_5 = text();
                      template_effect(($02) => set_text(text_5, $02), [() => get(day).getDate()]);
                      append($$anchor5, text_5);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Datepicker,
                  432,
                  12,
                  { componentTag: "Button" }
                );
              }
              append($$anchor4, fragment_7);
            }),
            "each",
            Datepicker,
            429,
            10
          );
          reset(div_6);
          template_effect(
            ($0, $1) => {
              set_class(div_5, 1, $0);
              set_class(div_6, 1, $1);
            },
            [
              () => clsx2(nav({ class: clsx_default($$props.classes?.nav) })),
              () => clsx2(grid({ class: clsx_default(theme?.grid, $$props.classes?.grid) }))
            ]
          );
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (get(showMonthSelector)) $$render(consequent_2);
            else $$render(alternate, false);
          }),
          "if",
          Datepicker,
          394,
          6
        );
      }
      var node_15 = sibling(node_5, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var div_8 = root_162();
          var node_16 = child(div_8);
          {
            let $0 = user_derived(() => !isDateAvailable(/* @__PURE__ */ new Date()));
            add_svelte_meta(
              () => Button_default(node_16, {
                onclick: () => handleDaySelect(/* @__PURE__ */ new Date()),
                get color() {
                  return color();
                },
                size: "sm",
                get disabled() {
                  return get($0);
                },
                children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
                  next();
                  var text_6 = text("Today");
                  append($$anchor4, text_6);
                }),
                $$slots: { default: true }
              }),
              "component",
              Datepicker,
              458,
              10,
              { componentTag: "Button" }
            );
          }
          var node_17 = sibling(node_16, 2);
          add_svelte_meta(
            () => Button_default(node_17, {
              onclick: handleClear,
              color: "red",
              size: "sm",
              children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
                next();
                var text_7 = text("Clear");
                append($$anchor4, text_7);
              }),
              $$slots: { default: true }
            }),
            "component",
            Datepicker,
            459,
            10,
            { componentTag: "Button" }
          );
          var node_18 = sibling(node_17, 2);
          add_svelte_meta(
            () => Button_default(node_18, {
              onclick: handleApply,
              get color() {
                return color();
              },
              size: "sm",
              children: wrap_snippet(Datepicker, ($$anchor4, $$slotProps) => {
                next();
                var text_8 = text("Apply");
                append($$anchor4, text_8);
              }),
              $$slots: { default: true }
            }),
            "component",
            Datepicker,
            460,
            10,
            { componentTag: "Button" }
          );
          reset(div_8);
          template_effect(($0) => set_class(div_8, 1, $0), [
            () => clsx2(actionButtons({
              class: clsx_default(theme?.actionButtons, $$props.classes?.actionButtons)
            }))
          ]);
          append($$anchor3, div_8);
        };
        add_svelte_meta(
          () => if_block(node_15, ($$render) => {
            if (showActionButtons() && !get(showMonthSelector)) $$render(consequent_3);
          }),
          "if",
          Datepicker,
          456,
          6
        );
      }
      var node_19 = sibling(node_15, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var div_9 = root_20();
          var node_20 = child(div_9);
          add_svelte_meta(
            () => snippet(node_20, () => $$props.actionSlot, () => ({
              selectedDate: range2() ? { from: rangeFrom(), to: rangeTo() } : value(),
              handleClear,
              handleApply,
              close: () => {
                set(isOpen, false);
                set(showMonthSelector, false);
              }
            })),
            "render",
            Datepicker,
            466,
            10
          );
          reset(div_9);
          template_effect(($0) => set_class(div_9, 1, $0), [
            () => clsx2(clsx_default($$props.classes?.actionSlot, theme?.actionSlot))
          ]);
          append($$anchor3, div_9);
        };
        add_svelte_meta(
          () => if_block(node_19, ($$render) => {
            if ($$props.actionSlot) $$render(consequent_4);
          }),
          "if",
          Datepicker,
          464,
          6
        );
      }
      reset(div_2);
      bind_this(div_2, ($$value) => set(calendarRef, $$value), () => get(calendarRef));
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(base({ inline: inline2(), class: clsx_default(theme?.base, $$props.class) }))
      ]);
      transition(3, div_2, () => fade, () => ({ duration: 100 }));
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if (get(isOpen) || inline2()) $$render(consequent_5);
      }),
      "if",
      Datepicker,
      388,
      2
    );
  }
  reset(div);
  bind_this(div, ($$value) => datepickerContainerElement = $$value, () => datepickerContainerElement);
  template_effect(() => set_class(div, 1, clsx2(["relative", inline2() && "inline-block"])));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Datepicker = hmr(Datepicker, () => Datepicker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Datepicker[HMR].source;
    set(Datepicker[HMR].source, module.default[HMR].original);
  });
}
var Datepicker_default = Datepicker;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/theme.js
var android = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-xl h-[600px] w-[300px] shadow-xl",
    slot: "rounded-xl overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute",
    leftTop: "h-[32px] w-[3px] bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftMid: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var defaultMockup = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px]",
    slot: "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftTop: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var desktop = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[16px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]",
    inner: "rounded-xl overflow-hidden h-[140px] md:h-[262px]",
    bot: "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl h-[24px] max-w-[301px] md:h-[42px] md:max-w-[512px]",
    botUnder: "relative mx-auto bg-gray-800 rounded-b-xl h-[55px] max-w-[83px] md:h-[95px] md:max-w-[142px]"
  }
});
var ios = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[600px] w-[300px] shadow-xl",
    slot: "rounded-[2rem] overflow-hidden w-[272px] h-[572px] bg-white dark:bg-gray-800",
    top: "w-[148px] h-[18px] bg-gray-800 top-0 rounded-b-[1rem] left-1/2 -translate-x-1/2 absolute",
    leftTop: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});
var laptop = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[8px] rounded-t-xl h-[172px] max-w-[301px] md:h-[294px] md:max-w-[512px]",
    inner: "rounded-lg overflow-hidden h-[156px] md:h-[278px] bg-white dark:bg-gray-800",
    bot: "relative mx-auto bg-gray-900 dark:bg-gray-700 rounded-b-xl rounded-t-sm h-[17px] max-w-[351px] md:h-[21px] md:max-w-[597px]",
    botCen: "absolute left-1/2 top-0 -translate-x-1/2 rounded-b-xl w-[56px] h-[5px] md:w-[96px] md:h-[8px] bg-gray-800"
  }
});
var smartwatch = T({
  slots: {
    base: "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-t-[2.5rem] h-[63px] max-w-[133px]",
    slot: "rounded-[2rem] overflow-hidden h-[193px] w-[188px]",
    rightTop: "h-[41px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[40px] rounded-r-lg",
    rightBot: "h-[32px] w-[6px] bg-gray-800 dark:bg-gray-800 absolute -right-[16px] top-[88px] rounded-r-lg",
    top: "relative mx-auto border-gray-900 dark:bg-gray-800 dark:border-gray-800 border-[10px] rounded-[2.5rem] h-[213px] w-[208px]",
    bot: "relative mx-auto bg-gray-800 dark:bg-gray-700 rounded-b-[2.5rem] h-[63px] max-w-[133px]"
  }
});
var tablet = T({
  slots: {
    base: "relative mx-auto border-gray-800 dark:border-gray-800 bg-gray-800 border-[14px] rounded-[2.5rem] h-[454px] max-w-[341px] md:h-[682px] md:max-w-[512px]",
    slot: "rounded-[2rem] overflow-hidden h-[426px] md:h-[654px] bg-white dark:bg-gray-800",
    leftTop: "h-[32px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[72px] rounded-l-lg",
    leftMid: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[124px] rounded-l-lg",
    leftBot: "h-[46px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -left-[17px] top-[178px] rounded-l-lg",
    right: "h-[64px] w-[3px] bg-gray-800 dark:bg-gray-800 absolute -right-[17px] top-[142px] rounded-r-lg"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Android.svelte
Android[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Android.svelte";
var root19 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Android[FILENAME], [
  [
    25,
    0,
    [[26, 2], [27, 2], [28, 2], [29, 2], [30, 2], [31, 2]]
  ]
]);
function Android($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Android);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class",
      "div7Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Android",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class,
      div5Class: $$props.div5Class,
      div6Class: $$props.div6Class,
      div7Class: $$props.div7Class
    },
    {
      divClass: "class",
      div2Class: "top",
      div3Class: "leftTop",
      div4Class: "leftMid",
      div5Class: "leftBot",
      div6Class: "right",
      div7Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      top: $$props.div2Class,
      leftTop: $$props.div3Class,
      leftMid: $$props.div4Class,
      leftBot: $$props.div5Class,
      right: $$props.div6Class,
      slot: $$props.div7Class
    }),
    "styling"
  );
  const { base, slot, top, leftTop, leftMid, leftBot, right } = android();
  var $$exports = { ...legacy_api() };
  var div = root19();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => base({ class: clsx_default($$props.class ?? $$props.divClass) })
  ]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var node = child(div_6);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Android, 33, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Android,
      32,
      4
    );
  }
  reset(div_6);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx2(top({ class: clsx_default(get(styling).top) })),
      () => clsx2(leftTop({ class: clsx_default(get(styling).leftTop) })),
      () => clsx2(leftMid({ class: clsx_default(get(styling).leftMid) })),
      () => clsx2(leftBot({ class: clsx_default(get(styling).leftBot) })),
      () => clsx2(right({ class: clsx_default(get(styling).right) })),
      () => clsx2(slot({ class: clsx_default(get(styling).slot) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Android = hmr(Android, () => Android[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Android[HMR].source;
    set(Android[HMR].source, module.default[HMR].original);
  });
}
var Android_default = Android;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte
DefaultMockup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/DefaultMockup.svelte";
var root20 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), DefaultMockup[FILENAME], [[23, 0, [[24, 2], [25, 2], [26, 2], [27, 2], [28, 2]]]]);
function DefaultMockup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DefaultMockup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "DefaultMockup",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class,
      div5Class: $$props.div5Class,
      div6Class: $$props.div6Class
    },
    {
      divClass: "class",
      div2Class: "top",
      div3Class: "leftTop",
      div4Class: "leftBot",
      div5Class: "right",
      div6Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      top: $$props.div2Class,
      leftTop: $$props.div3Class,
      leftBot: $$props.div4Class,
      right: $$props.div5Class,
      slot: $$props.div6Class
    }),
    "styling"
  );
  const { base, slot, top, leftTop, leftBot, right } = defaultMockup();
  var $$exports = { ...legacy_api() };
  var div = root20();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => base({ class: clsx_default($$props.class ?? $$props.divClass) })
  ]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var node = child(div_5);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", DefaultMockup, 30, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      DefaultMockup,
      29,
      4
    );
  }
  reset(div_5);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
    },
    [
      () => clsx2(top({ class: clsx_default(get(styling).top) })),
      () => clsx2(leftTop({ class: clsx_default(get(styling).leftTop) })),
      () => clsx2(leftBot({ class: clsx_default(get(styling).leftBot) })),
      () => clsx2(right({ class: clsx_default(get(styling).right) })),
      () => clsx2(slot({ class: clsx_default(get(styling).slot) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  DefaultMockup = hmr(DefaultMockup, () => DefaultMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DefaultMockup[HMR].source;
    set(DefaultMockup[HMR].source, module.default[HMR].original);
  });
}
var DefaultMockup_default = DefaultMockup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte
Desktop[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Desktop.svelte";
var root21 = add_locations(from_html(`<div><div><!></div></div> <div></div> <div></div>`, 1), Desktop[FILENAME], [[21, 0, [[22, 2]]], [28, 0], [29, 0]]);
function Desktop($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Desktop);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Desktop",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class
    },
    {
      divClass: "class",
      div2Class: "inner",
      div3Class: "bot",
      div4Class: "botUnder"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      inner: $$props.div2Class,
      bot: $$props.div3Class,
      botUnder: $$props.div4Class
    }),
    "styling"
  );
  const { base, inner, bot, botUnder } = desktop();
  var $$exports = { ...legacy_api() };
  var fragment = root21();
  var div = first_child(fragment);
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => base({ class: clsx_default($$props.class ?? $$props.divClass) })
  ]);
  var div_1 = child(div);
  var node = child(div_1);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Desktop, 24, 6);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Desktop,
      23,
      4
    );
  }
  reset(div_1);
  reset(div);
  var div_2 = sibling(div, 2);
  var div_3 = sibling(div_2, 2);
  template_effect(
    ($0, $1, $2) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
    },
    [
      () => clsx2(inner({ class: clsx_default(get(styling).inner) })),
      () => clsx2(bot({ class: clsx_default(get(styling).bot) })),
      () => clsx2(botUnder({ class: clsx_default(get(styling).botUnder) }))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Desktop = hmr(Desktop, () => Desktop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Desktop[HMR].source;
    set(Desktop[HMR].source, module.default[HMR].original);
  });
}
var Desktop_default = Desktop;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte
Ios[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Ios.svelte";
var root22 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Ios[FILENAME], [[23, 0, [[24, 2], [25, 2], [26, 2], [27, 2], [28, 2]]]]);
function Ios($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Ios);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Ios",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class,
      div5Class: $$props.div5Class,
      div6Class: $$props.div6Class
    },
    {
      divClass: "class",
      div2Class: "top",
      div3Class: "lefttop",
      div4Class: "leftBot",
      div5Class: "right",
      div6Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      top: $$props.div2Class,
      leftTop: $$props.div3Class,
      leftBot: $$props.div4Class,
      right: $$props.div5Class,
      slot: $$props.div6Class
    }),
    "styling"
  );
  const { base, slot, top, leftTop, leftBot, right } = ios();
  var $$exports = { ...legacy_api() };
  var div = root22();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => base({ class: clsx_default($$props.class ?? $$props.divClass) })
  ]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var node = child(div_5);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Ios, 30, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Ios,
      29,
      4
    );
  }
  reset(div_5);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
    },
    [
      () => clsx2(top({ class: clsx_default(get(styling).top) })),
      () => clsx2(leftTop({ class: clsx_default(get(styling).leftTop) })),
      () => clsx2(leftBot({ class: clsx_default(get(styling).leftBot) })),
      () => clsx2(right({ class: clsx_default(get(styling).right) })),
      () => clsx2(slot({ class: clsx_default(get(styling).slot) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Ios = hmr(Ios, () => Ios[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Ios[HMR].source;
    set(Ios[HMR].source, module.default[HMR].original);
  });
}
var Ios_default = Ios;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte
Laptop[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Laptop.svelte";
var root23 = add_locations(from_html(`<div><div><div><!></div></div> <div><div></div></div></div>`), Laptop[FILENAME], [[21, 0, [[22, 2, [[23, 4]]], [30, 2, [[31, 4]]]]]]);
function Laptop($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Laptop);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Laptop",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class
    },
    {
      divClass: "class",
      div2Class: "top",
      div3Class: "lefttop",
      div4Class: "leftBot",
      div5Class: "right",
      div6Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      inner: $$props.div2Class,
      bot: $$props.div3Class,
      botCen: $$props.div4Class
    }),
    "styling"
  );
  const { base, inner, bot, botCen } = laptop();
  var $$exports = { ...legacy_api() };
  var div = root23();
  attribute_effect(div, () => ({ ...restProps }));
  var div_1 = child(div);
  var div_2 = child(div_1);
  var node = child(div_2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Laptop, 25, 8);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Laptop,
      24,
      6
    );
  }
  reset(div_2);
  reset(div_1);
  var div_3 = sibling(div_1, 2);
  var div_4 = child(div_3);
  reset(div_3);
  reset(div);
  template_effect(
    ($0, $1, $2, $3) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
    },
    [
      () => clsx2(base({ class: clsx_default($$props.class ?? $$props.divClass) })),
      () => clsx2(inner({ class: clsx_default(get(styling).inner) })),
      () => clsx2(bot({ class: clsx_default(get(styling).bot) })),
      () => clsx2(botCen({ class: clsx_default(get(styling).botCen) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Laptop = hmr(Laptop, () => Laptop[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Laptop[HMR].source;
    set(Laptop[HMR].source, module.default[HMR].original);
  });
}
var Laptop_default = Laptop;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte
Smartwatch[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Smartwatch.svelte";
var root24 = add_locations(from_html(`<div><div></div> <div><div></div> <div></div> <div><!></div></div> <div></div></div>`), Smartwatch[FILENAME], [
  [
    22,
    0,
    [[23, 2], [24, 2, [[25, 4], [26, 4], [27, 4]]], [33, 2]]
  ]
]);
function Smartwatch($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Smartwatch);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Smartwatch",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class,
      div5Class: $$props.div5Class,
      div6Class: $$props.div6Class
    },
    {
      divClass: "class",
      div2Class: "top",
      div3Class: "rightTop",
      div4Class: "rightBot",
      div5Class: "bot",
      div6Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      top: $$props.div2Class,
      rightTop: $$props.div3Class,
      rightBot: $$props.div4Class,
      bot: $$props.div5Class,
      slot: $$props.div6Class
    }),
    "styling"
  );
  const { base, top, rightTop, rightBot, bot, slot } = smartwatch();
  var $$exports = { ...legacy_api() };
  var div = root24();
  attribute_effect(div, () => ({ ...restProps }));
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = child(div_2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var node = child(div_5);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Smartwatch, 29, 8);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Smartwatch,
      28,
      6
    );
  }
  reset(div_5);
  reset(div_2);
  var div_6 = sibling(div_2, 2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
    },
    [
      () => clsx2(base({ class: clsx_default($$props.class ?? $$props.divClass) })),
      () => clsx2(top({ class: clsx_default(get(styling).top) })),
      () => clsx2(rightTop({ class: clsx_default(get(styling).rightTop) })),
      () => clsx2(rightBot({ class: clsx_default(get(styling).rightBot) })),
      () => clsx2(slot({ class: clsx_default(get(styling).slot) })),
      () => clsx2(bot({ class: clsx_default(get(styling).bot) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Smartwatch = hmr(Smartwatch, () => Smartwatch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Smartwatch[HMR].source;
    set(Smartwatch[HMR].source, module.default[HMR].original);
  });
}
var Smartwatch_default = Smartwatch;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte
Tablet[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/Tablet.svelte";
var root25 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div><!></div></div>`), Tablet[FILENAME], [[23, 0, [[24, 2], [25, 2], [26, 2], [27, 2], [28, 2]]]]);
function Tablet($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tablet);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "classes",
      "divClass",
      "div2Class",
      "div3Class",
      "div4Class",
      "div5Class",
      "div6Class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Tablet",
    {
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      div4Class: $$props.div4Class,
      div5Class: $$props.div5Class,
      div6Class: $$props.div6Class
    },
    {
      divClass: "class",
      div2Class: "leftTop",
      div3Class: "leftMid",
      div4Class: "leftBot",
      div5Class: "right",
      div6Class: "slot"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      leftTop: $$props.div2Class,
      leftMid: $$props.div3Class,
      leftBot: $$props.div4Class,
      right: $$props.div5Class,
      slot: $$props.div6Class
    }),
    "styling"
  );
  const { base, leftTop, leftMid, leftBot, right, slot } = tablet();
  var $$exports = { ...legacy_api() };
  var div = root25();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => base({ class: clsx_default($$props.class ?? $$props.divClass) })
  ]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var node = child(div_5);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Tablet, 30, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Tablet,
      29,
      4
    );
  }
  reset(div_5);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
    },
    [
      () => clsx2(leftTop({ class: clsx_default(get(styling).leftTop) })),
      () => clsx2(leftMid({ class: clsx_default(get(styling).leftMid) })),
      () => clsx2(leftBot({ class: clsx_default(get(styling).leftBot) })),
      () => clsx2(right({ class: clsx_default(get(styling).right) })),
      () => clsx2(slot({ class: clsx_default(get(styling).slot) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Tablet = hmr(Tablet, () => Tablet[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tablet[HMR].source;
    set(Tablet[HMR].source, module.default[HMR].original);
  });
}
var Tablet_default = Tablet;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte
DeviceMockup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/device-mockups/DeviceMockup.svelte";
function DeviceMockup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DeviceMockup);
  let device = prop($$props, "device", 3, "default");
  const componets = {
    android: Android_default,
    ios: Ios_default,
    tablet: Tablet_default,
    default: DefaultMockup_default,
    smartwatch: Smartwatch_default,
    laptop: Laptop_default,
    desktop: Desktop_default
  };
  let DeviceComponent = tag(user_derived(() => componets[device()]), "DeviceComponent");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => component(node, () => get(DeviceComponent), ($$anchor2, DeviceComponent_1) => {
      DeviceComponent_1($$anchor2, {
        children: wrap_snippet(DeviceMockup, ($$anchor3, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", DeviceMockup, 28, 2);
          append($$anchor3, fragment_1);
        }),
        $$slots: { default: true }
      });
    }),
    "component",
    DeviceMockup,
    27,
    0,
    { componentTag: "DeviceComponent" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DeviceMockup = hmr(DeviceMockup, () => DeviceMockup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DeviceMockup[HMR].source;
    set(DeviceMockup[HMR].source, module.default[HMR].original);
  });
}
var DeviceMockup_default = DeviceMockup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dialog/theme.js
var dialog = T({
  slots: {
    base: "backdrop:bg-gray-900/50 open:flex flex-col bg-white dark:bg-gray-800",
    form: "flex flex-col w-full border-inherit dark:border-inherit divide-inherit dark:divide-inherit",
    close: "absolute top-2.5 end-2.5"
  },
  variants: {
    // position: {
    //     fixed: { base: "fixed" },
    //     absolute: { base: "absolute" }
    // },
  },
  defaultVariants: {
    // position: "fixed"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dialog/Dialog.svelte
Dialog[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dialog/Dialog.svelte";
var root_115 = add_locations(from_html(`<!> <!>`, 1), Dialog[FILENAME], []);
var root_49 = add_locations(from_html(`<form method="dialog"><!></form>`), Dialog[FILENAME], [[156, 6]]);
var root_310 = add_locations(from_html(`<dialog><!></dialog>`), Dialog[FILENAME], [[154, 2]]);
function Dialog($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Dialog);
  const content = wrap_snippet(Dialog, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = root_115();
    var node_1 = first_child(fragment);
    add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", Dialog, 147, 2);
    var node_2 = sibling(node_1, 2);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_3 = first_child(fragment_1);
        {
          let $0 = user_derived(() => closeCls({ class: clsx_default($$props.classes?.close) }));
          add_svelte_meta(
            () => CloseButton_default(node_3, {
              type: "submit",
              formnovalidate: true,
              get class() {
                return get($0);
              }
            }),
            "component",
            Dialog,
            149,
            4,
            { componentTag: "CloseButton" }
          );
        }
        append($$anchor3, fragment_1);
      };
      add_svelte_meta(
        () => if_block(node_2, ($$render) => {
          if (dismissable() && !permanent()) $$render(consequent);
        }),
        "if",
        Dialog,
        148,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let onaction = prop($$props, "onaction", 3, () => true), form = prop($$props, "form", 3, false), modal2 = prop($$props, "modal", 3, true), autoclose = prop($$props, "autoclose", 3, false), focustrap = prop($$props, "focustrap", 3, false), open = prop($$props, "open", 15, false), permanent = prop($$props, "permanent", 3, false), dismissable = prop($$props, "dismissable", 3, true), outsideclose = prop($$props, "outsideclose", 3, true), transition2 = prop($$props, "transition", 3, fade), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onaction",
      "oncancel",
      "onsubmit",
      "ontoggle",
      "form",
      "modal",
      "autoclose",
      "focustrap",
      "open",
      "permanent",
      "dismissable",
      "outsideclose",
      "class",
      "classes",
      "transition",
      "transitionParams",
      "count"
    ],
    "restProps"
  );
  const paramsOptions = tag(user_derived(() => $$props.transitionParams ?? { duration: 100, easing: sineIn }), "paramsOptions");
  let { base, form: formCls, close: closeCls } = dialog();
  const close = (dlg) => open(false);
  const cancel = (dlg) => {
    if (strict_equals(typeof dlg.requestClose, "function")) return dlg.requestClose();
    dlg.dispatchEvent(new Event("cancel", { bubbles: true, cancelable: true }));
  };
  function _oncancel(ev) {
    if (strict_equals(ev.target, ev.currentTarget, false)) {
      return;
    }
    $$props.oncancel?.(ev);
    if (ev.defaultPrevented) return;
    ev.preventDefault();
    if (!permanent()) close(ev.currentTarget);
  }
  function _onclick(ev) {
    const dlg = ev.currentTarget;
    if (strict_equals(ev.target, dlg)) {
      const rect = dlg.getBoundingClientRect(), clickedInContent = ev.clientX >= rect.left && ev.clientX <= rect.right && ev.clientY >= rect.top && ev.clientY <= rect.bottom;
      if (outsideclose() && !clickedInContent) {
        return cancel(dlg);
      }
    }
    if (autoclose() && ev.target instanceof HTMLButtonElement && !permanent()) {
      return close(dlg);
    }
  }
  function _onsubmit(ev) {
    $$props.onsubmit?.(ev);
    if (ev.defaultPrevented) return;
    ev.preventDefault();
    const dlg = ev.currentTarget;
    if (ev.submitter instanceof HTMLButtonElement || ev.submitter instanceof HTMLInputElement) {
      dlg.returnValue = ev.submitter.value;
    }
    if (!dlg.returnValue) {
      return cancel(dlg);
    }
    if (strict_equals(typeof onaction(), "function") && strict_equals(onaction()({ action: dlg.returnValue, data: new FormData(ev.target) }), false)) return;
    close(dlg);
  }
  function _ontoggle(ev) {
    $$props.ontoggle?.(ev);
    open(strict_equals(
      ev.newState,
      "open"
      // for cases when toggle by other means
    ));
  }
  function init(dlg) {
    if (modal2()) dlg.showModal();
    else dlg.show();
    queueMicrotask(() => {
      const autofocusEl = dlg.querySelector("[data-autofocus]") ?? dlg.querySelector('input, textarea, select, button:not([aria-label="Close"])');
      if (autofocusEl) {
        autofocusEl.focus();
      } else {
        dlg.focus();
      }
    });
    return () => dlg.close();
  }
  const focusTrap = (node) => focustrap() ? trapFocus(node) : void 0;
  let ref = tag(state(void 0), "ref");
  function close_handler(ev) {
    if (form()) {
      return;
    }
    get(ref)?.dispatchEvent(new Event("cancel", { bubbles: true, cancelable: true }));
  }
  createDismissableContext(close_handler);
  let escHandler = null;
  user_effect(() => {
    if (escHandler) {
      window.removeEventListener("keydown", escHandler);
      escHandler = null;
    }
    if (open() && strict_equals(typeof $$props.count, "number") && $$props.count > 0) {
      escHandler = (e) => {
        if (strict_equals(e.key, "Escape")) {
          e.preventDefault();
          e.stopPropagation();
        }
      };
      window.addEventListener("keydown", escHandler);
    }
  });
  onDestroy(() => {
    if (escHandler) {
      window.removeEventListener("keydown", escHandler);
    }
  });
  var $$exports = { ...legacy_api() };
  var fragment_2 = comment();
  var node_4 = first_child(fragment_2);
  {
    var consequent_2 = ($$anchor2) => {
      var dialog_1 = root_310();
      attribute_effect(
        dialog_1,
        ($0) => ({
          tabindex: "-1",
          onsubmit: _onsubmit,
          oncancel: _oncancel,
          onclick: _onclick,
          ontoggle: _ontoggle,
          ...restProps,
          class: $0
        }),
        [() => base({ class: clsx_default($$props.class) })]
      );
      var node_5 = child(dialog_1);
      {
        var consequent_1 = ($$anchor3) => {
          var form_1 = root_49();
          var node_6 = child(form_1);
          add_svelte_meta(() => content(node_6), "render", Dialog, 157, 8);
          reset(form_1);
          template_effect(($0) => set_class(form_1, 1, $0), [
            () => clsx2(formCls({ class: clsx_default($$props.classes?.form) }))
          ]);
          append($$anchor3, form_1);
        };
        var alternate = ($$anchor3) => {
          add_svelte_meta(() => content($$anchor3), "render", Dialog, 160, 6);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (form()) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          Dialog,
          155,
          4
        );
      }
      reset(dialog_1);
      attach(dialog_1, () => init);
      bind_this(dialog_1, ($$value) => set(ref, $$value), () => get(ref));
      action(dialog_1, ($$node) => focusTrap?.($$node));
      transition(7, dialog_1, transition2, () => get(paramsOptions));
      append($$anchor2, dialog_1);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (open()) $$render(consequent_2);
      }),
      "if",
      Dialog,
      153,
      0
    );
  }
  append($$anchor, fragment_2);
  return pop($$exports);
}
if (import.meta.hot) {
  Dialog = hmr(Dialog, () => Dialog[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dialog[HMR].source;
    set(Dialog[HMR].source, module.default[HMR].original);
  });
}
var Dialog_default = Dialog;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/theme.js
var dropdown = T({
  base: "mt-2 divide-y divide-gray-300 dark:divide-gray-500 overflow-hidden rounded-lg bg-white shadow-sm dark:bg-gray-700"
});
var dropdownDivider = T({
  base: "my-1 h-px bg-gray-100 dark:bg-gray-500"
});
var dropdownHeader = T({
  base: "px-4 py-3 text-sm text-gray-900 dark:text-white"
});
var dropdownItem = T({
  slots: {
    base: "block px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white",
    active: "block px-4 py-2 text-primary-700 dark:text-primary-600 hover:bg-gray-100 dark:hover:bg-gray-600 dark:hover:text-white",
    li: ""
  }
});
var dropdownGroup = T({
  base: "py-2 text-sm text-gray-700 dark:text-gray-200"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownGroup.svelte
DropdownGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownGroup.svelte";
var root26 = add_locations(from_html(`<ul><!></ul>`), DropdownGroup[FILENAME], [[12, 0]]);
function DropdownGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownGroup);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("dropdownGroup");
  var $$exports = { ...legacy_api() };
  var ul = root26();
  attribute_effect(ul, ($0) => ({ ...restProps, class: $0 }), [() => dropdownGroup({ class: clsx_default(theme, $$props.class) })]);
  var node = child(ul);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", DropdownGroup, 13, 2);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownGroup = hmr(DropdownGroup, () => DropdownGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownGroup[HMR].source;
    set(DropdownGroup[HMR].source, module.default[HMR].original);
  });
}
var DropdownGroup_default = DropdownGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte
Dropdown[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/Dropdown.svelte";
function Dropdown($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Dropdown);
  var $$ownership_validator = create_ownership_validator($$props);
  let simple = prop($$props, "simple", 3, false), placement = prop($$props, "placement", 3, "bottom"), offset3 = prop($$props, "offset", 3, 2), activeUrl = prop($$props, "activeUrl", 3, ""), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "simple",
      "placement",
      "offset",
      "class",
      "activeUrl",
      "isOpen"
    ],
    "restProps"
  );
  const theme = getTheme("dropdown");
  const base = tag(user_derived(() => dropdown({ class: clsx_default(theme, $$props.class) })), "base");
  const activeUrlStore = tag_proxy(proxy({ value: "" }), "activeUrlStore");
  setContext("activeUrl", activeUrlStore);
  user_effect(() => {
    activeUrlStore.value = activeUrl() ?? "";
  });
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    add_svelte_meta(
      () => Popper_default(node, spread_props(() => restProps, {
        get placement() {
          return placement();
        },
        get offset() {
          return offset3();
        },
        get class() {
          return get(base);
        },
        get isOpen() {
          return isOpen();
        },
        set isOpen($$value) {
          isOpen($$value);
        },
        children: wrap_snippet(Dropdown, ($$anchor2, $$slotProps) => {
          var fragment_1 = comment();
          var node_1 = first_child(fragment_1);
          {
            var consequent = ($$anchor3) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              add_svelte_meta(
                () => DropdownGroup_default(node_2, {
                  children: wrap_snippet(Dropdown, ($$anchor4, $$slotProps2) => {
                    var fragment_3 = comment();
                    var node_3 = first_child(fragment_3);
                    add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", Dropdown, 28, 6);
                    append($$anchor4, fragment_3);
                  }),
                  $$slots: { default: true }
                }),
                "component",
                Dropdown,
                27,
                4,
                { componentTag: "DropdownGroup" }
              );
              append($$anchor3, fragment_2);
            };
            var alternate = ($$anchor3) => {
              var fragment_4 = comment();
              var node_4 = first_child(fragment_4);
              add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Dropdown, 31, 4);
              append($$anchor3, fragment_4);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if (simple()) $$render(consequent);
                else $$render(alternate, false);
              }),
              "if",
              Dropdown,
              26,
              2
            );
          }
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      Dropdown,
      25,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Dropdown = hmr(Dropdown, () => Dropdown[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropdown[HMR].source;
    set(Dropdown[HMR].source, module.default[HMR].original);
  });
}
var Dropdown_default = Dropdown;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte
DropdownDivider[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownDivider.svelte";
var root27 = add_locations(from_html(`<div></div>`), DropdownDivider[FILENAME], [[12, 0]]);
function DropdownDivider($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownDivider);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class"], "restProps");
  const theme = getTheme("dropdownDivider");
  var $$exports = { ...legacy_api() };
  var div = root27();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [() => dropdownDivider({ class: clsx_default(theme, $$props.class) })]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownDivider = hmr(DropdownDivider, () => DropdownDivider[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownDivider[HMR].source;
    set(DropdownDivider[HMR].source, module.default[HMR].original);
  });
}
var DropdownDivider_default = DropdownDivider;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte
DropdownHeader[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownHeader.svelte";
var root28 = add_locations(from_html(`<div><!></div>`), DropdownHeader[FILENAME], [[12, 0]]);
function DropdownHeader($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownHeader);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("dropdownHeader");
  var $$exports = { ...legacy_api() };
  var div = root28();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [() => dropdownHeader({ class: clsx_default(theme, $$props.class) })]);
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", DropdownHeader, 13, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownHeader = hmr(DropdownHeader, () => DropdownHeader[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownHeader[HMR].source;
    set(DropdownHeader[HMR].source, module.default[HMR].original);
  });
}
var DropdownHeader_default = DropdownHeader;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte
DropdownItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/dropdown/DropdownItem.svelte";
var root_116 = add_locations(from_html(`<div><!></div>`), DropdownItem[FILENAME], [[25, 4]]);
var root_311 = add_locations(from_html(`<button><!></button>`), DropdownItem[FILENAME], [[29, 4]]);
var root_410 = add_locations(from_html(`<a><!></a>`), DropdownItem[FILENAME], [[33, 4]]);
var root29 = add_locations(from_html(`<li><!></li>`), DropdownItem[FILENAME], [[23, 0]]);
function DropdownItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DropdownItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "aClass",
      "children",
      "activeClass",
      "liClass",
      "classes",
      "class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "DropdownItem",
    {
      aClass: $$props.aClass,
      activeClass: $$props.activeClass,
      liClass: $$props.liClass
    },
    { aClass: "class", activeClass: "active", liClass: "li" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { active: $$props.activeClass, li: $$props.liClass }), "styling");
  const theme = getTheme("dropdownItem");
  const activeUrl = getContext("activeUrl");
  let isActive = tag(
    user_derived(() => activeUrl?.value ? strict_equals($$props.href, activeUrl.value) : false),
    "isActive"
  );
  const { base, active, li } = dropdownItem();
  let finalClass = tag(
    user_derived(() => [
      get(isActive) ? active({ class: clsx_default(theme?.active, get(styling).active) }) : base({ class: clsx_default(theme?.base, $$props.class) })
    ]),
    "finalClass"
  );
  var $$exports = { ...legacy_api() };
  var li_1 = root29();
  var node = child(li_1);
  {
    var consequent = ($$anchor2) => {
      var div = root_116();
      attribute_effect(div, () => ({ ...restProps, class: get(finalClass) }));
      var node_1 = child(div);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", DropdownItem, 26, 6);
      reset(div);
      append($$anchor2, div);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      {
        var consequent_1 = ($$anchor3) => {
          var button2 = root_311();
          attribute_effect(button2, () => ({ type: "button", ...restProps, class: get(finalClass) }));
          var node_3 = child(button2);
          add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", DropdownItem, 30, 6);
          reset(button2);
          append($$anchor3, button2);
        };
        var alternate = ($$anchor3) => {
          var a2 = root_410();
          attribute_effect(a2, () => ({ ...restProps, class: get(finalClass) }));
          var node_4 = child(a2);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", DropdownItem, 34, 6);
          reset(a2);
          append($$anchor3, a2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (strict_equals($$props.href, void 0)) $$render(consequent_1);
              else $$render(alternate, false);
            },
            true
          ),
          "if",
          DropdownItem,
          28,
          2
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0) && strict_equals($$props.onclick, void 0)) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      DropdownItem,
      24,
      2
    );
  }
  reset(li_1);
  template_effect(($0) => set_class(li_1, 1, $0), [() => clsx2(li({ class: clsx_default(get(styling).li) }))]);
  append($$anchor, li_1);
  return pop($$exports);
}
if (import.meta.hot) {
  DropdownItem = hmr(DropdownItem, () => DropdownItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DropdownItem[HMR].source;
    set(DropdownItem[HMR].source, module.default[HMR].original);
  });
}
var DropdownItem_default = DropdownItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/theme.js
var drawer = T({
  extend: dialog,
  slots: {
    base: "p-4 max-h-none max-w-none border border-gray-200 dark:border-gray-700 transform-gpu will-change-transform"
  },
  variants: {
    placement: {
      left: { base: "me-auto h-full" },
      right: { base: "ms-auto h-full" },
      top: { base: "mb-auto !w-full" },
      bottom: { base: "mt-auto !w-full" }
    },
    width: {
      default: { base: "w-80" },
      full: { base: "w-full" },
      half: { base: "w-1/2" }
    },
    modal: {
      false: { base: "fixed inset-0" },
      true: { base: "" }
    },
    shifted: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      shifted: false,
      modal: false,
      class: { base: "z-50" }
    },
    {
      shifted: true,
      placement: "left",
      class: { base: "-translate-x-full" }
    },
    {
      shifted: true,
      placement: "right",
      class: { base: "translate-x-full" }
    },
    {
      shifted: true,
      placement: "top",
      class: { base: "-translate-y-full" }
    },
    {
      shifted: true,
      placement: "bottom",
      class: { base: "translate-y-full" }
    }
  ],
  defaultVariants: {
    placement: "left",
    width: "default",
    modal: true
  }
});
var drawerhead = T({
  slots: {
    base: "flex items-center justify-between",
    button: "ms-auto inline-flex h-8 w-8 items-center justify-center rounded-lg bg-transparent text-sm text-gray-400 hover:bg-gray-200 hover:text-gray-900 dark:hover:bg-gray-600 dark:hover:text-white",
    svg: "h-4 w-4"
  }
});
var drawerhandle = T({
  slots: {
    base: "p-4 absolute flex select-none cursor-grab active:cursor-grabbing focus:outline-none focus-visible:ring-2 focus-visible:ring-gray-300 dark:focus-visible:ring-gray-500",
    handle: "absolute rounded-lg bg-gray-300 dark:bg-gray-600"
  },
  variants: {
    placement: {
      left: { base: "inset-y-0 right-0 touch-pan-x", handle: "w-1 h-8 top-1/2 -translate-y-1/2" },
      right: { base: "inset-y-0 left-0 touch-pan-x", handle: "w-1 h-8 top-1/2 -translate-y-1/2" },
      top: { base: "inset-x-0 bottom-0 touch-pan-y", handle: "w-8 h-1 left-1/2 -translate-x-1/2" },
      bottom: { base: "inset-x-0 top-0 touch-pan-y", handle: "w-8 h-1 left-1/2 -translate-x-1/2" }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/Drawer.svelte
Drawer[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/Drawer.svelte";
var root30 = add_locations(from_html(`<!> <!>`, 1), Drawer[FILENAME], []);
function Drawer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Drawer);
  var $$ownership_validator = create_ownership_validator($$props);
  let open = prop($$props, "open", 15, false), hidden = prop($$props, "hidden", 15), dismissable = prop($$props, "dismissable", 19, () => $$props.offset ? false : void 0), placement = prop($$props, "placement", 3, "left"), transition2 = prop($$props, "transition", 3, fly), outsideclose = prop($$props, "outsideclose", 7), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "open",
      "hidden",
      "modal",
      "offset",
      "width",
      "dismissable",
      "placement",
      "class",
      "transitionParams",
      "transition",
      "outsideclose",
      "activateClickOutside"
    ],
    "restProps"
  );
  setContext("drawer", {
    get placement() {
      return placement();
    }
  });
  if (strict_equals(hidden(), void 0, false)) console.warn("'hidden' property is deprecated. Please use the 'open' property to manage 'Drawer'.");
  if (strict_equals($$props.activateClickOutside, void 0, false)) console.warn("'activateClickOutside' property is deprecated. Please use the 'outsideclose' property to manage 'Drawer' behaviour.");
  user_effect(() => {
    if (strict_equals($$props.activateClickOutside, void 0, false) && strict_equals(outsideclose(), void 0)) {
      outsideclose($$props.activateClickOutside);
    }
  });
  user_effect(() => {
    if (strict_equals(hidden(), void 0, false)) {
      const nextOpen = !hidden();
      if (strict_equals(open(), nextOpen, false)) open(nextOpen);
    }
  });
  user_effect(() => {
    if (strict_equals(hidden(), void 0, false)) {
      const nextHidden = !open();
      if (strict_equals(hidden(), nextHidden, false)) hidden(nextHidden);
    }
  });
  const theme = getTheme("drawer");
  let shifted = tag(state(true), "shifted");
  const $$d = tag(
    user_derived(() => drawer({
      placement: placement(),
      width: $$props.width,
      modal: $$props.offset && !open() ? false : $$props.modal,
      shifted: get(shifted)
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base");
  let x2 = tag(state(void 0), "x"), y2 = tag(state(void 0), "y");
  let transition_params = tag(
    user_derived(() => ({
      x: get(x2),
      y: get(y2),
      duration: 300,
      easing: sineIn,
      opacity: 1,
      ...$$props.transitionParams
    })),
    "transition_params"
  );
  function init(node) {
    if ($$props.offset) {
      node.style[placement()] = $$props.offset;
      tick().then(() => {
        node.inert = false;
      });
    }
  }
  async function onintrostart(ev) {
    $$props.onintrostart?.(ev);
    if (ev.defaultPrevented) return;
    const dlg = ev.currentTarget;
    const { innerWidth = 0, innerHeight = 0 } = dlg.ownerDocument.defaultView ?? {};
    const rect = dlg.getBoundingClientRect();
    set(
      x2,
      strict_equals(placement(), "left") ? rect.left : strict_equals(placement(), "right") ? rect.right - innerWidth : void 0,
      true
    );
    set(
      y2,
      strict_equals(placement(), "top") ? rect.top : strict_equals(placement(), "bottom") ? rect.bottom - innerHeight : void 0,
      true
    );
    (await track_reactivity_loss(
      tick()
      // let transition start
    ))();
    set(shifted, !open());
    if ($$props.offset) dlg.style[placement()] = open() ? "" : $$props.offset;
  }
  function onoutrostart(ev) {
    $$props.onoutrostart?.(ev);
    if (ev.defaultPrevented) return;
    set(shifted, true);
  }
  var $$exports = { ...legacy_api() };
  var fragment = root30();
  var node_1 = first_child(fragment);
  {
    let $0 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
    $$ownership_validator.binding("open", Dialog_default, open);
    add_svelte_meta(
      () => Dialog_default(node_1, spread_props(
        {
          [createAttachmentKey()]: init,
          get modal() {
            return $$props.modal;
          },
          get dismissable() {
            return dismissable();
          },
          get transition() {
            return transition2();
          },
          get outsideclose() {
            return outsideclose();
          },
          get transitionParams() {
            return get(transition_params);
          }
        },
        () => restProps,
        {
          onintrostart,
          onoutrostart,
          get class() {
            return get($0);
          },
          get open() {
            return open();
          },
          set open($$value) {
            open($$value);
          },
          children: wrap_snippet(Drawer, ($$anchor2, $$slotProps) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", Drawer, 98, 2);
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      Drawer,
      97,
      0,
      { componentTag: "Dialog" }
    );
  }
  var node_3 = sibling(node_1, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      {
        let $0 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
        add_svelte_meta(
          () => Dialog_default(node_4, spread_props(
            {
              [createAttachmentKey()]: init,
              open: true,
              modal: false,
              get dismissable() {
                return dismissable();
              },
              get outsideclose() {
                return outsideclose();
              },
              inert: true
            },
            () => restProps,
            {
              get class() {
                return get($0);
              },
              children: wrap_snippet(Drawer, ($$anchor3, $$slotProps) => {
                var fragment_3 = comment();
                var node_5 = first_child(fragment_3);
                add_svelte_meta(() => snippet(node_5, () => $$props.children ?? noop), "render", Drawer, 103, 4);
                append($$anchor3, fragment_3);
              }),
              $$slots: { default: true }
            }
          )),
          "component",
          Drawer,
          102,
          2,
          { componentTag: "Dialog" }
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($$props.offset && !open()) $$render(consequent);
      }),
      "if",
      Drawer,
      101,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Drawer = hmr(Drawer, () => Drawer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawer[HMR].source;
    set(Drawer[HMR].source, module.default[HMR].original);
  });
}
var Drawer_default = Drawer;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/Drawerhead.svelte
Drawerhead[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/Drawerhead.svelte";
var root_312 = add_locations(from_html(`<button><svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 14"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 6 6m0 0 6 6M7 7l6-6M7 7l-6 6"></path></svg> <span class="sr-only">Close drawer</span></button>`), Drawerhead[FILENAME], [[24, 4, [[25, 6, [[26, 8]]], [28, 6]]]]);
var root31 = add_locations(from_html(`<div><!> <!></div>`), Drawerhead[FILENAME], [[17, 0]]);
function Drawerhead($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Drawerhead);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "closeIcon",
      "children",
      "buttonClass",
      "svgClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("Drawerhead", { buttonClass: $$props.buttonClass, svgClass: $$props.svgClass }, { buttonClass: "button", svgClass: "svg" });
  const styling = tag(user_derived(() => $$props.classes ?? { button: $$props.buttonClass, svg: $$props.svgClass }), "styling");
  const theme = getTheme("drawer");
  const $$d = tag(user_derived(drawerhead), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), button2 = tag(user_derived(() => get($$d).button), "button"), svg = tag(user_derived(() => get($$d).svg), "svg");
  var $$exports = { ...legacy_api() };
  var div = root31();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Drawerhead, 19, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Drawerhead,
      18,
      2
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_3, () => $$props.closeIcon), "render", Drawerhead, 22, 4);
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var button_1 = root_312();
      attribute_effect(button_1, ($0) => ({ type: "button", ...restProps, class: $0 }), [() => get(button2)({ class: clsx_default(get(styling).button) })]);
      var svg_1 = child(button_1);
      next(2);
      reset(button_1);
      template_effect(($0) => set_class(svg_1, 0, $0), [
        () => clsx2(get(svg)({ class: clsx_default(get(styling).svg) }))
      ]);
      append($$anchor2, button_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.closeIcon) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Drawerhead,
      21,
      2
    );
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Drawerhead = hmr(Drawerhead, () => Drawerhead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Drawerhead[HMR].source;
    set(Drawerhead[HMR].source, module.default[HMR].original);
  });
}
var Drawerhead_default = Drawerhead;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/DrawerHandle.svelte
DrawerHandle[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/drawer/DrawerHandle.svelte";
var root32 = add_locations(from_html(`<button><!> <span></span></button>`), DrawerHandle[FILENAME], [[16, 0, [[18, 2]]]]);
function DrawerHandle($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DrawerHandle);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "placement",
      "aria-label",
      "class",
      "classes"
    ],
    "restProps"
  );
  const ctx = getContext("drawer");
  const theme = getTheme("drawerhandle");
  let $$d = tag(user_derived(() => drawerhandle({ placement: $$props.placement ?? ctx?.placement ?? "left" })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), handle = tag(user_derived(() => get($$d).handle), "handle");
  var $$exports = { ...legacy_api() };
  var button2 = root32();
  attribute_effect(
    button2,
    ($0) => ({
      type: "button",
      "aria-label": $$props["aria-label"],
      ...restProps,
      class: $0
    }),
    [
      () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
    ]
  );
  var node = child(button2);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", DrawerHandle, 17, 2);
  var span2 = sibling(node, 2);
  reset(button2);
  template_effect(($0) => set_class(span2, 1, $0), [
    () => clsx2(get(handle)({ class: clsx_default(theme?.handle, $$props.classes?.handle) }))
  ]);
  append($$anchor, button2);
  return pop($$exports);
}
if (import.meta.hot) {
  DrawerHandle = hmr(DrawerHandle, () => DrawerHandle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DrawerHandle[HMR].source;
    set(DrawerHandle[HMR].source, module.default[HMR].original);
  });
}
var DrawerHandle_default = DrawerHandle;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/theme.js
var footer = T({
  base: "bg-white dark:bg-gray-800",
  variants: {
    footerType: {
      default: "p-4 rounded-lg shadow md:flex md:items-center md:justify-between md:p-6",
      sitemap: "bg-white dark:bg-gray-900",
      socialmedia: "p-4 sm:p-6",
      logo: "p-4 rounded-lg shadow md:px-6 md:py-8",
      sticky: "fixed bottom-0 left-0 z-20 w-full p-4 bg-white border-t border-gray-200 shadow md:flex md:items-center md:justify-between md:p-6 dark:bg-gray-800 dark:border-gray-600"
    }
  }
});
var footerBrand = T({
  slots: {
    base: "flex items-center",
    span: "self-center text-2xl font-semibold whitespace-nowrap dark:text-white",
    img: "me-3 h-8"
  }
});
var footerCopyright = T({
  slots: {
    base: "block text-sm text-gray-500 sm:text-center dark:text-gray-400",
    link: "hover:underline",
    bySpan: "ms-1"
  }
});
var footerIcon = T({
  base: "text-gray-500 hover:text-gray-900 dark:hover:text-white"
});
var footerLinkGroup = T({
  base: "text-gray-600 dark:text-gray-400"
});
var footerLink = T({
  slots: {
    base: "me-4 last:me-0 md:me-6",
    link: "hover:underline"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/Footer.svelte
Footer[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/Footer.svelte";
var root33 = add_locations(from_html(`<footer><!></footer>`), Footer[FILENAME], [[14, 0]]);
function Footer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Footer);
  let footerType = prop($$props, "footerType", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "footerType",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("footer");
  const footerCls = tag(user_derived(() => footer({ footerType: footerType(), class: clsx_default(theme, $$props.class) })), "footerCls");
  var $$exports = { ...legacy_api() };
  var footer_1 = root33();
  attribute_effect(footer_1, () => ({ ...restProps, class: get(footerCls) }));
  var node = child(footer_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Footer, 15, 2);
  reset(footer_1);
  append($$anchor, footer_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Footer = hmr(Footer, () => Footer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Footer[HMR].source;
    set(Footer[HMR].source, module.default[HMR].original);
  });
}
var Footer_default = Footer;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte
FooterBrand[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterBrand.svelte";
var root_212 = add_locations(from_html(`<img/>`), FooterBrand[FILENAME], [[17, 6]]);
var root_313 = add_locations(from_html(`<span> </span>`), FooterBrand[FILENAME], [[20, 6]]);
var root_117 = add_locations(from_html(`<a><!> <!> <!></a>`), FooterBrand[FILENAME], [[15, 2]]);
var root_56 = add_locations(from_html(`<img/>`), FooterBrand[FILENAME], [[27, 2]]);
function FooterBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterBrand);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "aClass",
      "spanClass",
      "imgClass",
      "href",
      "src",
      "alt",
      "name"
    ],
    "restProps"
  );
  const theme = getTheme("footerBrand");
  const $$d = tag(user_derived(footerBrand), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), span2 = tag(user_derived(() => get($$d).span), "span"), img2 = tag(user_derived(() => get($$d).img), "img");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_3 = ($$anchor2) => {
      var a2 = root_117();
      attribute_effect(a2, ($0) => ({ ...restProps, href: $$props.href, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.aClass) })
      ]);
      var node_1 = child(a2);
      {
        var consequent = ($$anchor3) => {
          var img_1 = root_212();
          template_effect(
            ($0) => {
              set_attribute(img_1, "src", $$props.src);
              set_class(img_1, 1, $0);
              set_attribute(img_1, "alt", $$props.alt);
            },
            [
              () => clsx2(get(img2)({ class: clsx_default(theme?.img, $$props.imgClass) }))
            ]
          );
          append($$anchor3, img_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.src) $$render(consequent);
          }),
          "if",
          FooterBrand,
          16,
          4
        );
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var span_1 = root_313();
          var text2 = child(span_1, true);
          reset(span_1);
          template_effect(
            ($0) => {
              set_class(span_1, 1, $0);
              set_text(text2, $$props.name);
            },
            [
              () => clsx2(get(span2)({ class: clsx_default(theme?.span, $$props.spanClass) }))
            ]
          );
          append($$anchor3, span_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if ($$props.name) $$render(consequent_1);
          }),
          "if",
          FooterBrand,
          19,
          4
        );
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_4 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", FooterBrand, 23, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.children) $$render(consequent_2);
          }),
          "if",
          FooterBrand,
          22,
          4
        );
      }
      reset(a2);
      append($$anchor2, a2);
    };
    var alternate = ($$anchor2) => {
      var img_2 = root_56();
      template_effect(
        ($0) => {
          set_attribute(img_2, "src", $$props.src);
          set_class(img_2, 1, $0);
          set_attribute(img_2, "alt", $$props.alt);
        },
        [() => clsx2(get(img2)({ class: clsx_default($$props.imgClass) }))]
      );
      append($$anchor2, img_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.href) $$render(consequent_3);
        else $$render(alternate, false);
      }),
      "if",
      FooterBrand,
      14,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterBrand = hmr(FooterBrand, () => FooterBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterBrand[HMR].source;
    set(FooterBrand[HMR].source, module.default[HMR].original);
  });
}
var FooterBrand_default = FooterBrand;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte
FooterCopyright[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterCopyright.svelte";
var root_118 = add_locations(from_html(`<a> </a>`), FooterCopyright[FILENAME], [[23, 4]]);
var root_213 = add_locations(from_html(`<span> </span>`), FooterCopyright[FILENAME], [[27, 4]]);
var root34 = add_locations(from_html(`<span> <!> </span>`), FooterCopyright[FILENAME], [[20, 0]]);
function FooterCopyright($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterCopyright);
  let copyrightMessage = prop($$props, "copyrightMessage", 3, "All Rights Reserved."), year = prop($$props, "year", 7), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "spanClass",
      "aClass",
      "href",
      "by",
      "copyrightMessage",
      "year",
      "bySpanClass",
      "classes",
      "class"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "FooterCopyright",
    {
      aClass: $$props.aClass,
      spanClass: $$props.spanClass,
      bySpanClass: $$props.bySpanClass
    },
    { aClass: "link", spanClass: "class", bySpanClass: "bySpan" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { bySpan: $$props.bySpanClass, link: $$props.aClass }), "styling");
  const theme = getTheme("footerCopyright");
  if (!year()) year((/* @__PURE__ */ new Date()).getFullYear());
  const { base, link, bySpan } = footerCopyright();
  var $$exports = { ...legacy_api() };
  var span2 = root34();
  var text2 = child(span2);
  var node = sibling(text2);
  {
    var consequent = ($$anchor2) => {
      var a2 = root_118();
      attribute_effect(a2, ($0) => ({ ...restProps, href: $$props.href, class: $0 }), [
        () => link({ class: clsx_default(theme?.link, get(styling).link) })
      ]);
      var text_1 = child(a2, true);
      reset(a2);
      template_effect(() => set_text(text_1, $$props.by));
      append($$anchor2, a2);
    };
    var alternate = ($$anchor2) => {
      var span_1 = root_213();
      var text_2 = child(span_1, true);
      reset(span_1);
      template_effect(
        ($0) => {
          set_class(span_1, 1, $0);
          set_text(text_2, $$props.by);
        },
        [
          () => clsx2(bySpan({ class: clsx_default(theme?.bySpan, get(styling).bySpan) }))
        ]
      );
      append($$anchor2, span_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.href) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      FooterCopyright,
      22,
      2
    );
  }
  var text_3 = sibling(node);
  reset(span2);
  template_effect(
    ($0) => {
      set_class(span2, 1, $0);
      set_text(text2, `© ${year() ?? ""} `);
      set_text(text_3, ` ${copyrightMessage() ?? ""}`);
    },
    [
      () => clsx2(base({ class: clsx_default(theme?.base, $$props.class ?? $$props.spanClass) }))
    ]
  );
  append($$anchor, span2);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterCopyright = hmr(FooterCopyright, () => FooterCopyright[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterCopyright[HMR].source;
    set(FooterCopyright[HMR].source, module.default[HMR].original);
  });
}
var FooterCopyright_default = FooterCopyright;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte
FooterIcon[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterIcon.svelte";
var root_119 = add_locations(from_html(`<a><!></a>`), FooterIcon[FILENAME], [[13, 2]]);
function FooterIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterIcon);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "href",
      "ariaLabel",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("footerIcon");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var a2 = root_119();
      attribute_effect(
        a2,
        ($0) => ({
          ...restProps,
          href: $$props.href,
          "aria-label": $$props.ariaLabel,
          class: $0
        }),
        [() => footerIcon({ class: clsx_default(theme, $$props.class) })]
      );
      var node_1 = child(a2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", FooterIcon, 14, 4);
      reset(a2);
      append($$anchor2, a2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", FooterIcon, 17, 2);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.href) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      FooterIcon,
      12,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterIcon = hmr(FooterIcon, () => FooterIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterIcon[HMR].source;
    set(FooterIcon[HMR].source, module.default[HMR].original);
  });
}
var FooterIcon_default = FooterIcon;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterLink.svelte
FooterLink[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterLink.svelte";
var root35 = add_locations(from_html(`<li><a><!></a></li>`), FooterLink[FILENAME], [[18, 0, [[19, 2]]]]);
function FooterLink($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterLink);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "liClass",
      "aClass",
      "href",
      "classes",
      "class"
    ],
    "restProps"
  );
  warnThemeDeprecation("FooterLink", { liClass: $$props.liClass, aClass: $$props.aClass }, { liClass: "class", aClass: "link" });
  const styling = tag(user_derived(() => $$props.classes ?? { link: $$props.aClass }), "styling");
  const theme = getTheme("footerLink");
  const { base, link } = footerLink();
  var $$exports = { ...legacy_api() };
  var li = root35();
  var a2 = child(li);
  attribute_effect(a2, ($0) => ({ ...restProps, href: $$props.href, class: $0 }), [
    () => link({ class: clsx_default(theme?.link, get(styling).link) })
  ]);
  var node = child(a2);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", FooterLink, 20, 4);
  reset(a2);
  reset(li);
  template_effect(($0) => set_class(li, 1, $0), [
    () => clsx2(base({ class: clsx_default(theme?.base, $$props.class ?? $$props.liClass) }))
  ]);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterLink = hmr(FooterLink, () => FooterLink[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLink[HMR].source;
    set(FooterLink[HMR].source, module.default[HMR].original);
  });
}
var FooterLink_default = FooterLink;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte
FooterLinkGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/footer/FooterLinkGroup.svelte";
var root36 = add_locations(from_html(`<ul><!></ul>`), FooterLinkGroup[FILENAME], [[12, 0]]);
function FooterLinkGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FooterLinkGroup);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class", "children"], "restProps");
  const theme = getTheme("footerLinkGroup");
  var $$exports = { ...legacy_api() };
  var ul = root36();
  attribute_effect(ul, ($0) => ({ ...restProps, class: $0 }), [() => footerLinkGroup({ class: clsx_default(theme, $$props.class) })]);
  var node = child(ul);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", FooterLinkGroup, 13, 2);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  FooterLinkGroup = hmr(FooterLinkGroup, () => FooterLinkGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FooterLinkGroup[HMR].source;
    set(FooterLinkGroup[HMR].source, module.default[HMR].original);
  });
}
var FooterLinkGroup_default = FooterLinkGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/gallery/theme.js
var gallery = T({
  slots: {
    image: "h-auto max-w-full rounded-lg",
    div: "grid"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/gallery/Gallery.svelte
Gallery[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/gallery/Gallery.svelte";
var root_120 = add_locations(from_html(`<div><img/></div>`), Gallery[FILENAME], [[22, 2, [[23, 4]]]]);
var root37 = add_locations(from_html(`<div></div>`), Gallery[FILENAME], [[27, 0]]);
function Gallery($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Gallery);
  const _figure = wrap_snippet(Gallery, function($$anchor2, item = noop) {
    validate_snippet_args(...arguments);
    var div_1 = root_120();
    var img2 = child(div_1);
    attribute_effect(img2, ($0) => ({ src: item().src, alt: item().alt, class: $0, ...restProps }), [
      () => image({ class: clsx_default(theme?.image, get(styling).image) })
    ]);
    reset(div_1);
    replay_events(img2);
    append($$anchor2, div_1);
  });
  let items = prop($$props, "items", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "figure",
      "items",
      "imgClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("Gallery", { imgClass: $$props.imgClass }, { imgClass: "image" });
  const styling = tag(user_derived(() => $$props.classes ?? { image: $$props.imgClass }), "styling");
  const theme = getTheme("gallery");
  function init(node) {
    if (strict_equals(getComputedStyle(node).gap, "normal")) node.style.gap = "inherit";
  }
  const { image, div } = gallery();
  var $$exports = { ...legacy_api() };
  var div_2 = root37();
  add_svelte_meta(
    () => each(
      div_2,
      21,
      items,
      index,
      ($$anchor2, item) => {
        var fragment = comment();
        var node_1 = first_child(fragment);
        {
          var consequent = ($$anchor3) => {
            var fragment_1 = comment();
            var node_2 = first_child(fragment_1);
            add_svelte_meta(() => snippet(node_2, () => $$props.figure, () => get(item)), "render", Gallery, 30, 6);
            append($$anchor3, fragment_1);
          };
          var alternate = ($$anchor3) => {
            add_svelte_meta(() => _figure($$anchor3, () => get(item)), "render", Gallery, 32, 6);
          };
          add_svelte_meta(
            () => if_block(node_1, ($$render) => {
              if ($$props.figure) $$render(consequent);
              else $$render(alternate, false);
            }),
            "if",
            Gallery,
            29,
            4
          );
        }
        append($$anchor2, fragment);
      },
      ($$anchor2) => {
        var fragment_3 = comment();
        var node_3 = first_child(fragment_3);
        {
          var consequent_1 = ($$anchor3) => {
            var fragment_4 = comment();
            var node_4 = first_child(fragment_4);
            add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Gallery, 36, 6);
            append($$anchor3, fragment_4);
          };
          add_svelte_meta(
            () => if_block(node_3, ($$render) => {
              if ($$props.children) $$render(consequent_1);
            }),
            "if",
            Gallery,
            35,
            4
          );
        }
        append($$anchor2, fragment_3);
      }
    ),
    "each",
    Gallery,
    28,
    2
  );
  reset(div_2);
  action(div_2, ($$node) => init?.($$node));
  template_effect(($0) => set_class(div_2, 1, $0), [
    () => clsx2(div({ class: clsx_default(theme?.div, $$props.class) }))
  ]);
  append($$anchor, div_2);
  return pop($$exports);
}
if (import.meta.hot) {
  Gallery = hmr(Gallery, () => Gallery[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Gallery[HMR].source;
    set(Gallery[HMR].source, module.default[HMR].original);
  });
}
var Gallery_default = Gallery;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/kbd/theme.js
var kbd = T({
  base: "px-2 py-1.5 text-xs font-semibold text-gray-800 bg-gray-100 border border-gray-200 rounded-lg dark:bg-gray-600 dark:text-gray-100 dark:border-gray-500"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/kbd/Kbd.svelte
Kbd[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/kbd/Kbd.svelte";
var root38 = add_locations(from_html(`<kbd><!></kbd>`), Kbd[FILENAME], [[14, 0]]);
function Kbd($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Kbd);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("kbd");
  const kbdCls = kbd({ class: clsx_default(theme, $$props.class) });
  var $$exports = { ...legacy_api() };
  var kbd_1 = root38();
  attribute_effect(kbd_1, () => ({ ...restProps, class: kbdCls }));
  var node = child(kbd_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Kbd, 15, 2);
  reset(kbd_1);
  append($$anchor, kbd_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Kbd = hmr(Kbd, () => Kbd[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Kbd[HMR].source;
    set(Kbd[HMR].source, module.default[HMR].original);
  });
}
var Kbd_default = Kbd;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/list-group/theme.js
var listGroup = T({
  base: "flex bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 divide-gray-200 dark:divide-gray-600",
  variants: {
    rounded: {
      true: "rounded-lg",
      false: ""
    },
    border: {
      true: "border border-gray-200 dark:border-gray-700",
      false: ""
    },
    horizontal: {
      true: "flex-row divide-x",
      false: "flex-col divide-y"
    }
  },
  compoundVariants: [
    {
      border: true,
      class: "divide-gray-200 dark:divide-gray-700"
    }
  ],
  defaultVariants: {
    rounded: true,
    border: true,
    horizontal: false
  }
});
var listGroupItem = T({
  base: "py-2 px-4 w-full text-sm font-medium list-none flex items-center text-left gap-2",
  variants: {
    state: {
      normal: "",
      current: "text-white bg-primary-700 dark:text-white dark:bg-gray-800",
      disabled: "text-gray-900 bg-gray-100 dark:bg-gray-600 dark:text-gray-400"
    },
    active: {
      true: "",
      false: ""
    },
    horizontal: {
      true: "first:rounded-s-lg last:rounded-e-lg",
      false: "first:rounded-t-lg last:rounded-b-lg"
    }
  },
  compoundVariants: [
    {
      active: true,
      state: "disabled",
      class: "cursor-not-allowed"
    },
    {
      active: true,
      state: "normal",
      class: "hover:bg-gray-100 hover:text-primary-700 dark:hover:bg-gray-600 dark:hover:text-white focus:z-40 focus:outline-hidden focus:ring-2 focus:ring-primary-700 focus:text-primary-700 dark:focus:ring-gray-500 dark:focus:text-white"
    }
    // {
    //   horizontal: true,
    //   class: "focus:first:rounded-s-lg focus:last:rounded-e-lg"
    // },
    // {
    //   horizontal: false,
    //   class: "focus:first:rounded-t-lg focus:last:rounded-b-lg"
    // }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte
ListgroupItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/list-group/ListgroupItem.svelte";
var root_121 = add_locations(from_html(`<!> <!>`, 1), ListgroupItem[FILENAME], []);
var root_57 = add_locations(from_html(`<li><!></li>`), ListgroupItem[FILENAME], [[31, 2]]);
var root_73 = add_locations(from_html(`<button><!></button>`), ListgroupItem[FILENAME], [[35, 2]]);
var root_84 = add_locations(from_html(`<a><!></a>`), ListgroupItem[FILENAME], [[39, 2]]);
function ListgroupItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ListgroupItem);
  const nameOrChildren = wrap_snippet(ListgroupItem, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = root_121();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        {
          let $0 = user_derived(() => clsx_default(iconClass()));
          add_svelte_meta(
            () => component(node_1, () => $$props.Icon, ($$anchor4, Icon_1) => {
              Icon_1($$anchor4, {
                get class() {
                  return get($0);
                }
              });
            }),
            "component",
            ListgroupItem,
            21,
            4,
            { componentTag: "Icon" }
          );
        }
        append($$anchor3, fragment_1);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.Icon) $$render(consequent);
        }),
        "if",
        ListgroupItem,
        20,
        2
      );
    }
    var node_2 = sibling(node, 2);
    {
      var consequent_1 = ($$anchor3) => {
        var fragment_2 = comment();
        var node_3 = first_child(fragment_2);
        add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", ListgroupItem, 24, 4);
        append($$anchor3, fragment_2);
      };
      var alternate = ($$anchor3) => {
        var text2 = text();
        template_effect(() => set_text(text2, $$props.name));
        append($$anchor3, text2);
      };
      add_svelte_meta(
        () => if_block(node_2, ($$render) => {
          if ($$props.children) $$render(consequent_1);
          else $$render(alternate, false);
        }),
        "if",
        ListgroupItem,
        23,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let active = prop($$props, "active", 7), horizontal = prop($$props, "horizontal", 7), iconClass = prop($$props, "iconClass", 3, "me-2.5 h-15 w-15"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "active",
      "current",
      "disabled",
      "horizontal",
      "name",
      "Icon",
      "class",
      "iconClass"
    ],
    "restProps"
  );
  const theme = getTheme("listGroupItem");
  active(active() ?? getContext("listGrpActive"));
  horizontal(horizontal() ?? getContext("listGrpHorizontal"));
  let state2 = tag(user_derived(() => $$props.disabled ? "disabled" : $$props.current ? "current" : "normal"), "state");
  let itemClass = tag(
    user_derived(() => listGroupItem({
      state: get(state2),
      active: active(),
      horizontal: horizontal(),
      class: clsx_default(theme, $$props.class)
    })),
    "itemClass"
  );
  var $$exports = { ...legacy_api() };
  var fragment_4 = comment();
  var node_4 = first_child(fragment_4);
  {
    var consequent_2 = ($$anchor2) => {
      var li = root_57();
      var node_5 = child(li);
      add_svelte_meta(() => nameOrChildren(node_5), "render", ListgroupItem, 32, 4);
      reset(li);
      template_effect(() => set_class(li, 1, clsx2(get(itemClass))));
      append($$anchor2, li);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_6 = first_child(fragment_5);
      {
        var consequent_3 = ($$anchor3) => {
          var button2 = root_73();
          attribute_effect(button2, () => ({
            type: "button",
            ...restProps,
            class: get(itemClass),
            disabled: $$props.disabled,
            "aria-current": $$props.current
          }));
          var node_7 = child(button2);
          add_svelte_meta(() => nameOrChildren(node_7), "render", ListgroupItem, 36, 4);
          reset(button2);
          append($$anchor3, button2);
        };
        var alternate_1 = ($$anchor3) => {
          var a2 = root_84();
          attribute_effect(a2, () => ({
            ...restProps,
            class: get(itemClass),
            "aria-current": $$props.current
          }));
          var node_8 = child(a2);
          add_svelte_meta(() => nameOrChildren(node_8), "render", ListgroupItem, 40, 4);
          reset(a2);
          append($$anchor3, a2);
        };
        add_svelte_meta(
          () => if_block(
            node_6,
            ($$render) => {
              if (strict_equals($$props.href, void 0)) $$render(consequent_3);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          ListgroupItem,
          34,
          0
        );
      }
      append($$anchor2, fragment_5);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (strict_equals($$props.href, void 0) && !active()) $$render(consequent_2);
        else $$render(alternate_2, false);
      }),
      "if",
      ListgroupItem,
      30,
      0
    );
  }
  append($$anchor, fragment_4);
  return pop($$exports);
}
if (import.meta.hot) {
  ListgroupItem = hmr(ListgroupItem, () => ListgroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListgroupItem[HMR].source;
    set(ListgroupItem[HMR].source, module.default[HMR].original);
  });
}
var ListgroupItem_default = ListgroupItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte
Listgroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/list-group/Listgroup.svelte";
function Listgroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Listgroup);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "active",
      "onclick",
      "horizontal",
      "rounded",
      "border",
      "class",
      "itemClass",
      "iconClass"
    ],
    "restProps"
  );
  const theme = getTheme("listGroup");
  const base = tag(
    user_derived(() => listGroup({
      rounded: $$props.rounded,
      border: $$props.border,
      horizontal: $$props.horizontal,
      class: clsx_default(theme, $$props.class)
    })),
    "base"
  );
  let tag2 = $$props.active ? "div" : "ul";
  setContext("listGrpActive", $$props.active);
  setContext("listGrpHorizontal", $$props.horizontal);
  function createItemClickHandler(item) {
    return function(event2) {
      if ($$props.onclick) {
        const itemClickEvent = { ...event2, detail: item };
        $$props.onclick(itemClickEvent);
      }
    };
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(() => tag2);
    validate_dynamic_element_tag(() => tag2);
    element(
      node,
      () => tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({ ...restProps, class: get(base) }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        {
          var consequent_2 = ($$anchor3) => {
            var fragment_2 = comment();
            var node_2 = first_child(fragment_2);
            add_svelte_meta(
              () => each(node_2, 17, () => $$props.items, index, ($$anchor4, item) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                {
                  var consequent = ($$anchor5) => {
                    var fragment_4 = comment();
                    var node_4 = first_child(fragment_4);
                    add_svelte_meta(() => snippet(node_4, () => $$props.children, () => get(item)), "render", Listgroup, 34, 8);
                    append($$anchor5, fragment_4);
                  };
                  var alternate_1 = ($$anchor5) => {
                    var fragment_5 = comment();
                    var node_5 = first_child(fragment_5);
                    {
                      var consequent_1 = ($$anchor6) => {
                        var fragment_6 = comment();
                        var node_6 = first_child(fragment_6);
                        {
                          let $0 = user_derived(() => clsx_default($$props.itemClass));
                          let $1 = user_derived(() => clsx_default($$props.iconClass));
                          let $2 = user_derived(() => createItemClickHandler(get(item)));
                          add_svelte_meta(
                            () => ListgroupItem_default(node_6, {
                              href: void 0,
                              get class() {
                                return get($0);
                              },
                              get iconClass() {
                                return get($1);
                              },
                              get active() {
                                return $$props.active;
                              },
                              get horizontal() {
                                return $$props.horizontal;
                              },
                              get onclick() {
                                return get($2);
                              },
                              children: wrap_snippet(Listgroup, ($$anchor7, $$slotProps) => {
                                next();
                                var text2 = text();
                                template_effect(() => set_text(text2, get(item)));
                                append($$anchor7, text2);
                              }),
                              $$slots: { default: true }
                            }),
                            "component",
                            Listgroup,
                            36,
                            8,
                            { componentTag: "ListgroupItem" }
                          );
                        }
                        append($$anchor6, fragment_6);
                      };
                      var alternate = ($$anchor6) => {
                        var fragment_8 = comment();
                        var node_7 = first_child(fragment_8);
                        {
                          let $0 = user_derived(() => clsx_default($$props.itemClass));
                          let $1 = user_derived(() => clsx_default($$props.iconClass));
                          let $2 = user_derived(() => get(item).onclick ?? createItemClickHandler(get(item)));
                          add_svelte_meta(
                            () => ListgroupItem_default(node_7, spread_props(
                              {
                                get href() {
                                  return get(item).href;
                                },
                                get class() {
                                  return get($0);
                                },
                                get iconClass() {
                                  return get($1);
                                },
                                get active() {
                                  return $$props.active;
                                },
                                get horizontal() {
                                  return $$props.horizontal;
                                }
                              },
                              () => get(item),
                              {
                                get onclick() {
                                  return get($2);
                                }
                              }
                            )),
                            "component",
                            Listgroup,
                            38,
                            8,
                            { componentTag: "ListgroupItem" }
                          );
                        }
                        append($$anchor6, fragment_8);
                      };
                      add_svelte_meta(
                        () => if_block(
                          node_5,
                          ($$render) => {
                            if (strict_equals(typeof get(item), "string")) $$render(consequent_1);
                            else $$render(alternate, false);
                          },
                          true
                        ),
                        "if",
                        Listgroup,
                        35,
                        6
                      );
                    }
                    append($$anchor5, fragment_5);
                  };
                  add_svelte_meta(
                    () => if_block(node_3, ($$render) => {
                      if ($$props.children) $$render(consequent);
                      else $$render(alternate_1, false);
                    }),
                    "if",
                    Listgroup,
                    33,
                    6
                  );
                }
                append($$anchor4, fragment_3);
              }),
              "each",
              Listgroup,
              32,
              4
            );
            append($$anchor3, fragment_2);
          };
          var alternate_2 = ($$anchor3) => {
            var fragment_9 = comment();
            var node_8 = first_child(fragment_9);
            add_svelte_meta(() => snippet(node_8, () => $$props.children ?? noop, () => $$props.items?.[0] ?? ""), "render", Listgroup, 42, 4);
            append($$anchor3, fragment_9);
          };
          add_svelte_meta(
            () => if_block(node_1, ($$render) => {
              if ($$props.items?.length) $$render(consequent_2);
              else $$render(alternate_2, false);
            }),
            "if",
            Listgroup,
            31,
            2
          );
        }
        append($$anchor2, fragment_1);
      },
      void 0,
      [30, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Listgroup = hmr(Listgroup, () => Listgroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Listgroup[HMR].source;
    set(Listgroup[HMR].source, module.default[HMR].original);
  });
}
var Listgroup_default = Listgroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/mega-menu/theme.js
var megamenu = T({
  slots: {
    base: "w-fit bg-white dark:bg-gray-700 text-gray-700 dark:text-gray-200 rounded-lg border border-gray-100 dark:border-gray-600 divide-gray-100 dark:divide-gray-600",
    div: "flex flex-col md:flex-row p-4 max-w-(--breakpoint-md) justify-center mx-auto mt-2",
    ul: "grid grid-flow-row gap-y-4 md:gap-x-0 auto-col-max auto-row-max grid-cols-2 md:grid-cols-3 text-sm font-medium",
    extra: "md:w-1/3 mt-4 md:mt-0"
  },
  variants: {
    full: {
      true: { base: "border-y w-full ml-0 rounded-none" }
    },
    hasExtra: {
      true: {}
    }
  },
  compoundVariants: [
    {
      full: true,
      hasExtra: true,
      class: { ul: "grid-cols-2 md:w-2/3" }
    }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte
MegaMenu[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/mega-menu/MegaMenu.svelte";
var root_214 = add_locations(from_html(`<li><!></li>`), MegaMenu[FILENAME], [[28, 8]]);
var root_411 = add_locations(from_html(`<div><!></div>`), MegaMenu[FILENAME], [[35, 23]]);
var root_122 = add_locations(from_html(`<div><ul></ul> <!></div>`), MegaMenu[FILENAME], [[25, 2, [[26, 4]]]]);
function MegaMenu($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, MegaMenu);
  var $$ownership_validator = create_ownership_validator($$props);
  let items = prop($$props, "items", 19, () => []), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "extra",
      "items",
      "full",
      "ulClass",
      "isOpen",
      "class",
      "extraClass",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("MegaMenu", { ulClass: $$props.ulClass, extraClass: $$props.extraClass }, { ulClass: "ul", extraClass: "extra" });
  const styling = tag(user_derived(() => $$props.classes ?? { ul: $$props.ulClass, extra: $$props.extraClass }), "styling");
  const theme = getTheme("megamenu");
  const $$d = tag(user_derived(() => megamenu({ full: $$props.full, hasExtra: !!$$props.extra })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), div = tag(user_derived(() => get($$d).div), "div"), ul = tag(user_derived(() => get($$d).ul), "ul"), extraCls = tag(user_derived(() => get($$d).extra), "extraCls");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => $$props.full ? "default" : "dropdown");
    let $1 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    add_svelte_meta(
      () => Popper_default(node, spread_props(
        {
          get color() {
            return get($0);
          },
          arrow: false,
          trigger: "click",
          placement: "bottom",
          get yOnly() {
            return $$props.full;
          }
        },
        () => restProps,
        {
          get class() {
            return get($1);
          },
          get isOpen() {
            return isOpen();
          },
          set isOpen($$value) {
            isOpen($$value);
          },
          children: wrap_snippet(MegaMenu, ($$anchor2, $$slotProps) => {
            var div_1 = root_122();
            var ul_1 = child(div_1);
            add_svelte_meta(
              () => each(
                ul_1,
                21,
                items,
                index,
                ($$anchor3, item, index2) => {
                  var li = root_214();
                  var node_1 = child(li);
                  add_svelte_meta(() => snippet(node_1, () => $$props.children, () => ({ item: get(item), index: index2 })), "render", MegaMenu, 29, 10);
                  reset(li);
                  append($$anchor3, li);
                },
                ($$anchor3) => {
                  var fragment_1 = comment();
                  var node_2 = first_child(fragment_1);
                  add_svelte_meta(() => snippet(node_2, () => $$props.children, () => ({ item: items()[0], index: 0 })), "render", MegaMenu, 32, 8);
                  append($$anchor3, fragment_1);
                }
              ),
              "each",
              MegaMenu,
              27,
              6
            );
            reset(ul_1);
            var node_3 = sibling(ul_1, 2);
            {
              var consequent = ($$anchor3) => {
                var div_2 = root_411();
                var node_4 = child(div_2);
                add_svelte_meta(() => snippet(node_4, () => $$props.extra), "render", MegaMenu, 35, 91);
                reset(div_2);
                template_effect(($02) => set_class(div_2, 1, $02), [
                  () => clsx2(get(extraCls)({ class: clsx_default(theme?.extra, get(styling).extra) }))
                ]);
                append($$anchor3, div_2);
              };
              add_svelte_meta(
                () => if_block(node_3, ($$render) => {
                  if ($$props.full && $$props.extra) $$render(consequent);
                }),
                "if",
                MegaMenu,
                35,
                4
              );
            }
            reset(div_1);
            template_effect(
              ($02, $12) => {
                set_class(div_1, 1, $02);
                set_class(ul_1, 1, $12);
              },
              [
                () => clsx2(get(div)({ class: clsx_default(theme?.div, $$props.classes?.div) })),
                () => clsx2(get(ul)({ class: clsx_default(theme?.ul, get(styling).ul) }))
              ]
            );
            append($$anchor2, div_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      MegaMenu,
      24,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  MegaMenu = hmr(MegaMenu, () => MegaMenu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MegaMenu[HMR].source;
    set(MegaMenu[HMR].source, module.default[HMR].original);
  });
}
var MegaMenu_default = MegaMenu;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/modal/theme.js
var modal = T({
  extend: dialog,
  slots: {
    base: "w-full rounded-lg divide-y text-gray-500 dark:text-gray-400 border-gray-300 dark:border-gray-700 divide-gray-300 dark:divide-gray-700 bg-white dark:bg-gray-800 pointer-events-auto",
    form: "rounded-lg divide-y",
    header: "flex items-center p-4 md:p-5 justify-between rounded-t-lg shrink-0 text-xl font-semibold text-gray-900 dark:text-white",
    footer: "flex items-center p-4 md:p-5 space-x-3 rtl:space-x-reverse rounded-b-lg shrink-0",
    body: "p-4 md:p-5 space-y-4 overflow-y-auto overscroll-contain"
  },
  variants: {
    fullscreen: {
      true: {
        base: "fixed inset-0 w-screen h-screen max-w-none max-h-none m-0 p-0 border-none rounded-none bg-white dark:bg-gray-900"
      }
    },
    placement: {
      "top-left": { base: "mb-auto mr-auto" },
      "top-center": { base: "mb-auto mx-auto" },
      "top-right": { base: "mb-auto ml-auto" },
      "center-left": { base: "my-auto mr-auto" },
      center: { base: "my-auto mx-auto" },
      "center-right": { base: "my-auto ml-auto" },
      "bottom-left": { base: "mt-auto mr-auto" },
      "bottom-center": { base: "mt-auto mx-auto" },
      "bottom-right": { base: "mt-auto ml-auto" }
    },
    size: {
      none: { base: "" },
      xs: { base: "max-w-md" },
      sm: { base: "max-w-lg" },
      md: { base: "max-w-2xl" },
      lg: { base: "max-w-4xl" },
      xl: { base: "max-w-7xl" }
    }
  },
  defaultVariants: {
    placement: "center",
    size: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/modal/Modal.svelte
Modal[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/modal/Modal.svelte";
var root_412 = add_locations(from_html(`<span class="text-sm text-gray-500 dark:text-gray-400"> </span>`), Modal[FILENAME], [[108, 14]]);
var root_314 = add_locations(from_html(`<div class="flex w-full items-center justify-between"><h3 class="flex-1"> </h3> <div class="flex items-center gap-2"><!> <!></div></div>`), Modal[FILENAME], [[104, 8, [[105, 10], [106, 10]]]]);
var root_215 = add_locations(from_html(`<div><!></div>`), Modal[FILENAME], [[102, 4]]);
var root_85 = add_locations(from_html(`<div><!></div>`), Modal[FILENAME], [[128, 4]]);
var root_123 = add_locations(from_html(`<!> <div><!></div> <!>`, 1), Modal[FILENAME], [[123, 2]]);
function Modal($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Modal);
  var $$ownership_validator = create_ownership_validator($$props);
  let open = prop($$props, "open", 15, false), permanent = prop($$props, "permanent", 3, false), dismissable = prop($$props, "dismissable", 3, true), size2 = prop($$props, "size", 3, "md"), transition2 = prop($$props, "transition", 3, fade), fullscreen = prop($$props, "fullscreen", 3, false), countdownConfig = prop($$props, "countdown", 19, () => ({ number: 0, text: "You can close this in {count} seconds" })), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "footer",
      "title",
      "open",
      "permanent",
      "dismissable",
      "closeBtnClass",
      "headerClass",
      "bodyClass",
      "footerClass",
      "size",
      "placement",
      "class",
      "classes",
      "transitionParams",
      "transition",
      "fullscreen",
      "countdown"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Modal",
    {
      headerClass: $$props.headerClass,
      bodyClass: $$props.bodyClass,
      footerClass: $$props.footerClass,
      closeBtnClass: $$props.closeBtnClass
    },
    {
      bodyClass: "body",
      headerClass: "header",
      footerClass: "footer",
      closeBtnClass: "close"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      header: $$props.headerClass,
      body: $$props.bodyClass,
      footer: $$props.footerClass,
      close: $$props.closeBtnClass
    }),
    "styling"
  );
  const theme = getTheme("modal");
  const paramsDefault = { duration: 100, easing: sineIn };
  const paramsOptions = tag(user_derived(() => $$props.transitionParams ?? paramsDefault), "paramsOptions");
  const $$d = tag(user_derived(() => modal({ placement: $$props.placement, size: size2() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), headerCls = tag(user_derived(() => get($$d).header), "headerCls"), footerCls = tag(user_derived(() => get($$d).footer), "footerCls"), body = tag(user_derived(() => get($$d).body), "body");
  let countdownRemaining = tag(state(proxy(countdownConfig().number)), "countdownRemaining");
  let countdownActive = tag(state(countdownConfig().number > 0), "countdownActive");
  let outsideclose = tag(user_derived(() => get(countdownRemaining) > 0 ? false : true), "outsideclose");
  let countdownInterval = null;
  user_effect(() => {
    if (open() && countdownConfig().number > 0) {
      set(countdownRemaining, countdownConfig().number, true);
      set(countdownActive, true);
      startCountdown();
    } else if (!open()) {
      stopCountdown();
    }
  });
  function startCountdown() {
    stopCountdown();
    countdownInterval = setInterval(
      () => {
        update(countdownRemaining, -1);
        if (get(countdownRemaining) <= 0) {
          set(countdownActive, false);
          stopCountdown();
        }
      },
      1e3
    );
  }
  function stopCountdown() {
    if (countdownInterval) {
      clearInterval(countdownInterval);
      countdownInterval = null;
    }
  }
  onMount(() => {
    return () => stopCountdown();
  });
  const shouldShowCloseButton = tag(user_derived(() => dismissable() && !permanent() && !get(countdownActive)), "shouldShowCloseButton");
  const shouldShowCountdownMessage = tag(user_derived(() => get(countdownActive) && get(countdownRemaining) > 0), "shouldShowCountdownMessage");
  const displayCountdownText = tag(
    user_derived(() => () => {
      if (strict_equals(typeof countdownConfig().text, "function")) {
        return countdownConfig().text(get(countdownRemaining));
      } else {
        return (countdownConfig().text ?? "").replace("{count}", get(countdownRemaining).toString());
      }
    }),
    "displayCountdownText"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => dismissable() && !$$props.title && !permanent() && !get(countdownActive));
    let $1 = user_derived(() => get(base)({
      fullscreen: fullscreen(),
      class: clsx_default(theme?.base, $$props.class)
    }));
    $$ownership_validator.binding("open", Dialog_default, open);
    add_svelte_meta(
      () => Dialog_default(node, spread_props(
        {
          get transition() {
            return transition2();
          },
          get dismissable() {
            return get($0);
          },
          get transitionParams() {
            return get(paramsOptions);
          },
          get classes() {
            return $$props.classes;
          },
          get count() {
            return get(countdownRemaining);
          },
          get outsideclose() {
            return get(outsideclose);
          }
        },
        () => restProps,
        {
          get class() {
            return get($1);
          },
          get open() {
            return open();
          },
          set open($$value) {
            open($$value);
          },
          children: wrap_snippet(Modal, ($$anchor2, $$slotProps) => {
            var fragment_1 = root_123();
            var node_1 = first_child(fragment_1);
            {
              var consequent_4 = ($$anchor3) => {
                var div = root_215();
                var node_2 = child(div);
                {
                  var consequent_2 = ($$anchor4) => {
                    var div_1 = root_314();
                    var h3 = child(div_1);
                    var text2 = child(h3, true);
                    reset(h3);
                    var div_2 = sibling(h3, 2);
                    var node_3 = child(div_2);
                    {
                      var consequent = ($$anchor5) => {
                        var span2 = root_412();
                        var text_1 = child(span2, true);
                        reset(span2);
                        template_effect(($02) => set_text(text_1, $02), [() => get(displayCountdownText)()]);
                        append($$anchor5, span2);
                      };
                      add_svelte_meta(
                        () => if_block(node_3, ($$render) => {
                          if (get(shouldShowCountdownMessage)) $$render(consequent);
                        }),
                        "if",
                        Modal,
                        107,
                        12
                      );
                    }
                    var node_4 = sibling(node_3, 2);
                    {
                      var consequent_1 = ($$anchor5) => {
                        var fragment_2 = comment();
                        var node_5 = first_child(fragment_2);
                        {
                          let $02 = user_derived(() => clsx_default(get(styling).close));
                          add_svelte_meta(
                            () => CloseButton_default(node_5, {
                              type: "submit",
                              formnovalidate: true,
                              get class() {
                                return get($02);
                              }
                            }),
                            "component",
                            Modal,
                            113,
                            14,
                            { componentTag: "CloseButton" }
                          );
                        }
                        append($$anchor5, fragment_2);
                      };
                      add_svelte_meta(
                        () => if_block(node_4, ($$render) => {
                          if (get(shouldShowCloseButton)) $$render(consequent_1);
                        }),
                        "if",
                        Modal,
                        112,
                        12
                      );
                    }
                    reset(div_2);
                    reset(div_1);
                    template_effect(() => set_text(text2, $$props.title));
                    append($$anchor4, div_1);
                  };
                  var alternate = ($$anchor4) => {
                    var fragment_3 = comment();
                    var node_6 = first_child(fragment_3);
                    {
                      var consequent_3 = ($$anchor5) => {
                        var fragment_4 = comment();
                        var node_7 = first_child(fragment_4);
                        add_svelte_meta(() => snippet(node_7, () => $$props.header), "render", Modal, 118, 8);
                        append($$anchor5, fragment_4);
                      };
                      add_svelte_meta(
                        () => if_block(
                          node_6,
                          ($$render) => {
                            if ($$props.header) $$render(consequent_3);
                          },
                          true
                        ),
                        "if",
                        Modal,
                        117,
                        6
                      );
                    }
                    append($$anchor4, fragment_3);
                  };
                  add_svelte_meta(
                    () => if_block(node_2, ($$render) => {
                      if ($$props.title) $$render(consequent_2);
                      else $$render(alternate, false);
                    }),
                    "if",
                    Modal,
                    103,
                    6
                  );
                }
                reset(div);
                template_effect(($02) => set_class(div, 1, $02), [
                  () => clsx2(get(headerCls)({ class: clsx_default(theme?.header, get(styling).header) }))
                ]);
                append($$anchor3, div);
              };
              add_svelte_meta(
                () => if_block(node_1, ($$render) => {
                  if ($$props.title || $$props.header) $$render(consequent_4);
                }),
                "if",
                Modal,
                101,
                2
              );
            }
            var div_3 = sibling(node_1, 2);
            var node_8 = child(div_3);
            add_svelte_meta(() => snippet(node_8, () => $$props.children ?? noop), "render", Modal, 124, 4);
            reset(div_3);
            var node_9 = sibling(div_3, 2);
            {
              var consequent_5 = ($$anchor3) => {
                var div_4 = root_85();
                var node_10 = child(div_4);
                add_svelte_meta(() => snippet(node_10, () => $$props.footer), "render", Modal, 129, 6);
                reset(div_4);
                template_effect(($02) => set_class(div_4, 1, $02), [
                  () => clsx2(get(footerCls)({ class: clsx_default(theme?.footer, get(styling).footer) }))
                ]);
                append($$anchor3, div_4);
              };
              add_svelte_meta(
                () => if_block(node_9, ($$render) => {
                  if ($$props.footer) $$render(consequent_5);
                }),
                "if",
                Modal,
                127,
                2
              );
            }
            template_effect(($02) => set_class(div_3, 1, $02), [
              () => clsx2(get(body)({ class: clsx_default(theme?.body, get(styling).body) }))
            ]);
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      Modal,
      100,
      0,
      { componentTag: "Dialog" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Modal = hmr(Modal, () => Modal[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Modal[HMR].source;
    set(Modal[HMR].source, module.default[HMR].original);
  });
}
var Modal_default = Modal;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/theme.js
var navbar = T({
  base: "relative w-full px-2 py-2.5 sm:px-4"
});
var navbarBrand = T({
  base: "flex items-center"
});
var navbarContainer = T({
  base: "mx-auto flex flex-wrap items-center justify-between ",
  variants: {
    fluid: { true: "w-full", false: "container" }
  }
});
var navbarUl = T({
  slots: {
    base: "",
    ul: "flex flex-col p-4 mt-0 rtl:space-x-reverse",
    active: "text-white bg-primary-700 dark:bg-primary-600",
    nonActive: "hover:text-primary-500 text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
  },
  variants: {
    breakpoint: {
      sm: {
        base: "w-full sm:block sm:w-auto",
        ul: "sm:flex-row sm:text-sm sm:font-medium",
        active: "sm:bg-transparent sm:text-primary-700 sm:dark:text-white sm:dark:bg-transparent",
        nonActive: "sm:hover:bg-transparent sm:border-0 sm:hover:text-primary-700 dark:sm:text-gray-400 sm:dark:hover:text-white sm:dark:hover:bg-transparent"
      },
      md: {
        base: "w-full md:block md:w-auto",
        ul: "md:flex-row md:text-sm md:font-medium",
        active: "md:bg-transparent md:text-primary-700 md:dark:text-white md:dark:bg-transparent",
        nonActive: "md:hover:bg-transparent md:border-0 md:hover:text-primary-700 dark:md:text-gray-400 md:dark:hover:text-white md:dark:hover:bg-transparent"
      },
      lg: {
        base: "w-full lg:block lg:w-auto",
        ul: "lg:flex-row lg:text-sm lg:font-medium",
        active: "lg:bg-transparent lg:text-primary-700 lg:dark:text-white lg:dark:bg-transparent",
        nonActive: "lg:hover:bg-transparent lg:border-0 lg:hover:text-primary-700 dark:lg:text-gray-400 lg:dark:hover:text-white lg:dark:hover:bg-transparent"
      },
      xl: {
        base: "w-full xl:block xl:w-auto",
        ul: "xl:flex-row xl:text-sm xl:font-medium",
        active: "xl:bg-transparent xl:text-primary-700 xl:dark:text-white xl:dark:bg-transparent",
        nonActive: "xl:hover:bg-transparent xl:border-0 xl:hover:text-primary-700 dark:xl:text-gray-400 xl:dark:hover:text-white xl:dark:hover:bg-transparent"
      }
    },
    hidden: {
      false: {
        base: "absolute top-full left-0 right-0 z-50 w-full",
        ul: "border rounded-lg bg-white shadow-lg dark:bg-gray-800 dark:border-gray-700 text-gray-700 dark:text-gray-400 border-gray-100 dark:border-gray-700 divide-gray-100 dark:divide-gray-700"
      },
      true: {
        base: "hidden"
      }
    }
  },
  compoundVariants: [
    // Compound variants for breakpoint + hidden combinations
    {
      breakpoint: "sm",
      hidden: false,
      class: {
        base: "sm:static sm:z-auto",
        ul: "sm:border-none sm:rounded-none sm:bg-inherit dark:sm:bg-inherit sm:shadow-none"
      }
    },
    {
      breakpoint: "md",
      hidden: false,
      class: {
        base: "md:static md:z-auto",
        ul: "md:border-none md:rounded-none md:bg-inherit dark:md:bg-inherit md:shadow-none"
      }
    },
    {
      breakpoint: "lg",
      hidden: false,
      class: {
        base: "lg:static lg:z-auto",
        ul: "lg:border-none lg:rounded-none lg:bg-inherit dark:lg:bg-inherit lg:shadow-none"
      }
    },
    {
      breakpoint: "xl",
      hidden: false,
      class: {
        base: "xl:static xl:z-auto",
        ul: "xl:border-none xl:rounded-none xl:bg-inherit dark:xl:bg-inherit xl:shadow-none"
      }
    }
  ],
  defaultVariants: {
    breakpoint: "md"
  }
});
var navbarLi = T({
  base: "block py-2 pe-4 ps-3 rounded-sm",
  variants: {
    breakpoint: {
      sm: "sm:p-2 sm:border-0",
      md: "md:p-2 md:border-0",
      lg: "lg:p-2 lg:border-0",
      xl: "xl:p-2 xl:border-0"
    },
    hidden: {
      false: "text-gray-700 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
    }
  },
  compoundVariants: [
    {
      breakpoint: "sm",
      hidden: false,
      class: "sm:hover:bg-transparent sm:hover:text-primary-700 sm:dark:hover:text-white sm:dark:hover:bg-transparent"
    },
    {
      breakpoint: "md",
      hidden: false,
      class: "md:hover:bg-transparent md:hover:text-primary-700 md:dark:hover:text-white md:dark:hover:bg-transparent"
    },
    {
      breakpoint: "lg",
      hidden: false,
      class: "lg:hover:bg-transparent lg:hover:text-primary-700 lg:dark:hover:text-white lg:dark:hover:bg-transparent"
    },
    {
      breakpoint: "xl",
      hidden: false,
      class: "xl:hover:bg-transparent xl:hover:text-primary-700 xl:dark:hover:text-white xl:dark:hover:bg-transparent"
    }
  ],
  defaultVariants: {
    breakpoint: "md"
  }
});
var navbarHamburger = T({
  slots: {
    base: "ms-3",
    menu: "h-6 w-6 shrink-0"
  },
  variants: {
    breakpoint: {
      sm: {
        base: "sm:hidden"
      },
      md: {
        base: "md:hidden"
      },
      lg: {
        base: "lg:hidden"
      },
      xl: {
        base: "xl:hidden"
      }
    }
  },
  defaultVariants: {
    breakpoint: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte
NavContainer[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavContainer.svelte";
var root39 = add_locations(from_html(`<div><!></div>`), NavContainer[FILENAME], [[12, 0]]);
function NavContainer($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavContainer);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "fluid",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("navbarContainer");
  var $$exports = { ...legacy_api() };
  var div = root39();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => navbarContainer({ fluid: $$props.fluid, class: clsx_default(theme, $$props.class) })
  ]);
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", NavContainer, 13, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  NavContainer = hmr(NavContainer, () => NavContainer[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavContainer[HMR].source;
    set(NavContainer[HMR].source, module.default[HMR].original);
  });
}
var NavContainer_default = NavContainer;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/Navbar.svelte
Navbar[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/Navbar.svelte";
var root40 = add_locations(from_html(`<nav><div><!></div></nav>`), Navbar[FILENAME], [[35, 0, [[36, 2]]]]);
function Navbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Navbar);
  let closeOnClickOutside = prop($$props, "closeOnClickOutside", 3, true), breakpoint = prop($$props, "breakpoint", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "fluid",
      "navContainerClass",
      "class",
      "closeOnClickOutside",
      "breakpoint"
    ],
    "restProps"
  );
  const theme = getTheme("navbar");
  let navState = tag_proxy(proxy({ hidden: true }), "navState");
  setContext("navState", navState);
  setContext("breakpoint", breakpoint());
  let navbarElement;
  let toggle2 = () => {
    navState.hidden = !navState.hidden;
  };
  function handleDocumentClick(event2) {
    if (!closeOnClickOutside()) return;
    if (!navState.hidden && navbarElement && !navbarElement.contains(event2.target)) {
      navState.hidden = true;
    }
  }
  var $$exports = { ...legacy_api() };
  var nav = root40();
  event("click", $document, handleDocumentClick);
  var div = child(nav);
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [() => navbar({ class: clsx_default(theme, $$props.class) })]);
  var node = child(div);
  {
    let $0 = user_derived(() => clsx_default($$props.navContainerClass));
    add_svelte_meta(
      () => NavContainer_default(node, {
        get fluid() {
          return $$props.fluid;
        },
        get class() {
          return get($0);
        },
        children: wrap_snippet(Navbar, ($$anchor2, $$slotProps) => {
          var fragment = comment();
          var node_1 = first_child(fragment);
          add_svelte_meta(() => snippet(node_1, () => $$props.children, () => ({ hidden: navState.hidden, toggle: toggle2, NavContainer: NavContainer_default })), "render", Navbar, 38, 6);
          append($$anchor2, fragment);
        }),
        $$slots: { default: true }
      }),
      "component",
      Navbar,
      37,
      4,
      { componentTag: "NavContainer" }
    );
  }
  reset(div);
  reset(nav);
  bind_this(nav, ($$value) => navbarElement = $$value, () => navbarElement);
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Navbar = hmr(Navbar, () => Navbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Navbar[HMR].source;
    set(Navbar[HMR].source, module.default[HMR].original);
  });
}
var Navbar_default = Navbar;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte
NavBrand[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavBrand.svelte";
var root41 = add_locations(from_html(`<a><!></a>`), NavBrand[FILENAME], [[12, 0]]);
function NavBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavBrand);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("navbarBrand");
  var $$exports = { ...legacy_api() };
  var a2 = root41();
  attribute_effect(a2, ($0) => ({ ...restProps, class: $0 }), [() => navbarBrand({ class: clsx_default(theme, $$props.class) })]);
  var node = child(a2);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", NavBrand, 13, 2);
  reset(a2);
  append($$anchor, a2);
  return pop($$exports);
}
if (import.meta.hot) {
  NavBrand = hmr(NavBrand, () => NavBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavBrand[HMR].source;
    set(NavBrand[HMR].source, module.default[HMR].original);
  });
}
var NavBrand_default = NavBrand;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavLi.svelte
NavLi[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavLi.svelte";
var root_124 = add_locations(from_html(`<button><!></button>`), NavLi[FILENAME], [[33, 4]]);
var root_216 = add_locations(from_html(`<a><!></a>`), NavLi[FILENAME], [[37, 4]]);
var root42 = add_locations(from_html(`<li><!></li>`), NavLi[FILENAME], [[31, 0]]);
function NavLi($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavLi);
  let navState = getContext("navState");
  let navBreakpoint = getContext("breakpoint");
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onclick",
      "activeClass",
      "nonActiveClass",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("navbarLi");
  let active = tag(
    user_derived(() => navState.activeUrl ? strict_equals($$props.href, navState.activeUrl) : false),
    "active"
  );
  let liClass = tag(
    user_derived(() => navbarLi({
      breakpoint: navBreakpoint,
      hidden: navState.hidden,
      class: clsx_default(
        get(active) ? $$props.activeClass ?? navState.activeClass : $$props.nonActiveClass ?? navState.nonActiveClass,
        theme,
        $$props.class
      )
    })),
    "liClass"
  );
  function handleClick(event2) {
    if (strict_equals($$props.href, void 0, false) && !navState.hidden) {
      navState.hidden = true;
    }
    if ($$props.onclick) {
      $$props.onclick(event2);
    }
  }
  var $$exports = { ...legacy_api() };
  var li = root42();
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var button2 = root_124();
      attribute_effect(button2, () => ({
        role: "presentation",
        onclick: handleClick,
        ...restProps,
        class: get(liClass)
      }));
      var node_1 = child(button2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", NavLi, 34, 6);
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a2 = root_216();
      attribute_effect(a2, () => ({ ...restProps, class: get(liClass), onclick: handleClick }));
      var node_2 = child(a2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", NavLi, 38, 6);
      reset(a2);
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals($$props.href, void 0)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      NavLi,
      32,
      2
    );
  }
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  NavLi = hmr(NavLi, () => NavLi[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavLi[HMR].source;
    set(NavLi[HMR].source, module.default[HMR].original);
  });
}
var NavLi_default = NavLi;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavUl.svelte
NavUl[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavUl.svelte";
var root_125 = add_locations(from_html(`<div><ul><!></ul></div>`), NavUl[FILENAME], [[57, 2, [[58, 4]]]]);
var root_217 = add_locations(from_html(`<div><ul><!></ul></div>`), NavUl[FILENAME], [[63, 2, [[64, 4]]]]);
function NavUl($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavUl);
  let navState = getContext("navState");
  let navBreakpoint = getContext("breakpoint");
  let transition2 = prop($$props, "transition", 3, slide), respectMotionPreference = prop($$props, "respectMotionPreference", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "activeUrl",
      "ulClass",
      "slideParams",
      "transition",
      "transitionParams",
      "activeClass",
      "nonActiveClass",
      "respectMotionPreference",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "NavUl",
    {
      ulClass: $$props.ulClass,
      activeClass: $$props.activeClass,
      nonActiveClass: $$props.nonActiveClass
    },
    {
      ulClass: "ul",
      activeClass: "active",
      nonActiveClass: "nonActive"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      ul: $$props.ulClass,
      active: $$props.activeClass,
      nonActive: $$props.nonActiveClass
    }),
    "styling"
  );
  const theme = getTheme("navbarUl");
  const getDefaultParams = (transitionFn) => {
    if (strict_equals(transitionFn, slide)) return { delay: 0, duration: 200, easing: sineIn };
    if (strict_equals(transitionFn, fly)) return { delay: 0, duration: 200, y: -10, easing: sineIn };
    if (strict_equals(transitionFn, fade)) return { delay: 0, duration: 200, easing: sineIn };
    if (strict_equals(transitionFn, scale)) return { delay: 0, duration: 200, start: 0.95, easing: sineIn };
    return { delay: 0, duration: 200, easing: sineIn };
  };
  const defaultParams = tag(user_derived(() => getDefaultParams(transition2())), "defaultParams");
  const finalParams = tag(user_derived(() => $$props.transitionParams ?? $$props.slideParams ?? get(defaultParams)), "finalParams");
  const transitionOptions = tag(
    user_derived(() => () => {
      if (respectMotionPreference() && prefersReducedMotion.current) {
        return { ...get(finalParams), duration: 0, delay: 0 };
      }
      return get(finalParams);
    }),
    "transitionOptions"
  );
  let hidden = tag(user_derived(() => navState.hidden ?? true), "hidden");
  let $$d = tag(user_derived(() => navbarUl({ hidden: get(hidden), breakpoint: navBreakpoint })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), ul = tag(user_derived(() => get($$d).ul), "ul"), active = tag(user_derived(() => get($$d).active), "active"), nonActive = tag(user_derived(() => get($$d).nonActive), "nonActive");
  user_effect(() => {
    navState.activeClass = get(active)({ class: clsx_default(theme?.active, get(styling).active) });
    navState.nonActiveClass = get(nonActive)({ class: clsx_default(theme?.nonActive, get(styling).nonActive) });
    navState.activeUrl = $$props.activeUrl;
  });
  let divCls = tag(user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) })), "divCls");
  let ulCls = tag(user_derived(() => get(ul)({ class: clsx_default(theme?.ul, get(styling).ul) })), "ulCls");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_125();
      attribute_effect(div, () => ({ ...restProps, class: get(divCls) }));
      var ul_1 = child(div);
      var node_1 = child(ul_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", NavUl, 59, 6);
      reset(ul_1);
      reset(div);
      template_effect(() => set_class(ul_1, 1, clsx2(get(ulCls))));
      transition(3, div, transition2, () => get(transitionOptions)());
      append($$anchor2, div);
    };
    var alternate = ($$anchor2) => {
      var div_1 = root_217();
      attribute_effect(div_1, () => ({ ...restProps, class: get(divCls) }));
      var ul_2 = child(div_1);
      var node_2 = child(ul_2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", NavUl, 65, 6);
      reset(ul_2);
      reset(div_1);
      template_effect(() => set_class(ul_2, 1, clsx2(get(ulCls))));
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(hidden)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      NavUl,
      56,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  NavUl = hmr(NavUl, () => NavUl[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavUl[HMR].source;
    set(NavUl[HMR].source, module.default[HMR].original);
  });
}
var NavUl_default = NavUl;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/Menu.svelte
Menu[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/Menu.svelte";
var root43 = add_locations(from_svg(`<svg><!></svg>`), Menu[FILENAME], [[28, 0]]);
function Menu($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Menu);
  let size2 = prop($$props, "size", 3, "24"), color = prop($$props, "color", 3, "currentColor"), variation = prop($$props, "variation", 3, "outline"), ariaLabel = prop($$props, "ariaLabel", 3, "bars 3"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "color",
      "variation",
      "ariaLabel",
      "class"
    ],
    "restProps"
  );
  let viewBox = tag(state("0 0 24 24"), "viewBox");
  let svgpath = tag(state(""), "svgpath");
  let svgoutline = `<path stroke="${color()}" stroke-linecap="round" stroke-linejoin="round" d="M4 6h16M4 12h16M4 18h16"></path> `;
  let svgsolid = `<path fill="${color()}" clip-rule="evenodd" fill-rule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 10a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zM3 15a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z"></path> `;
  user_effect(() => {
    switch (variation()) {
      case "outline":
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
        break;
      case "solid":
        set(svgpath, svgsolid);
        set(viewBox, "0 0 24 24");
        break;
      default:
        set(svgpath, svgoutline);
        set(viewBox, "0 0 24 24");
    }
  });
  var $$exports = { ...legacy_api() };
  var svg = root43();
  attribute_effect(
    svg,
    ($0) => ({
      xmlns: "http://www.w3.org/2000/svg",
      role: "button",
      tabindex: "0",
      width: size2(),
      height: size2(),
      class: $0,
      ...restProps,
      "aria-label": ariaLabel(),
      fill: "none",
      viewBox: get(viewBox),
      "stroke-width": "2"
    }),
    [() => clsx_default($$props.class)]
  );
  var node = child(svg);
  html(node, () => get(svgpath), true);
  reset(svg);
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Menu = hmr(Menu, () => Menu[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Menu[HMR].source;
    set(Menu[HMR].source, module.default[HMR].original);
  });
}
var Menu_default = Menu;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte
NavHamburger[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/navbar/NavHamburger.svelte";
function NavHamburger($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, NavHamburger);
  let name = prop($$props, "name", 3, "Open main menu"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "onclick",
      "menuClass",
      "class",
      "classes",
      "name"
    ],
    "restProps"
  );
  warnThemeDeprecation("NavHamburger", { menuClass: $$props.menuClass }, { menuClass: "menu" });
  const styling = tag(user_derived(() => $$props.classes ?? { menu: $$props.menuClass }), "styling");
  const theme = getTheme("navbarHamburger");
  const navState = getContext("navState");
  const navBreakpoint = getContext("breakpoint");
  const { base, menu } = navbarHamburger({ breakpoint: navBreakpoint });
  const toggle2 = (ev) => {
    navState.hidden = !navState.hidden;
  };
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => $$props.onclick || toggle2);
    let $1 = user_derived(() => base({ class: clsx_default(theme?.base, $$props.class) }));
    add_svelte_meta(
      () => ToolbarButton_default(node, spread_props(
        {
          get name() {
            return name();
          },
          get onclick() {
            return get($0);
          }
        },
        () => restProps,
        {
          get class() {
            return get($1);
          },
          children: wrap_snippet(NavHamburger, ($$anchor2, $$slotProps) => {
            var fragment_1 = comment();
            var node_1 = first_child(fragment_1);
            {
              let $02 = user_derived(() => menu({ class: clsx_default(theme?.menu, get(styling).menu) }));
              add_svelte_meta(
                () => Menu_default(node_1, {
                  get class() {
                    return get($02);
                  }
                }),
                "component",
                NavHamburger,
                27,
                2,
                { componentTag: "Menu" }
              );
            }
            append($$anchor2, fragment_1);
          }),
          $$slots: { default: true }
        }
      )),
      "component",
      NavHamburger,
      26,
      0,
      { componentTag: "ToolbarButton" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  NavHamburger = hmr(NavHamburger, () => NavHamburger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = NavHamburger[HMR].source;
    set(NavHamburger[HMR].source, module.default[HMR].original);
  });
}
var NavHamburger_default = NavHamburger;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/theme.js
var paginationNav = T({
  slots: {
    base: "inline-flex -space-x-px rtl:space-x-reverse items-center",
    tableDiv: "flex items-center text-sm mb-4",
    span: "font-semibold mx-1",
    prev: "rounded-none",
    next: "rounded-none",
    active: ""
  },
  variants: {
    size: {
      default: "",
      large: ""
    },
    layout: {
      table: { prev: "rounded-s bg-gray-800 hover:bg-gray-900 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white text-white  hover:text-gray-200", next: "text-white bg-gray-800 border-0 border-s border-gray-700 rounded-e hover:bg-gray-900 hover:text-gray-200 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white" },
      navigation: { prev: "rounded-s-lg", next: "rounded-e-lg" },
      pagination: { prev: "rounded-s-lg", next: "rounded-e-lg" }
    }
  },
  defaultVariants: {
    table: false,
    size: "default"
  }
});
var paginationButton = T({
  base: "flex items-center font-medium",
  variants: {
    size: {
      default: "h-8 px-3 text-sm",
      large: "h-10 px-4 text-base"
    },
    active: {
      true: "text-primary-600 border border-gray-300 bg-primary-50 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white",
      false: "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
    },
    group: {
      true: "",
      false: "rounded-lg"
    },
    table: {
      true: "rounded-sm",
      false: "border"
    },
    disabled: {
      true: "cursor-not-allowed opacity-50",
      false: ""
    }
  },
  compoundVariants: [
    {
      group: false,
      table: false,
      class: "rounded-lg"
    }
  ],
  defaultVariants: {
    size: "default",
    active: false,
    group: false,
    table: false
  }
});
var paginationItem = T({
  base: "flex items-center font-medium",
  variants: {
    size: {
      default: "h-8 px-3 text-sm",
      large: "h-10 px-4 text-base"
    },
    active: {
      true: "text-primary-600 border border-gray-300 bg-primary-50 hover:bg-primary-100 hover:text-primary-700 dark:border-gray-700 dark:bg-gray-700 dark:text-white",
      false: "text-gray-500 bg-white hover:bg-gray-100 hover:text-gray-700 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 dark:hover:bg-gray-700 dark:hover:text-white"
    },
    group: {
      true: "",
      false: "rounded-lg"
    },
    table: {
      true: "rounded-sm",
      false: "border"
    }
  },
  compoundVariants: [
    {
      group: false,
      table: false,
      class: "rounded-lg"
    }
  ],
  defaultVariants: {
    size: "default",
    active: false,
    group: false,
    table: false
  }
});
var pagination = T({
  base: "inline-flex -space-x-px rtl:space-x-reverse items-center",
  variants: {
    table: {
      true: "divide-x rtl:divide-x-reverse dark divide-gray-700 dark:divide-gray-700",
      false: ""
    },
    size: {
      default: "",
      large: ""
    }
  },
  defaultVariants: {
    table: false,
    size: "default"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationButton.svelte
PaginationButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationButton.svelte";
var root_126 = add_locations(from_html(`<a><!></a>`), PaginationButton[FILENAME], [[49, 2]]);
var root_315 = add_locations(from_html(`<button><!></button>`), PaginationButton[FILENAME], [[55, 2]]);
function PaginationButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationButton);
  let disabled = prop($$props, "disabled", 3, false), active = prop($$props, "active", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "onclick",
      "disabled",
      "class",
      "href",
      "active"
    ],
    "restProps"
  );
  const theme = getTheme("paginationButton");
  const group2 = getContext("group");
  const table2 = getContext("table");
  const activeClasses = getContext("activeClasses");
  const paginationCls = tag(
    user_derived(() => {
      if (active() && activeClasses) {
        return paginationButton({
          size: getContext("size") ?? $$props.size,
          active: false,
          // Set to false to avoid theme's active styles
          group: group2,
          table: table2,
          disabled: disabled(),
          class: clsx_default(theme, activeClasses, $$props.class)
        });
      }
      return paginationButton({
        size: getContext("size") ?? $$props.size,
        active: active(),
        group: group2,
        table: table2,
        disabled: disabled(),
        class: clsx_default(theme, $$props.class)
      });
    }),
    "paginationCls"
  );
  function handleClick(e) {
    if (disabled()) {
      e.preventDefault();
      return;
    }
    if ($$props.onclick) $$props.onclick();
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a2 = root_126();
      attribute_effect(a2, () => ({
        href: $$props.href,
        ...restProps,
        class: get(paginationCls),
        onclick: handleClick
      }));
      var node_1 = child(a2);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", PaginationButton, 51, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.children) $$render(consequent);
          }),
          "if",
          PaginationButton,
          50,
          4
        );
      }
      reset(a2);
      append($$anchor2, a2);
    };
    var alternate = ($$anchor2) => {
      var button2 = root_315();
      attribute_effect(button2, () => ({
        ...restProps,
        disabled: disabled(),
        class: get(paginationCls),
        onclick: handleClick
      }));
      var node_3 = child(button2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", PaginationButton, 57, 6);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.children) $$render(consequent_2);
          }),
          "if",
          PaginationButton,
          56,
          4
        );
      }
      reset(button2);
      append($$anchor2, button2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.href) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      PaginationButton,
      48,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationButton = hmr(PaginationButton, () => PaginationButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationButton[HMR].source;
    set(PaginationButton[HMR].source, module.default[HMR].original);
  });
}
var PaginationButton_default = PaginationButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationNav.svelte
PaginationNav[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationNav.svelte";
var root_127 = add_locations(from_html(`<div>Showing <span> </span> of <span> </span> Entries</div>`), PaginationNav[FILENAME], [[69, 4, [[70, 14], [72, 6]]]]);
var root_66 = add_locations(from_html(`<li><!></li>`), PaginationNav[FILENAME], [[89, 8]]);
var root44 = add_locations(from_html(`<nav><!> <ul><li><!></li> <!> <li><!></li></ul></nav>`), PaginationNav[FILENAME], [[67, 0, [[77, 2, [[78, 4], [96, 4]]]]]]);
function PaginationNav($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationNav);
  function paginationRange(start, end) {
    return Array.from({ length: end - start + 1 }, (_, i2) => start + i2);
  }
  let currentPage = prop($$props, "currentPage", 3, 1), totalPages = prop($$props, "totalPages", 3, 1), visiblePages = prop(
    $$props,
    "visiblePages",
    3,
    5
    // New prop to control visible pages
  ), layout2 = prop($$props, "layout", 3, "pagination"), nextLabel = prop($$props, "nextLabel", 3, "Next"), previousLabel = prop($$props, "previousLabel", 3, "Previous"), ariaLabel = prop($$props, "ariaLabel", 3, "Page navigation"), size2 = prop($$props, "size", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "currentPage",
      "totalPages",
      "visiblePages",
      "onPageChange",
      "prevContent",
      "nextContent",
      "prevClass",
      "nextClass",
      "layout",
      "nextLabel",
      "previousLabel",
      "ariaLabel",
      "size",
      "class",
      "classes",
      "spanClass",
      "tableDivClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "PaginationNav",
    {
      prevClass: $$props.prevClass,
      nextClass: $$props.nextClass,
      spanClass: $$props.spanClass,
      tableDivClass: $$props.tableDivClass
    },
    {
      prevClass: "prev",
      nextClass: "next",
      spanClass: "span",
      tableDivClass: "tableDiv"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      prev: $$props.prevClass,
      next: $$props.nextClass,
      span: $$props.spanClass,
      tableDiv: $$props.tableDivClass
    }),
    "styling"
  );
  const theme = getTheme("paginationNav");
  setContext("group", true);
  setContext("size", size2());
  setContext("table", strict_equals(layout2(), "table"));
  if ($$props.classes?.active) {
    setContext("activeClasses", $$props.classes.active);
  }
  const halfVisiblePages = tag(user_derived(() => Math.floor(visiblePages() / 2)), "halfVisiblePages");
  const lastPage = tag(
    user_derived(() => Math.min(
      Math.max(
        strict_equals(layout2(), "pagination") ? currentPage() + get(halfVisiblePages) : currentPage() + get(halfVisiblePages) * 2,
        visiblePages()
      ),
      totalPages()
    )),
    "lastPage"
  );
  const firstPage = tag(user_derived(() => Math.max(1, get(lastPage) - visiblePages() + 1)), "firstPage");
  const pageNumbers = tag(user_derived(() => paginationRange(get(firstPage), get(lastPage))), "pageNumbers");
  function goToNextPage() {
    $$props.onPageChange(Math.min(currentPage() + 1, totalPages()));
  }
  function goToPreviousPage() {
    $$props.onPageChange(Math.max(currentPage() - 1, 1));
  }
  const $$d = tag(user_derived(() => paginationNav({ layout: layout2() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), tableDiv = tag(user_derived(() => get($$d).tableDiv), "tableDiv"), span2 = tag(user_derived(() => get($$d).span), "span"), prev = tag(user_derived(() => get($$d).prev), "prev"), next2 = tag(user_derived(() => get($$d).next), "next");
  var $$exports = { ...legacy_api() };
  var nav = root44();
  attribute_effect(nav, () => ({ "aria-label": ariaLabel(), ...restProps }));
  var node = child(nav);
  {
    var consequent = ($$anchor2) => {
      var div = root_127();
      var span_1 = sibling(child(div));
      var text2 = child(span_1, true);
      reset(span_1);
      var span_2 = sibling(span_1, 2);
      var text_1 = child(span_2, true);
      reset(span_2);
      next();
      reset(div);
      template_effect(
        ($0, $1, $2) => {
          set_class(div, 1, $0);
          set_class(span_1, 1, $1);
          set_text(text2, currentPage());
          set_class(span_2, 1, $2);
          set_text(text_1, totalPages());
        },
        [
          () => clsx2(get(tableDiv)({ class: clsx_default(theme?.tableDiv, get(styling).tableDiv) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) }))
        ]
      );
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(layout2(), "table")) $$render(consequent);
      }),
      "if",
      PaginationNav,
      68,
      2
    );
  }
  var ul = sibling(node, 2);
  var li = child(ul);
  attribute_effect(li, () => ({ ...restProps }));
  var node_1 = child(li);
  {
    let $0 = user_derived(() => strict_equals(currentPage(), 1));
    let $1 = user_derived(() => get(prev)({ class: clsx_default(theme?.prev, get(styling).prev) }));
    add_svelte_meta(
      () => PaginationButton_default(node_1, {
        onclick: goToPreviousPage,
        get disabled() {
          return get($0);
        },
        get class() {
          return get($1);
        },
        children: wrap_snippet(PaginationNav, ($$anchor2, $$slotProps) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          {
            var consequent_1 = ($$anchor3) => {
              var fragment_1 = comment();
              var node_3 = first_child(fragment_1);
              add_svelte_meta(() => snippet(node_3, () => $$props.prevContent), "render", PaginationNav, 81, 10);
              append($$anchor3, fragment_1);
            };
            var alternate = ($$anchor3) => {
              var text_2 = text();
              template_effect(() => set_text(text_2, previousLabel()));
              append($$anchor3, text_2);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if ($$props.prevContent) $$render(consequent_1);
                else $$render(alternate, false);
              }),
              "if",
              PaginationNav,
              80,
              8
            );
          }
          append($$anchor2, fragment);
        }),
        $$slots: { default: true }
      }),
      "component",
      PaginationNav,
      79,
      6,
      { componentTag: "PaginationButton" }
    );
  }
  reset(li);
  var node_4 = sibling(li, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      add_svelte_meta(
        () => each(node_5, 17, () => get(pageNumbers), index, ($$anchor3, page) => {
          var li_1 = root_66();
          var node_6 = child(li_1);
          {
            let $0 = user_derived(() => strict_equals(get(page), currentPage()));
            add_svelte_meta(
              () => PaginationButton_default(node_6, {
                get active() {
                  return get($0);
                },
                onclick: () => $$props.onPageChange(get(page)),
                children: wrap_snippet(PaginationNav, ($$anchor4, $$slotProps) => {
                  next();
                  var text_3 = text();
                  template_effect(() => set_text(text_3, get(page)));
                  append($$anchor4, text_3);
                }),
                $$slots: { default: true }
              }),
              "component",
              PaginationNav,
              90,
              10,
              { componentTag: "PaginationButton" }
            );
          }
          reset(li_1);
          template_effect(() => set_attribute(li_1, "aria-current", strict_equals(get(page), currentPage()) ? "page" : void 0));
          append($$anchor3, li_1);
        }),
        "each",
        PaginationNav,
        88,
        6
      );
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (strict_equals(layout2(), "pagination") && get(pageNumbers).length > 0) $$render(consequent_2);
      }),
      "if",
      PaginationNav,
      87,
      4
    );
  }
  var li_2 = sibling(node_4, 2);
  attribute_effect(li_2, () => ({ ...restProps }));
  var node_7 = child(li_2);
  {
    let $0 = user_derived(() => strict_equals(currentPage(), totalPages()));
    let $1 = user_derived(() => get(next2)({ class: clsx_default(theme?.next, get(styling).next) }));
    add_svelte_meta(
      () => PaginationButton_default(node_7, {
        onclick: goToNextPage,
        get disabled() {
          return get($0);
        },
        get class() {
          return get($1);
        },
        children: wrap_snippet(PaginationNav, ($$anchor2, $$slotProps) => {
          var fragment_5 = comment();
          var node_8 = first_child(fragment_5);
          {
            var consequent_3 = ($$anchor3) => {
              var fragment_6 = comment();
              var node_9 = first_child(fragment_6);
              add_svelte_meta(() => snippet(node_9, () => $$props.nextContent), "render", PaginationNav, 99, 10);
              append($$anchor3, fragment_6);
            };
            var alternate_1 = ($$anchor3) => {
              var text_4 = text();
              template_effect(() => set_text(text_4, nextLabel()));
              append($$anchor3, text_4);
            };
            add_svelte_meta(
              () => if_block(node_8, ($$render) => {
                if ($$props.nextContent) $$render(consequent_3);
                else $$render(alternate_1, false);
              }),
              "if",
              PaginationNav,
              98,
              8
            );
          }
          append($$anchor2, fragment_5);
        }),
        $$slots: { default: true }
      }),
      "component",
      PaginationNav,
      97,
      6,
      { componentTag: "PaginationButton" }
    );
  }
  reset(li_2);
  reset(ul);
  reset(nav);
  template_effect(($0) => set_class(ul, 1, $0), [
    () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) }))
  ]);
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationNav = hmr(PaginationNav, () => PaginationNav[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationNav[HMR].source;
    set(PaginationNav[HMR].source, module.default[HMR].original);
  });
}
var PaginationNav_default = PaginationNav;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte
PaginationItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/PaginationItem.svelte";
var root_128 = add_locations(from_html(`<a><!></a>`), PaginationItem[FILENAME], [[18, 2]]);
var root_316 = add_locations(from_html(`<button><!></button>`), PaginationItem[FILENAME], [[24, 2]]);
function PaginationItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PaginationItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "class",
      "href",
      "active"
    ],
    "restProps"
  );
  const theme = getTheme("paginationItem");
  const group2 = getContext("group");
  const table2 = getContext("table");
  const paginationCls = tag(
    user_derived(() => paginationItem({
      size: getContext("size") ?? $$props.size,
      active: $$props.active,
      group: group2,
      table: table2,
      class: clsx_default(theme, $$props.class)
    })),
    "paginationCls"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var a2 = root_128();
      attribute_effect(a2, () => ({
        href: $$props.href,
        ...restProps,
        class: get(paginationCls)
      }));
      var node_1 = child(a2);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", PaginationItem, 20, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.children) $$render(consequent);
          }),
          "if",
          PaginationItem,
          19,
          4
        );
      }
      reset(a2);
      append($$anchor2, a2);
    };
    var alternate = ($$anchor2) => {
      var button2 = root_316();
      attribute_effect(button2, () => ({ ...restProps, class: get(paginationCls) }));
      var node_3 = child(button2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", PaginationItem, 26, 6);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.children) $$render(consequent_2);
          }),
          "if",
          PaginationItem,
          25,
          4
        );
      }
      reset(button2);
      append($$anchor2, button2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.href) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      PaginationItem,
      17,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  PaginationItem = hmr(PaginationItem, () => PaginationItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PaginationItem[HMR].source;
    set(PaginationItem[HMR].source, module.default[HMR].original);
  });
}
var PaginationItem_default = PaginationItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/Pagination.svelte
Pagination[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/pagination/Pagination.svelte";
var root_129 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[23, 6]]);
var root_58 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[34, 6]]);
var root_74 = add_locations(from_html(`<li><!></li>`), Pagination[FILENAME], [[41, 6]]);
var root45 = add_locations(from_html(`<nav><ul><!> <!> <!></ul></nav>`), Pagination[FILENAME], [[20, 0, [[21, 2]]]]);
function Pagination($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Pagination);
  let pages = prop($$props, "pages", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "pages",
      "previous",
      "next",
      "prevContent",
      "nextContent",
      "table",
      "size",
      "ariaLabel"
    ],
    "restProps"
  );
  const theme = getTheme("pagination");
  setContext("group", true);
  setContext("table", $$props.table);
  setContext("size", $$props.size);
  const paginationCls = tag(user_derived(() => pagination({ table: $$props.table, size: $$props.size, class: clsx_default(theme) })), "paginationCls");
  var $$exports = { ...legacy_api() };
  var nav = root45();
  var ul = child(nav);
  var node = child(ul);
  {
    var consequent_1 = ($$anchor2) => {
      var li = root_129();
      attribute_effect(li, () => ({ ...restProps }));
      var node_1 = child(li);
      {
        let $0 = user_derived(() => $$props.table ? "rounded-none rounded-l" : "rounded-none  rounded-s-lg");
        add_svelte_meta(
          () => PaginationItem_default(node_1, {
            get size() {
              return $$props.size;
            },
            onclick: () => $$props.previous(),
            get class() {
              return get($0);
            },
            children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
              var fragment = comment();
              var node_2 = first_child(fragment);
              {
                var consequent = ($$anchor4) => {
                  var fragment_1 = comment();
                  var node_3 = first_child(fragment_1);
                  add_svelte_meta(() => snippet(node_3, () => $$props.prevContent), "render", Pagination, 26, 12);
                  append($$anchor4, fragment_1);
                };
                var alternate = ($$anchor4) => {
                  var text2 = text("Previous");
                  append($$anchor4, text2);
                };
                add_svelte_meta(
                  () => if_block(node_2, ($$render) => {
                    if ($$props.prevContent) $$render(consequent);
                    else $$render(alternate, false);
                  }),
                  "if",
                  Pagination,
                  25,
                  10
                );
              }
              append($$anchor3, fragment);
            }),
            $$slots: { default: true }
          }),
          "component",
          Pagination,
          24,
          8,
          { componentTag: "PaginationItem" }
        );
      }
      reset(li);
      append($$anchor2, li);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(typeof $$props.previous, "function")) $$render(consequent_1);
      }),
      "if",
      Pagination,
      22,
      4
    );
  }
  var node_4 = sibling(node, 2);
  add_svelte_meta(
    () => each(node_4, 17, pages, index, ($$anchor2, $$item, $$index, $$array) => {
      let name = () => get($$item).name;
      name();
      let href = () => get($$item).href;
      href();
      let active = () => get($$item).active;
      active();
      let size2 = () => get($$item).size;
      size2();
      var li_1 = root_58();
      attribute_effect(li_1, () => ({ ...restProps }));
      var node_5 = child(li_1);
      add_svelte_meta(
        () => PaginationItem_default(node_5, {
          get size() {
            return size2();
          },
          get active() {
            return active();
          },
          get href() {
            return href();
          },
          children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
            next();
            var text_1 = text();
            template_effect(() => set_text(text_1, name()));
            append($$anchor3, text_1);
          }),
          $$slots: { default: true }
        }),
        "component",
        Pagination,
        35,
        8,
        { componentTag: "PaginationItem" }
      );
      reset(li_1);
      append($$anchor2, li_1);
    }),
    "each",
    Pagination,
    33,
    4
  );
  var node_6 = sibling(node_4, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var li_2 = root_74();
      attribute_effect(li_2, () => ({ ...restProps }));
      var node_7 = child(li_2);
      {
        let $0 = user_derived(() => $$props.table ? "rounded-none rounded-r" : "rounded-none rounded-e-lg");
        add_svelte_meta(
          () => PaginationItem_default(node_7, {
            get size() {
              return $$props.size;
            },
            onclick: () => $$props.next(),
            get class() {
              return get($0);
            },
            children: wrap_snippet(Pagination, ($$anchor3, $$slotProps) => {
              var fragment_3 = comment();
              var node_8 = first_child(fragment_3);
              {
                var consequent_2 = ($$anchor4) => {
                  var fragment_4 = comment();
                  var node_9 = first_child(fragment_4);
                  add_svelte_meta(() => snippet(node_9, () => $$props.nextContent), "render", Pagination, 44, 12);
                  append($$anchor4, fragment_4);
                };
                var alternate_1 = ($$anchor4) => {
                  var text_2 = text("Next");
                  append($$anchor4, text_2);
                };
                add_svelte_meta(
                  () => if_block(node_8, ($$render) => {
                    if ($$props.nextContent) $$render(consequent_2);
                    else $$render(alternate_1, false);
                  }),
                  "if",
                  Pagination,
                  43,
                  10
                );
              }
              append($$anchor3, fragment_3);
            }),
            $$slots: { default: true }
          }),
          "component",
          Pagination,
          42,
          8,
          { componentTag: "PaginationItem" }
        );
      }
      reset(li_2);
      append($$anchor2, li_2);
    };
    add_svelte_meta(
      () => if_block(node_6, ($$render) => {
        if (strict_equals(typeof $$props.next, "function")) $$render(consequent_3);
      }),
      "if",
      Pagination,
      40,
      4
    );
  }
  reset(ul);
  reset(nav);
  template_effect(() => {
    set_attribute(nav, "aria-label", $$props.ariaLabel);
    set_class(ul, 1, clsx2(get(paginationCls)));
  });
  append($$anchor, nav);
  return pop($$exports);
}
if (import.meta.hot) {
  Pagination = hmr(Pagination, () => Pagination[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Pagination[HMR].source;
    set(Pagination[HMR].source, module.default[HMR].original);
  });
}
var Pagination_default = Pagination;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/popover/theme.js
var popover = T({
  slots: {
    base: "rounded-lg shadow-md bg-white dark:bg-gray-800 text-gray-500 dark:text-gray-400 border border-gray-200 dark:border-gray-700 divide-gray-200 dark:divide-gray-700",
    content: "p-2",
    title: "py-2 px-3 rounded-t-md border-b ",
    h3: "font-semibold"
  },
  variants: {
    color: {
      default: {
        title: "bg-gray-100 border-gray-200 dark:border-gray-600 dark:bg-gray-700",
        h3: "text-gray-900 dark:text-white"
      },
      primary: {
        title: "bg-primary-700",
        h3: "text-white"
      },
      secondary: {
        title: "bg-secondary-700",
        h3: "text-white"
      },
      gray: {
        title: "bg-gray-700",
        h3: "text-white"
      },
      red: {
        title: "bg-red-700",
        h3: "text-white"
      },
      orange: {
        title: "bg-orange-700",
        h3: "text-white"
      },
      amber: {
        title: "bg-amber-700",
        h3: "text-white"
      },
      yellow: {
        title: "bg-yellow-500",
        h3: "text-gray-800"
      },
      lime: {
        title: "bg-lime-700",
        h3: "text-white"
      },
      green: {
        title: "bg-green-700",
        h3: "text-white"
      },
      emerald: {
        title: "bg-emerald-700",
        h3: "text-white"
      },
      teal: {
        title: "bg-teal-700",
        h3: "text-white"
      },
      cyan: {
        title: "bg-cyan-700",
        h3: "text-white"
      },
      sky: {
        title: "bg-sky-700",
        h3: "text-white"
      },
      blue: {
        title: "bg-blue-700",
        h3: "text-white"
      },
      indigo: {
        title: "bg-indigo-700",
        h3: "text-white"
      },
      violet: {
        title: "bg-violet-700",
        h3: "text-white"
      },
      purple: {
        title: "bg-purple-700",
        h3: "text-white"
      },
      fuchsia: {
        title: "bg-fuchsia-700",
        h3: "text-white"
      },
      pink: {
        title: "bg-pink-700",
        h3: "text-white"
      },
      rose: {
        title: "bg-rose-700",
        h3: "text-white"
      }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/popover/Popover.svelte
Popover[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/popover/Popover.svelte";
var root_218 = add_locations(from_html(`<div><h3> </h3></div>`), Popover[FILENAME], [[21, 4, [[22, 6]]]]);
var root_130 = add_locations(from_html(`<!> <div><!></div>`, 1), Popover[FILENAME], [[27, 2]]);
function Popover($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Popover);
  var $$ownership_validator = create_ownership_validator($$props);
  let color = prop($$props, "color", 3, "default"), trigger = prop($$props, "trigger", 3, "hover"), arrow3 = prop($$props, "arrow", 3, true), placement = prop($$props, "placement", 3, "top"), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "title",
      "color",
      "trigger",
      "defaultClass",
      "arrow",
      "children",
      "placement",
      "class",
      "classes",
      "isOpen"
    ],
    "restProps"
  );
  warnThemeDeprecation("Popover", { defaultClass: $$props.defaultClass }, { defaultClass: "content" });
  const styling = tag(user_derived(() => $$props.classes ?? { content: $$props.defaultClass }), "styling");
  const theme = getTheme("popover");
  let $$d = tag(user_derived(() => popover({ color: color() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), title = tag(user_derived(() => get($$d).title), "title"), h3 = tag(user_derived(() => get($$d).h3), "h3"), content = tag(user_derived(() => get($$d).content), "content");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    add_svelte_meta(
      () => Popper_default(node, spread_props(() => restProps, {
        get placement() {
          return placement();
        },
        get trigger() {
          return trigger();
        },
        get arrow() {
          return arrow3();
        },
        get class() {
          return get($0);
        },
        get isOpen() {
          return isOpen();
        },
        set isOpen($$value) {
          isOpen($$value);
        },
        children: wrap_snippet(Popover, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_130();
          var node_1 = first_child(fragment_1);
          {
            var consequent = ($$anchor3) => {
              var div = root_218();
              var h3_1 = child(div);
              var text2 = child(h3_1, true);
              reset(h3_1);
              reset(div);
              template_effect(
                ($02, $1) => {
                  set_class(div, 1, $02);
                  set_class(h3_1, 1, $1);
                  set_text(text2, $$props.title);
                },
                [
                  () => clsx2(get(title)({ class: clsx_default(theme?.title, $$props.classes?.title) })),
                  () => clsx2(get(h3)({ class: clsx_default(theme?.h3, $$props.classes?.h3) }))
                ]
              );
              append($$anchor3, div);
            };
            var alternate = ($$anchor3) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              {
                var consequent_1 = ($$anchor4) => {
                  var fragment_3 = comment();
                  var node_3 = first_child(fragment_3);
                  add_svelte_meta(() => snippet(node_3, () => $$props.title), "render", Popover, 25, 4);
                  append($$anchor4, fragment_3);
                };
                add_svelte_meta(
                  () => if_block(
                    node_2,
                    ($$render) => {
                      if ($$props.title) $$render(consequent_1);
                    },
                    true
                  ),
                  "if",
                  Popover,
                  24,
                  2
                );
              }
              append($$anchor3, fragment_2);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if (strict_equals(typeof $$props.title, "string")) $$render(consequent);
                else $$render(alternate, false);
              }),
              "if",
              Popover,
              20,
              2
            );
          }
          var div_1 = sibling(node_1, 2);
          var node_4 = child(div_1);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Popover, 28, 4);
          reset(div_1);
          template_effect(($02) => set_class(div_1, 1, $02), [
            () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
          ]);
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      })),
      "component",
      Popover,
      19,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Popover = hmr(Popover, () => Popover[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Popover[HMR].source;
    set(Popover[HMR].source, module.default[HMR].original);
  });
}
var Popover_default = Popover;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/progress/theme.js
var progressbar = T({
  slots: {
    base: "w-full bg-gray-200 rounded-full dark:bg-gray-700",
    label: "text-primary-100 text-xs font-medium text-center leading-none rounded-full",
    inside: "rounded-full",
    outside: "mb-1 flex justify-between",
    span: "text-base font-medium dark:text-white",
    progressCls: "text-sm font-medium dark:text-white"
  },
  variants: {
    color: {
      primary: {
        label: "bg-primary-600",
        inside: "bg-primary-600"
      },
      secondary: {
        label: "bg-secondary-600",
        inside: "bg-secondary-600"
      },
      gray: {
        label: "bg-gray-600 dark:bg-gray-300",
        inside: "bg-gray-600 dark:bg-gray-300"
      },
      red: {
        label: "bg-red-600 dark:bg-red-500",
        inside: "bg-red-600 dark:bg-red-500"
      },
      orange: {
        label: "bg-orange-600 dark:bg-orange-500",
        inside: "bg-orange-600 dark:bg-orange-500"
      },
      amber: {
        label: "bg-amber-600 dark:bg-amber-500",
        inside: "bg-amber-600 dark:bg-amber-500"
      },
      yellow: {
        label: "bg-yellow-400",
        inside: "bg-yellow-400"
      },
      lime: {
        label: "bg-lime-600 dark:bg-lime-500",
        inside: "bg-lime-600 dark:bg-lime-500"
      },
      green: {
        label: "bg-green-600 dark:bg-green-500",
        inside: "bg-green-600 dark:bg-green-500"
      },
      emerald: {
        label: "bg-emerald-600 dark:bg-emerald-500",
        inside: "bg-emerald-600 dark:bg-emerald-500"
      },
      teal: {
        label: "bg-teal-600 dark:bg-teal-500",
        inside: "bg-teal-600 dark:bg-teal-500"
      },
      cyan: {
        label: "bg-cyan-600 dark:bg-cyan-500",
        inside: "bg-cyan-600 dark:bg-cyan-500"
      },
      sky: {
        label: "bg-sky-600 dark:bg-sky-500",
        inside: "bg-sky-600 dark:bg-sky-500"
      },
      blue: {
        label: "bg-blue-600",
        inside: "bg-blue-600"
      },
      indigo: {
        label: "bg-indigo-600 dark:bg-indigo-500",
        inside: "bg-indigo-600 dark:bg-indigo-500"
      },
      violet: {
        label: "bg-violet-600 dark:bg-violet-500",
        inside: "bg-violet-600 dark:bg-violet-500"
      },
      purple: {
        label: "bg-purple-600 dark:bg-purple-500",
        inside: "bg-purple-600 dark:bg-purple-500"
      },
      fuchsia: {
        label: "bg-fuchsia-600 dark:bg-fuchsia-500",
        inside: "bg-fuchsia-600 dark:bg-fuchsia-500"
      },
      pink: {
        label: "bg-pink-600 dark:bg-pink-500",
        inside: "bg-pink-600 dark:bg-pink-500"
      },
      rose: {
        label: "bg-rose-600 dark:bg-rose-500",
        inside: "bg-rose-600 dark:bg-rose-500"
      }
    },
    labelInside: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      labelInside: true,
      class: {
        base: "text-primary-100 text-xs font-medium text-center leading-none rounded-full",
        label: "p-0.5"
      }
    },
    {
      labelInside: false,
      class: { base: "rounded-full" }
    }
  ],
  defaultVariants: {
    color: "primary",
    labelInside: false
  }
});
var progressradial = T({
  slots: {
    base: "relative inline-flex",
    label: "absolute inset-0 flex items-center justify-center text-sm font-medium",
    background: "opacity-25",
    foreground: "transition-all",
    outside: "flex flex-col items-center mb-2 text-center",
    span: "text-base font-medium",
    progressCls: "text-sm font-medium ml-1"
  },
  variants: {
    color: {
      primary: {
        background: "stroke-primary-600",
        foreground: "stroke-primary-600"
      },
      secondary: {
        background: "stroke-secondary-600",
        foreground: "stroke-secondary-600"
      },
      gray: {
        background: "stroke-gray-600 dark:stroke-gray-300",
        foreground: "stroke-gray-600 dark:stroke-gray-300"
      },
      red: {
        background: "stroke-red-600 dark:stroke-red-500",
        foreground: "stroke-red-600 dark:stroke-red-500"
      },
      orange: {
        background: "stroke-orange-600 dark:stroke-orange-500",
        foreground: "stroke-orange-600 dark:stroke-orange-500"
      },
      amber: {
        background: "stroke-amber-600 dark:stroke-amber-500",
        foreground: "stroke-amber-600 dark:stroke-amber-500"
      },
      yellow: {
        background: "stroke-yellow-400",
        foreground: "stroke-yellow-400"
      },
      lime: {
        background: "stroke-lime-600 dark:stroke-lime-500",
        foreground: "stroke-lime-600 dark:stroke-lime-500"
      },
      green: {
        background: "stroke-green-600 dark:stroke-green-500",
        foreground: "stroke-green-600 dark:stroke-green-500"
      },
      emerald: {
        background: "stroke-emerald-600 dark:stroke-emerald-500",
        foreground: "stroke-emerald-600 dark:stroke-emerald-500"
      },
      teal: {
        background: "stroke-teal-600 dark:stroke-teal-500",
        foreground: "stroke-teal-600 dark:stroke-teal-500"
      },
      cyan: {
        background: "stroke-cyan-600 dark:stroke-cyan-500",
        foreground: "stroke-cyan-600 dark:stroke-cyan-500"
      },
      sky: {
        background: "stroke-sky-600 dark:stroke-sky-500",
        foreground: "stroke-sky-600 dark:stroke-sky-500"
      },
      blue: {
        background: "stroke-blue-600",
        foreground: "stroke-blue-600"
      },
      indigo: {
        background: "stroke-indigo-600 dark:stroke-indigo-500",
        foreground: "stroke-indigo-600 dark:stroke-indigo-500"
      },
      violet: {
        background: "stroke-violet-600 dark:stroke-violet-500",
        foreground: "stroke-violet-600 dark:stroke-violet-500"
      },
      purple: {
        background: "stroke-purple-600 dark:stroke-purple-500",
        foreground: "stroke-purple-600 dark:stroke-purple-500"
      },
      fuchsia: {
        background: "stroke-fuchsia-600 dark:stroke-fuchsia-500",
        foreground: "stroke-fuchsia-600 dark:stroke-fuchsia-500"
      },
      pink: {
        background: "stroke-pink-600 dark:stroke-pink-500",
        foreground: "stroke-pink-600 dark:stroke-pink-500"
      },
      rose: {
        background: "stroke-rose-600 dark:stroke-rose-500",
        foreground: "stroke-rose-600 dark:stroke-rose-500"
      }
    },
    labelInside: {
      true: {}
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/progress/Progressbar.svelte
Progressbar[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/progress/Progressbar.svelte";
var root_131 = add_locations(from_html(`<div><span> </span> <span> </span></div>`), Progressbar[FILENAME], [[37, 2, [[38, 4], [39, 4]]]]);
var root_219 = add_locations(from_html(`<div> </div>`), Progressbar[FILENAME], [[44, 4]]);
var root_317 = add_locations(from_html(`<div></div>`), Progressbar[FILENAME], [[48, 4]]);
var root46 = add_locations(from_html(`<!> <div><!></div>`, 1), Progressbar[FILENAME], [[42, 0]]);
function Progressbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Progressbar);
  let progress = prop($$props, "progress", 3, "45"), precision = prop($$props, "precision", 3, 0), tweenDuration = prop($$props, "tweenDuration", 3, 400), animate = prop($$props, "animate", 3, false), size2 = prop($$props, "size", 3, "h-2.5"), labelInside = prop($$props, "labelInside", 3, false), labelOutside = prop($$props, "labelOutside", 3, ""), easing = prop($$props, "easing", 3, cubicOut), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "progress",
      "precision",
      "tweenDuration",
      "animate",
      "size",
      "labelInside",
      "labelOutside",
      "easing",
      "color",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("progressbar");
  let _progress = new Tween(0, { duration: animate() ? tweenDuration() : 0, easing: easing() });
  const $$d = tag(user_derived(() => progressbar({ color: color(), labelInside: labelInside() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), labelInsideCls = tag(user_derived(() => get($$d).label), "labelInsideCls"), inside = tag(user_derived(() => get($$d).inside), "inside"), outside = tag(user_derived(() => get($$d).outside), "outside"), span2 = tag(user_derived(() => get($$d).span), "span"), progressCls = tag(user_derived(() => get($$d).progressCls), "progressCls");
  user_effect(() => {
    _progress.set(Number(progress()));
  });
  var $$exports = { ...legacy_api() };
  var fragment = root46();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_131();
      attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
        () => get(outside)({ class: clsx_default(theme?.outside, $$props.classes?.outside) })
      ]);
      var span_1 = child(div);
      var text2 = child(span_1, true);
      reset(span_1);
      var span_2 = sibling(span_1, 2);
      var text_1 = child(span_2);
      reset(span_2);
      reset(div);
      template_effect(
        ($0, $1) => {
          set_class(span_1, 1, $0);
          set_text(text2, labelOutside());
          set_class(span_2, 1, $1);
          set_text(text_1, `${progress() ?? ""}%`);
        },
        [
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, $$props.classes?.span) })),
          () => clsx2(get(progressCls)({
            class: clsx_default(theme?.progressCls, $$props.classes?.progressCls)
          }))
        ]
      );
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (labelOutside()) $$render(consequent);
      }),
      "if",
      Progressbar,
      36,
      0
    );
  }
  var div_1 = sibling(node, 2);
  attribute_effect(div_1, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(size2(), theme?.base, $$props.class) })
  ]);
  var node_1 = child(div_1);
  {
    var consequent_1 = ($$anchor2) => {
      var div_2 = root_219();
      var text_2 = child(div_2);
      reset(div_2);
      template_effect(
        ($0, $1) => {
          set_class(div_2, 1, $0);
          set_style(div_2, `width: ${_progress.current ?? ""}%`);
          set_text(text_2, `${$1 ?? ""}%`);
        },
        [
          () => clsx2(get(labelInsideCls)({ class: clsx_default(size2(), theme?.label, $$props.classes?.label) })),
          () => _progress.current.toFixed(precision())
        ]
      );
      append($$anchor2, div_2);
    };
    var alternate = ($$anchor2) => {
      var div_3 = root_317();
      template_effect(
        ($0) => {
          set_class(div_3, 1, $0);
          set_style(div_3, `width: ${_progress.current ?? ""}%`);
        },
        [
          () => clsx2(get(inside)({ class: clsx_default(size2(), theme?.inside, $$props.classes?.label) }))
        ]
      );
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (labelInside()) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Progressbar,
      43,
      2
    );
  }
  reset(div_1);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Progressbar = hmr(Progressbar, () => Progressbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progressbar[HMR].source;
    set(Progressbar[HMR].source, module.default[HMR].original);
  });
}
var Progressbar_default = Progressbar;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/progress/Progressradial.svelte
Progressradial[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/progress/Progressradial.svelte";
var root_133 = add_locations(from_html(`<div><span> </span> <span> </span></div>`), Progressradial[FILENAME], [[41, 4, [[42, 6], [43, 6]]]]);
var root_220 = add_locations(from_html(`<div> </div>`), Progressradial[FILENAME], [[57, 6]]);
var root47 = add_locations(from_html(`<div class="flex flex-col items-center"><!> <div><svg viewBox="0 0 100 100" class="h-full w-full"><circle cx="50" cy="50" fill="none"></circle><circle cx="50" cy="50" fill="none" stroke-linecap="round"></circle></svg> <!></div></div>`), Progressradial[FILENAME], [[39, 0, [[47, 2, [[48, 4, [[50, 6], [53, 6]]]]]]]]);
function Progressradial($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Progressradial);
  let progress = prop($$props, "progress", 3, 45), radius = prop($$props, "radius", 3, 42), startingPosition = prop($$props, "startingPosition", 3, "top"), precision = prop($$props, "precision", 3, 0), tweenDuration = prop($$props, "tweenDuration", 3, 400), animate = prop($$props, "animate", 3, false), size2 = prop($$props, "size", 3, "h-24 w-24"), thickness = prop($$props, "thickness", 3, 4), labelInside = prop($$props, "labelInside", 3, false), labelOutside = prop($$props, "labelOutside", 3, ""), easing = prop($$props, "easing", 3, cubicOut), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "progress",
      "radius",
      "startingPosition",
      "precision",
      "tweenDuration",
      "animate",
      "size",
      "thickness",
      "labelInside",
      "labelOutside",
      "easing",
      "color",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("progressradial");
  const _progress = new Tween(0, { duration: animate() ? tweenDuration() : 0, easing: easing() });
  const $$d = tag(user_derived(() => progressradial({ color: color(), labelInside: labelInside() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), label2 = tag(user_derived(() => get($$d).label), "label"), background = tag(user_derived(() => get($$d).background), "background"), foreground = tag(user_derived(() => get($$d).foreground), "foreground"), outside = tag(user_derived(() => get($$d).outside), "outside"), span2 = tag(user_derived(() => get($$d).span), "span"), progressCls = tag(user_derived(() => get($$d).progressCls), "progressCls");
  user_effect(() => {
    _progress.set(Number(progress()));
  });
  let circumference = 2 * Math.PI * radius();
  let strokeDashoffset = tag(user_derived(() => circumference - _progress.current / 100 * circumference), "strokeDashoffset");
  let rotationAngle = tag(
    user_derived(() => strict_equals(startingPosition(), "top") ? -90 : strict_equals(startingPosition(), "right") ? 0 : strict_equals(startingPosition(), "bottom") ? 90 : strict_equals(startingPosition(), "left") ? 180 : -90),
    "rotationAngle"
  );
  let formattedProgress = tag(user_derived(() => _progress.current.toFixed(precision())), "formattedProgress");
  var $$exports = { ...legacy_api() };
  var div = root47();
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_133();
      var span_1 = child(div_1);
      var text2 = child(span_1, true);
      reset(span_1);
      var span_2 = sibling(span_1, 2);
      var text_1 = child(span_2);
      reset(span_2);
      reset(div_1);
      template_effect(
        ($0, $1, $2) => {
          set_class(div_1, 1, $0);
          set_class(span_1, 1, $1);
          set_text(text2, labelOutside());
          set_class(span_2, 1, $2);
          set_text(text_1, `${get(formattedProgress) ?? ""}%`);
        },
        [
          () => clsx2(get(outside)({ class: clsx_default(theme?.outside, $$props.classes?.outside) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, $$props.classes?.span) })),
          () => clsx2(get(progressCls)({
            class: clsx_default(theme?.progressCls, $$props.classes?.progressCls)
          }))
        ]
      );
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (labelOutside()) $$render(consequent);
      }),
      "if",
      Progressradial,
      40,
      2
    );
  }
  var div_2 = sibling(node, 2);
  attribute_effect(div_2, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(size2(), theme?.base, $$props.class) })
  ]);
  var svg = child(div_2);
  var circle = child(svg);
  var circle_1 = sibling(circle);
  reset(svg);
  var node_1 = sibling(svg, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var div_3 = root_220();
      var text_2 = child(div_3);
      reset(div_3);
      template_effect(
        ($0) => {
          set_class(div_3, 1, $0);
          set_text(text_2, `${get(formattedProgress) ?? ""}%`);
        },
        [
          () => clsx2(get(label2)({ class: clsx_default(theme?.label, $$props.classes?.label) }))
        ]
      );
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (labelInside()) $$render(consequent_1);
      }),
      "if",
      Progressradial,
      56,
      4
    );
  }
  reset(div_2);
  reset(div);
  template_effect(
    ($0, $1) => {
      set_style(svg, `transform: rotate(${get(rotationAngle) ?? ""}deg)`);
      set_attribute(circle, "r", radius());
      set_class(circle, 0, $0);
      set_attribute(circle, "stroke-width", thickness());
      set_attribute(circle_1, "r", radius());
      set_class(circle_1, 0, $1);
      set_attribute(circle_1, "stroke-width", thickness());
      set_attribute(circle_1, "stroke-dasharray", circumference);
      set_attribute(circle_1, "stroke-dashoffset", get(strokeDashoffset));
    },
    [
      () => clsx2(get(background)({ class: clsx_default(theme?.background, $$props.classes?.background) })),
      () => clsx2(get(foreground)({ class: clsx_default(theme?.foreground, $$props.classes?.foreground) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Progressradial = hmr(Progressradial, () => Progressradial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Progressradial[HMR].source;
    set(Progressradial[HMR].source, module.default[HMR].original);
  });
}
var Progressradial_default = Progressradial;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/theme.js
var advancedRating = T({
  // divClass = 'flex items-center mt-4', spanClass = 'text-sm font-medium text-gray-600 dark:text-gray-500', div2Class = 'mx-4 w-2/4 h-5 bg-gray-200 rounded-sm dark:bg-gray-700', div3Class = 'h-5 bg-yellow-400 rounded-sm', span2Class = 'text-sm font-medium text-gray-600 dark:text-gray-500',
  slots: {
    base: "flex items-center mt-4",
    span: "text-sm font-medium text-gray-600 dark:text-gray-500",
    div2: "mx-4 w-2/4 h-5 bg-gray-200 rounded-sm dark:bg-gray-700",
    div3: "h-5 bg-yellow-400 rounded-sm",
    span2: "text-sm font-medium text-gray-600 dark:text-gray-500"
  }
});
var rating = T({
  slots: {
    base: "flex items-center",
    p: "ms-2 text-sm font-bold text-gray-900 dark:text-white"
  }
});
var review = T({
  slots: {
    article: "md:grid md:grid-cols-3 md:gap-8",
    div: "mb-6 flex items-center space-x-4 rtl:space-x-reverse",
    div2: "space-y-1 font-medium dark:text-white",
    div3: "flex items-center text-sm text-gray-500 dark:text-gray-400",
    img: "h-10 w-10 rounded-full",
    ul: "space-y-4 text-sm text-gray-500 dark:text-gray-400",
    li: "flex items-center"
  }
});
var scoreRating = T({
  slots: {
    desc1: "bg-primary-100 w-8 text-primary-800 text-sm font-semibold inline-flex items-center p-1.5 rounded-sm dark:bg-primary-200 dark:text-primary-800",
    desc2: "ms-2 font-medium text-gray-900 dark:text-white",
    desc3span: "text-sm w-24 font-medium text-gray-500 dark:text-gray-400",
    desc3p: "text-sm w-24 font-medium text-gray-500 dark:text-gray-400",
    link: "ms-auto w-32 text-sm font-medium text-primary-600 hover:underline dark:text-primary-500",
    bar: "bg-primary-600 h-2.5 rounded-sm dark:bg-primary-500"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte
AdvancedRating[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/AdvancedRating.svelte";
var root_318 = add_locations(from_html(`<div><span> </span> <div><div></div></div> <span> </span></div>`), AdvancedRating[FILENAME], [[31, 2, [[32, 4], [33, 4, [[34, 6]]], [36, 4]]]]);
var root48 = add_locations(from_html(`<!> <!> <!>`, 1), AdvancedRating[FILENAME], []);
function AdvancedRating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, AdvancedRating);
  warnThemeDeprecation(
    "AdvancedRating",
    {
      divClass: $$props.divClass,
      spanClass: $$props.spanClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      span2Class: $$props.span2Class
    },
    {
      divClass: "class",
      spanClass: "span",
      div2Class: "div2",
      div3Class: "div3",
      span2Class: "span2"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      span: $$props.spanClass,
      div2: $$props.div2Class,
      div3: $$props.div3Class,
      span2: $$props.span2Class
    }),
    "styling"
  );
  const theme = getTheme("advancedRating");
  const $$d = tag(user_derived(advancedRating), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), span2 = tag(user_derived(() => get($$d).span), "span"), div2 = tag(user_derived(() => get($$d).div2), "div2"), div3 = tag(user_derived(() => get($$d).div3), "div3"), span22 = tag(user_derived(() => get($$d).span2), "span2");
  var $$exports = { ...legacy_api() };
  var fragment = root48();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.rating), "render", AdvancedRating, 25, 2);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.rating) $$render(consequent);
      }),
      "if",
      AdvancedRating,
      24,
      0
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      add_svelte_meta(() => snippet(node_3, () => $$props.globalText), "render", AdvancedRating, 28, 2);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.globalText) $$render(consequent_1);
      }),
      "if",
      AdvancedRating,
      27,
      0
    );
  }
  var node_4 = sibling(node_2, 2);
  add_svelte_meta(
    () => each(node_4, 17, () => $$props.ratings, index, ($$anchor2, $$item, $$index, $$array) => {
      let label2 = () => get($$item).label;
      label2();
      let rating2 = () => get($$item).rating;
      rating2();
      var div = root_318();
      var span_1 = child(div);
      var text2 = child(span_1, true);
      reset(span_1);
      var div_1 = sibling(span_1, 2);
      var div_2 = child(div_1);
      reset(div_1);
      var span_2 = sibling(div_1, 2);
      var text_1 = child(span_2);
      reset(span_2);
      reset(div);
      template_effect(
        ($0, $1, $2, $3, $4) => {
          set_class(div, 1, $0);
          set_class(span_1, 1, $1);
          set_text(text2, label2());
          set_class(div_1, 1, $2);
          set_class(div_2, 1, $3);
          set_style(div_2, `width: ${rating2() ?? ""}%`);
          set_class(span_2, 1, $4);
          set_text(text_1, `${rating2() ?? ""}${$$props.unit ?? ""}`);
        },
        [
          () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) })),
          () => clsx2(get(div2)({ class: clsx_default(theme?.div2, get(styling).div2) })),
          () => clsx2(get(div3)({ class: clsx_default(theme?.div3, get(styling).div3) })),
          () => clsx2(get(span22)({ class: clsx_default(theme?.span2, get(styling).span2) }))
        ]
      );
      append($$anchor2, div);
    }),
    "each",
    AdvancedRating,
    30,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  AdvancedRating = hmr(AdvancedRating, () => AdvancedRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = AdvancedRating[HMR].source;
    set(AdvancedRating[HMR].source, module.default[HMR].original);
  });
}
var AdvancedRating_default = AdvancedRating;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Heart.svelte
Heart[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Heart.svelte";
var root_134 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Heart[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_221 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Heart[FILENAME], [[19, 8], [20, 8]]);
var root49 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"></path></svg>`), Heart[FILENAME], [[10, 0, [[11, 2, [[12, 4]]], [24, 2]]]]);
function Heart($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Heart);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#ff0000"), strokeColor = prop($$props, "strokeColor", 3, "#ff0000"), size2 = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "star"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var $$exports = { ...legacy_api() };
  var svg = root49();
  attribute_effect(
    svg,
    ($0) => ({
      width: size2(),
      height: size2(),
      class: $0,
      ...restProps,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5",
      stroke: "currentColor",
      fill: "none"
    }),
    [() => clsx_default($$props.svgClass)]
  );
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_134();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_221();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Heart,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", uniqueId);
    set_attribute(path, "fill", `url(#${uniqueId})`);
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Heart = hmr(Heart, () => Heart[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heart[HMR].source;
    set(Heart[HMR].source, module.default[HMR].original);
  });
}
var Heart_default = Heart;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Star.svelte
Star[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Star.svelte";
var root_135 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Star[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_222 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Star[FILENAME], [[19, 8], [20, 8]]);
var root50 = add_locations(
  from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><g stroke-width="2"><polygon points="165.000, 185.000, 188.511, 197.361, 184.021, 171.180, 
      203.042, 152.639, 176.756, 148.820, 165.000, 125.000, 
      153.244, 148.820, 126.958, 152.639, 145.979, 171.180,
      141.489, 197.361, 165.000, 185.000"></polygon></g></svg>`),
  Star[FILENAME],
  [[10, 0, [[11, 2, [[12, 4]]], [24, 2, [[25, 4]]]]]]
);
function Star($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Star);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#F5CA14"), strokeColor = prop($$props, "strokeColor", 3, "#F5CA14"), size2 = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "star"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var $$exports = { ...legacy_api() };
  var svg = root50();
  attribute_effect(
    svg,
    ($0) => ({
      width: size2(),
      height: size2(),
      ...restProps,
      class: $0,
      "aria-label": ariaLabel(),
      viewBox: "100 100 120 120",
      role: role()
    }),
    [() => clsx_default($$props.svgClass)]
  );
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_135();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_222();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Star,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var g2 = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", uniqueId);
    set_attribute(g2, "fill", `url(#${uniqueId})`);
    set_attribute(g2, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Star = hmr(Star, () => Star[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Star[HMR].source;
    set(Star[HMR].source, module.default[HMR].original);
  });
}
var Star_default = Star;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Rating.svelte
Rating[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Rating.svelte";
var root_136 = add_locations(from_html(`<!> <p> </p> <!>`, 1), Rating[FILENAME], [[26, 4]]);
var root_223 = add_locations(from_html(`<!> <!> <!> <!>`, 1), Rating[FILENAME], []);
var root51 = add_locations(from_html(`<div><!></div>`), Rating[FILENAME], [[23, 0]]);
function Rating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Rating);
  let size2 = prop($$props, "size", 3, 24), total = prop($$props, "total", 3, 5), rating2 = prop($$props, "rating", 3, 4), Icon = prop($$props, "icon", 3, Star_default), count = prop($$props, "count", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "text",
      "class",
      "classes",
      "size",
      "total",
      "rating",
      "icon",
      "count",
      "pClass"
    ],
    "restProps"
  );
  warnThemeDeprecation("Rating", { pClass: $$props.pClass }, { pClass: "p" });
  const styling = tag(user_derived(() => $$props.classes ?? { p: $$props.pClass }), "styling");
  const theme = getTheme("rating");
  const $$d = tag(user_derived(rating), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), p2 = tag(user_derived(() => get($$d).p), "p");
  const ratingGroupId = crypto.randomUUID();
  let fullStars = Math.floor(rating2());
  let rateDiffence = rating2() - fullStars;
  let percentRating = Math.round(rateDiffence * 100);
  let grayStars = total() - (fullStars + Math.ceil(rateDiffence));
  var $$exports = { ...legacy_api() };
  var div = root51();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_136();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => component(node_1, Icon, ($$anchor3, Icon_1) => {
          Icon_1($$anchor3, {
            fillPercent: 100,
            get size() {
              return size2();
            },
            iconIndex: 0,
            get groupId() {
              return ratingGroupId;
            }
          });
        }),
        "component",
        Rating,
        25,
        4,
        { componentTag: "Icon" }
      );
      var p_1 = sibling(node_1, 2);
      var text_1 = child(p_1, true);
      reset(p_1);
      var node_2 = sibling(p_1, 2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", Rating, 27, 4);
      template_effect(
        ($0) => {
          set_class(p_1, 1, $0);
          set_text(text_1, rating2());
        },
        [
          () => clsx2(get(p2)({ class: clsx_default(theme?.p, get(styling).p) }))
        ]
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_223();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(
        () => each(node_3, 17, () => Array(fullStars), index, ($$anchor3, _, index2) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          {
            let $0 = user_derived(() => `rating-${ratingGroupId}-full`);
            add_svelte_meta(
              () => component(node_4, Icon, ($$anchor4, Icon_2) => {
                Icon_2($$anchor4, {
                  get size() {
                    return size2();
                  },
                  fillPercent: 100,
                  iconIndex: index2,
                  get groupId() {
                    return get($0);
                  }
                });
              }),
              "component",
              Rating,
              31,
              6,
              { componentTag: "Icon" }
            );
          }
          append($$anchor3, fragment_2);
        }),
        "each",
        Rating,
        30,
        4
      );
      var node_5 = sibling(node_3, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          {
            let $0 = user_derived(() => `rating-${ratingGroupId}-partial`);
            add_svelte_meta(
              () => component(node_6, Icon, ($$anchor4, Icon_3) => {
                Icon_3($$anchor4, {
                  get size() {
                    return size2();
                  },
                  get fillPercent() {
                    return percentRating;
                  },
                  get iconIndex() {
                    return fullStars;
                  },
                  get groupId() {
                    return get($0);
                  }
                });
              }),
              "component",
              Rating,
              34,
              6,
              { componentTag: "Icon" }
            );
          }
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if (percentRating) $$render(consequent_1);
          }),
          "if",
          Rating,
          33,
          4
        );
      }
      var node_7 = sibling(node_5, 2);
      add_svelte_meta(
        () => each(node_7, 17, () => Array(grayStars), index, ($$anchor3, _, index2) => {
          var fragment_4 = comment();
          var node_8 = first_child(fragment_4);
          {
            let $0 = user_derived(() => `rating-${ratingGroupId}-empty`);
            add_svelte_meta(
              () => component(node_8, Icon, ($$anchor4, Icon_4) => {
                Icon_4($$anchor4, {
                  get size() {
                    return size2();
                  },
                  fillPercent: 0,
                  iconIndex: index2,
                  get groupId() {
                    return get($0);
                  }
                });
              }),
              "component",
              Rating,
              38,
              6,
              { componentTag: "Icon" }
            );
          }
          append($$anchor3, fragment_4);
        }),
        "each",
        Rating,
        37,
        4
      );
      var node_9 = sibling(node_7, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_10 = first_child(fragment_5);
          add_svelte_meta(() => snippet(node_10, () => $$props.text), "render", Rating, 41, 6);
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(node_9, ($$render) => {
            if ($$props.text) $$render(consequent_2);
          }),
          "if",
          Rating,
          40,
          4
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (count() && $$props.children) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Rating,
      24,
      2
    );
  }
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Rating = hmr(Rating, () => Rating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Rating[HMR].source;
    set(Rating[HMR].source, module.default[HMR].original);
  });
}
var Rating_default = Rating;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/RatingComment.svelte
RatingComment[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/RatingComment.svelte";
var root_137 = add_locations(from_html(`<p class="ms-2 pt-1 text-sm font-medium text-gray-500 dark:text-gray-400"> </p>`), RatingComment[FILENAME], [[24, 8]]);
var root_224 = add_locations(from_html(`<h3 class="ms-2 text-sm font-semibold text-gray-900 dark:text-white"> </h3>`), RatingComment[FILENAME], [[30, 6]]);
var root_319 = add_locations(from_html(`<footer class="mb-5 text-sm text-gray-500 dark:text-gray-400"><p> </p></footer>`), RatingComment[FILENAME], [[36, 4, [[37, 6]]]]);
var root_86 = add_locations(from_html(`<a class="text-primary-600 dark:text-primary-500 ps-4 text-sm font-medium hover:underline">Report abuse</a>`), RatingComment[FILENAME], [[55, 10]]);
var root_59 = add_locations(from_html(`<div class="mt-3 flex items-center space-x-3 divide-x divide-gray-200 rtl:space-x-reverse rtl:divide-x-reverse dark:divide-gray-600"><!> <!></div>`), RatingComment[FILENAME], [[50, 6]]);
var root52 = add_locations(from_html(`<article><div class="mb-4 flex items-center space-x-4 rtl:space-x-reverse"><img class="h-10 w-10 rounded-full"/> <div class="space-y-1 font-medium dark:text-white"><p> <time datetime="2014-08-16 19:00" class="block text-sm text-gray-500 dark:text-gray-400"> </time></p></div></div> <div class="mb-1 flex items-center"><!> <!></div> <!> <!> <aside><p class="mt-1 text-xs text-gray-500 dark:text-gray-400"><!></p> <!></aside></article>`), RatingComment[FILENAME], [
  [
    9,
    0,
    [
      [10, 2, [[11, 4], [12, 4, [[13, 6, [[15, 8]]]]]]],
      [21, 2],
      [43, 2, [[44, 4]]]
    ]
  ]
]);
function RatingComment($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, RatingComment);
  var $$exports = { ...legacy_api() };
  var article = root52();
  var div = child(article);
  var img2 = child(div);
  var div_1 = sibling(img2, 2);
  var p2 = child(div_1);
  var text_1 = child(p2);
  var time = sibling(text_1);
  var text_2 = child(time, true);
  reset(time);
  reset(p2);
  reset(div_1);
  reset(div);
  var div_2 = sibling(div, 2);
  var node = child(div_2);
  {
    const text2 = wrap_snippet(RatingComment, function($$anchor2) {
      validate_snippet_args(...arguments);
      var p_1 = root_137();
      var text_3 = child(p_1);
      reset(p_1);
      template_effect(() => set_text(text_3, `${$$props.comment.rating ?? ""} out of ${$$props.comment.total ?? ""}`));
      append($$anchor2, p_1);
    });
    add_svelte_meta(
      () => Rating_default(node, {
        get total() {
          return $$props.comment.total;
        },
        get rating() {
          return $$props.comment.rating;
        },
        text: text2,
        $$slots: { text: true }
      }),
      "component",
      RatingComment,
      22,
      4,
      { componentTag: "Rating" }
    );
  }
  var node_1 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_224();
      var text_4 = child(h3, true);
      reset(h3);
      template_effect(() => set_text(text_4, $$props.comment.heading));
      append($$anchor2, h3);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($$props.comment.heading) $$render(consequent);
      }),
      "if",
      RatingComment,
      29,
      4
    );
  }
  reset(div_2);
  var node_2 = sibling(div_2, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var footer2 = root_319();
      var p_2 = child(footer2);
      var text_5 = child(p_2);
      reset(p_2);
      reset(footer2);
      template_effect(() => set_text(text_5, `Reviewed in ${$$props.comment.address ?? ""} on ${$$props.comment.datetime ?? ""}`));
      append($$anchor2, footer2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.comment.address || $$props.comment.datetime) $$render(consequent_1);
      }),
      "if",
      RatingComment,
      35,
      2
    );
  }
  var node_3 = sibling(node_2, 2);
  add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", RatingComment, 41, 2);
  var aside = sibling(node_3, 2);
  var p_3 = child(aside);
  var node_4 = child(p_3);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment = comment();
      var node_5 = first_child(fragment);
      add_svelte_meta(() => snippet(node_5, () => $$props.evaluation), "render", RatingComment, 46, 8);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if ($$props.evaluation) $$render(consequent_2);
      }),
      "if",
      RatingComment,
      45,
      6
    );
  }
  reset(p_3);
  var node_6 = sibling(p_3, 2);
  {
    var consequent_5 = ($$anchor2) => {
      var div_3 = root_59();
      var node_7 = child(div_3);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_8 = first_child(fragment_1);
          add_svelte_meta(
            () => Button_default(node_8, {
              size: "xs",
              href: "/",
              color: "dark",
              children: wrap_snippet(RatingComment, ($$anchor4, $$slotProps) => {
                next();
                var text_6 = text("Helpful");
                append($$anchor4, text_6);
              }),
              $$slots: { default: true }
            }),
            "component",
            RatingComment,
            52,
            10,
            { componentTag: "Button" }
          );
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_7, ($$render) => {
            if ($$props.helpfullink) $$render(consequent_3);
          }),
          "if",
          RatingComment,
          51,
          8
        );
      }
      var node_9 = sibling(node_7, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var a2 = root_86();
          template_effect(() => set_attribute(a2, "href", $$props.abuselink));
          append($$anchor3, a2);
        };
        add_svelte_meta(
          () => if_block(node_9, ($$render) => {
            if ($$props.abuselink) $$render(consequent_4);
          }),
          "if",
          RatingComment,
          54,
          8
        );
      }
      reset(div_3);
      append($$anchor2, div_3);
    };
    add_svelte_meta(
      () => if_block(node_6, ($$render) => {
        if ($$props.helpfullink || $$props.abuselink) $$render(consequent_5);
      }),
      "if",
      RatingComment,
      49,
      4
    );
  }
  reset(aside);
  reset(article);
  template_effect(() => {
    set_attribute(img2, "src", $$props.comment.user.img.src);
    set_attribute(img2, "alt", $$props.comment.user.img.alt);
    set_text(text_1, `${$$props.comment.user.name ?? ""} `);
    set_text(text_2, $$props.comment.user.joined);
  });
  append($$anchor, article);
  return pop($$exports);
}
if (import.meta.hot) {
  RatingComment = hmr(RatingComment, () => RatingComment[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RatingComment[HMR].source;
    set(RatingComment[HMR].source, module.default[HMR].original);
  });
}
var RatingComment_default = RatingComment;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Review.svelte
Review[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Review.svelte";
var root_320 = add_locations(from_html(`<div><!></div>`), Review[FILENAME], [[36, 14]]);
var root_510 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[46, 12]]);
var root_75 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[53, 12]]);
var root_93 = add_locations(from_html(`<li><!></li>`), Review[FILENAME], [[60, 12]]);
var root_413 = add_locations(from_html(`<ul><!> <!> <!></ul>`), Review[FILENAME], [[44, 8]]);
var root_1110 = add_locations(from_html(`<footer><p class="mb-2 text-sm text-gray-500 dark:text-gray-400"> </p></footer>`), Review[FILENAME], [[74, 12, [[75, 14]]]]);
var root_138 = add_locations(from_html(`<article><div><div><img/> <div><p> </p> <!></div></div> <!></div> <div class="col-span-2 mt-6 md:mt-0"><div class="mb-5 flex items-start"><div class="pe-4"><!> <h4 class="text-xl font-bold text-gray-900 dark:text-white"> </h4></div> <p class="bg-primary-700 inline-flex items-center rounded-sm p-1.5 text-sm font-semibold text-white"> </p></div> <!></div></article>`), Review[FILENAME], [
  [
    28,
    2,
    [
      [29, 4, [[30, 6, [[31, 8], [32, 8, [[33, 10]]]]]]],
      [70, 4, [[71, 6, [[72, 8, [[80, 10]]], [84, 8]]]]]
    ]
  ]
]);
function Review($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Review);
  warnThemeDeprecation(
    "Review",
    {
      articleClass: $$props.articleClass,
      divClass: $$props.divClass,
      div2Class: $$props.div2Class,
      div3Class: $$props.div3Class,
      imgClass: $$props.imgClass,
      ulClass: $$props.ulClass,
      liClass: $$props.liClass
    },
    {
      articleClass: "article",
      divClass: "div",
      div2Class: "div2",
      div3Class: "div3",
      imgClass: "img",
      ulClass: "ul",
      liClass: "li"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      article: $$props.articleClass,
      div: $$props.divClass,
      div2: $$props.div2Class,
      div3: $$props.div3Class,
      img: $$props.imgClass,
      ul: $$props.ulClass,
      li: $$props.liClass
    }),
    "styling"
  );
  const theme = getTheme("review");
  const $$d = tag(user_derived(review), "[$derived object]"), article = tag(user_derived(() => get($$d).article), "article"), div = tag(user_derived(() => get($$d).div), "div"), div2 = tag(user_derived(() => get($$d).div2), "div2"), div3 = tag(user_derived(() => get($$d).div3), "div3"), img2 = tag(user_derived(() => get($$d).img), "img"), ul = tag(user_derived(() => get($$d).ul), "ul"), li = tag(user_derived(() => get($$d).li), "li");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_10 = ($$anchor2) => {
      var article_1 = root_138();
      var div_1 = child(article_1);
      var div_2 = child(div_1);
      var img_1 = child(div_2);
      var div_3 = sibling(img_1, 2);
      var p2 = child(div_3);
      var text2 = child(p2, true);
      reset(p2);
      var node_1 = sibling(p2, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          {
            var consequent = ($$anchor4) => {
              var div_4 = root_320();
              var node_3 = child(div_4);
              add_svelte_meta(() => snippet(node_3, () => $$props.address), "render", Review, 37, 16);
              reset(div_4);
              template_effect(($0) => set_class(div_4, 1, $0), [
                () => clsx2(get(div3)({ class: clsx_default(theme?.div3, get(styling).div3) }))
              ]);
              append($$anchor4, div_4);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if ($$props.address) $$render(consequent);
              }),
              "if",
              Review,
              35,
              12
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.review.address) $$render(consequent_1);
          }),
          "if",
          Review,
          34,
          10
        );
      }
      reset(div_3);
      reset(div_2);
      var node_4 = sibling(div_2, 2);
      {
        var consequent_8 = ($$anchor3) => {
          var ul_1 = root_413();
          var node_5 = child(ul_1);
          {
            var consequent_3 = ($$anchor4) => {
              var li_1 = root_510();
              var node_6 = child(li_1);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_2 = comment();
                  var node_7 = first_child(fragment_2);
                  add_svelte_meta(() => snippet(node_7, () => $$props.item1), "render", Review, 48, 16);
                  append($$anchor5, fragment_2);
                };
                add_svelte_meta(
                  () => if_block(node_6, ($$render) => {
                    if ($$props.item1) $$render(consequent_2);
                  }),
                  "if",
                  Review,
                  47,
                  14
                );
              }
              reset(li_1);
              template_effect(($0) => set_class(li_1, 1, $0), [
                () => clsx2(get(li)({ class: clsx_default(theme?.li, get(styling).li) }))
              ]);
              append($$anchor4, li_1);
            };
            add_svelte_meta(
              () => if_block(node_5, ($$render) => {
                if ($$props.review.item1) $$render(consequent_3);
              }),
              "if",
              Review,
              45,
              10
            );
          }
          var node_8 = sibling(node_5, 2);
          {
            var consequent_5 = ($$anchor4) => {
              var li_2 = root_75();
              var node_9 = child(li_2);
              {
                var consequent_4 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_10 = first_child(fragment_3);
                  add_svelte_meta(() => snippet(node_10, () => $$props.item2), "render", Review, 55, 16);
                  append($$anchor5, fragment_3);
                };
                add_svelte_meta(
                  () => if_block(node_9, ($$render) => {
                    if ($$props.item2) $$render(consequent_4);
                  }),
                  "if",
                  Review,
                  54,
                  14
                );
              }
              reset(li_2);
              template_effect(($0) => set_class(li_2, 1, $0), [() => clsx2(clsx_default(get(styling).li))]);
              append($$anchor4, li_2);
            };
            add_svelte_meta(
              () => if_block(node_8, ($$render) => {
                if ($$props.review.item2) $$render(consequent_5);
              }),
              "if",
              Review,
              52,
              10
            );
          }
          var node_11 = sibling(node_8, 2);
          {
            var consequent_7 = ($$anchor4) => {
              var li_3 = root_93();
              var node_12 = child(li_3);
              {
                var consequent_6 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_13 = first_child(fragment_4);
                  add_svelte_meta(() => snippet(node_13, () => $$props.item3), "render", Review, 62, 16);
                  append($$anchor5, fragment_4);
                };
                add_svelte_meta(
                  () => if_block(node_12, ($$render) => {
                    if ($$props.item3) $$render(consequent_6);
                  }),
                  "if",
                  Review,
                  61,
                  14
                );
              }
              reset(li_3);
              template_effect(($0) => set_class(li_3, 1, $0), [() => clsx2(clsx_default(get(styling).li))]);
              append($$anchor4, li_3);
            };
            add_svelte_meta(
              () => if_block(node_11, ($$render) => {
                if ($$props.review.item3) $$render(consequent_7);
              }),
              "if",
              Review,
              59,
              10
            );
          }
          reset(ul_1);
          template_effect(($0) => set_class(ul_1, 1, $0), [
            () => clsx2(get(ul)({ class: clsx_default(theme?.ul, get(styling).ul) }))
          ]);
          append($$anchor3, ul_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if ($$props.review.item1 || $$props.review.item2 || $$props.review.item3) $$render(consequent_8);
          }),
          "if",
          Review,
          43,
          6
        );
      }
      reset(div_1);
      var div_5 = sibling(div_1, 2);
      var div_6 = child(div_5);
      var div_7 = child(div_6);
      var node_14 = child(div_7);
      {
        var consequent_9 = ($$anchor3) => {
          var footer2 = root_1110();
          var p_1 = child(footer2);
          var text_1 = child(p_1);
          reset(p_1);
          reset(footer2);
          template_effect(() => set_text(text_1, `Reviewed: ${$$props.review.reviewDate ?? ""}`));
          append($$anchor3, footer2);
        };
        add_svelte_meta(
          () => if_block(node_14, ($$render) => {
            if ($$props.review.reviewDate) $$render(consequent_9);
          }),
          "if",
          Review,
          73,
          10
        );
      }
      var h4 = sibling(node_14, 2);
      var text_2 = child(h4, true);
      reset(h4);
      reset(div_7);
      var p_2 = sibling(div_7, 2);
      var text_3 = child(p_2, true);
      reset(p_2);
      reset(div_6);
      var node_15 = sibling(div_6, 2);
      add_svelte_meta(() => snippet(node_15, () => $$props.children), "render", Review, 88, 6);
      reset(div_5);
      reset(article_1);
      template_effect(
        ($0, $1, $2, $3) => {
          set_class(article_1, 1, $0);
          set_class(div_2, 1, $1);
          set_class(img_1, 1, $2);
          set_attribute(img_1, "src", $$props.review.imgSrc);
          set_attribute(img_1, "alt", $$props.review.imgAlt);
          set_class(div_3, 1, $3);
          set_text(text2, $$props.review.name);
          set_text(text_2, $$props.review.title);
          set_text(text_3, $$props.review.rating);
        },
        [
          () => clsx2(get(article)({ class: clsx_default(theme?.article, get(styling).article) })),
          () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) })),
          () => clsx2(get(img2)({ class: clsx_default(theme?.img, get(styling).img) })),
          () => clsx2(get(div2)({ class: clsx_default(theme?.div2, get(styling).div2) }))
        ]
      );
      append($$anchor2, article_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.review) $$render(consequent_10);
      }),
      "if",
      Review,
      27,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Review = hmr(Review, () => Review[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Review[HMR].source;
    set(Review[HMR].source, module.default[HMR].original);
  });
}
var Review_default = Review;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte
ScoreRating[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/ScoreRating.svelte";
var root_225 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[17, 6]]);
var root_321 = add_locations(from_html(`<p> </p>`), ScoreRating[FILENAME], [[20, 6]]);
var root_414 = add_locations(from_html(`<span></span> <p> </p>`, 1), ScoreRating[FILENAME], [[23, 6], [24, 6]]);
var root_511 = add_locations(from_html(`<a> </a>`), ScoreRating[FILENAME], [[27, 6]]);
var root_139 = add_locations(from_html(`<!> <!> <!> <!>`, 1), ScoreRating[FILENAME], []);
var root_76 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="mb-3 flex items-center"><div class="me-2 h-2.5 w-full rounded-sm bg-gray-200 dark:bg-gray-700"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [
    35,
    8,
    [[36, 10], [39, 10, [[40, 12, [[41, 14]]], [43, 12]]]]
  ]
]);
var root_94 = add_locations(from_html(`<dl><dt class="text-sm font-medium text-gray-500 dark:text-gray-400"> </dt> <dd class="mb-3 flex items-center"><div class="me-2 h-2.5 w-full rounded-sm bg-gray-200 dark:bg-gray-700"><div></div></div> <span class="text-sm font-medium text-gray-500 dark:text-gray-400"> </span></dd></dl>`), ScoreRating[FILENAME], [
  [
    52,
    8,
    [[53, 10], [56, 10, [[57, 12, [[58, 14]]], [60, 12]]]]
  ]
]);
var root53 = add_locations(from_html(`<div class="mb-5 flex items-center"><!></div> <div class="gap-8 sm:grid sm:grid-cols-2"><div><!></div> <div><!></div></div>`, 1), ScoreRating[FILENAME], [[14, 0], [31, 0, [[32, 2], [49, 2]]]]);
function ScoreRating($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ScoreRating);
  const theme = getTheme("scoreRating");
  const $$d = tag(user_derived(scoreRating), "[$derived object]"), desc1 = tag(user_derived(() => get($$d).desc1), "desc1"), desc2 = tag(user_derived(() => get($$d).desc2), "desc2"), desc3span = tag(user_derived(() => get($$d).desc3span), "desc3span"), desc3p = tag(user_derived(() => get($$d).desc3p), "desc3p"), link = tag(user_derived(() => get($$d).link), "link"), bar = tag(user_derived(() => get($$d).bar), "bar");
  var $$exports = { ...legacy_api() };
  var fragment = root53();
  var div = first_child(fragment);
  var node = child(div);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment_1 = root_139();
      var node_1 = first_child(fragment_1);
      {
        var consequent = ($$anchor3) => {
          var p2 = root_225();
          var text2 = child(p2, true);
          reset(p2);
          template_effect(
            ($0) => {
              set_class(p2, 1, $0);
              set_text(text2, $$props.headerLabel.desc1);
            },
            [
              () => clsx2(get(desc1)({ class: clsx_default(theme?.desc1, $$props.classes?.desc1) }))
            ]
          );
          append($$anchor3, p2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.headerLabel.desc1) $$render(consequent);
          }),
          "if",
          ScoreRating,
          16,
          4
        );
      }
      var node_2 = sibling(node_1, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var p_1 = root_321();
          var text_1 = child(p_1, true);
          reset(p_1);
          template_effect(
            ($0) => {
              set_class(p_1, 1, $0);
              set_text(text_1, $$props.headerLabel.desc2);
            },
            [
              () => clsx2(get(desc2)({ class: clsx_default(theme?.desc2, $$props.classes?.desc2) }))
            ]
          );
          append($$anchor3, p_1);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if ($$props.headerLabel.desc2) $$render(consequent_1);
          }),
          "if",
          ScoreRating,
          19,
          4
        );
      }
      var node_3 = sibling(node_2, 2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = root_414();
          var span2 = first_child(fragment_2);
          var p_2 = sibling(span2, 2);
          var text_2 = child(p_2, true);
          reset(p_2);
          template_effect(
            ($0, $1) => {
              set_class(span2, 1, $0);
              set_class(p_2, 1, $1);
              set_text(text_2, $$props.headerLabel.desc3);
            },
            [
              () => clsx2(get(desc3span)({ class: clsx_default(theme?.desc3span, $$props.classes?.desc3span) })),
              () => clsx2(get(desc3p)({ class: clsx_default(theme?.desc3p, $$props.classes?.desc3p) }))
            ]
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.headerLabel.desc3) $$render(consequent_2);
          }),
          "if",
          ScoreRating,
          22,
          4
        );
      }
      var node_4 = sibling(node_3, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var a2 = root_511();
          var text_3 = child(a2, true);
          reset(a2);
          template_effect(
            ($0) => {
              set_attribute(a2, "href", $$props.headerLabel.link.url);
              set_class(a2, 1, $0);
              set_text(text_3, $$props.headerLabel.link.label);
            },
            [
              () => clsx2(get(link)({ class: clsx_default(theme?.link, $$props.classes?.link) }))
            ]
          );
          append($$anchor3, a2);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if ($$props.headerLabel.link) $$render(consequent_3);
          }),
          "if",
          ScoreRating,
          26,
          4
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.headerLabel) $$render(consequent_4);
      }),
      "if",
      ScoreRating,
      15,
      2
    );
  }
  reset(div);
  var div_1 = sibling(div, 2);
  var div_2 = child(div_1);
  var node_5 = child(div_2);
  {
    var consequent_5 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_6 = first_child(fragment_3);
      add_svelte_meta(
        () => each(node_6, 17, () => $$props.ratings, index, ($$anchor3, $$item) => {
          let label2 = () => get($$item).label;
          label2();
          let rating2 = () => get($$item).rating;
          rating2();
          var dl = root_76();
          var dt = child(dl);
          var text_4 = child(dt, true);
          reset(dt);
          var dd = sibling(dt, 2);
          var div_3 = child(dd);
          var div_4 = child(div_3);
          reset(div_3);
          var span_1 = sibling(div_3, 2);
          var text_5 = child(span_1, true);
          reset(span_1);
          reset(dd);
          reset(dl);
          template_effect(
            ($0) => {
              set_text(text_4, label2());
              set_class(div_4, 1, $0);
              set_style(div_4, `width: ${rating2() * 10}%`);
              set_text(text_5, rating2());
            },
            [
              () => clsx2(get(bar)({ class: clsx_default(theme?.bar, $$props.classes?.bar) }))
            ]
          );
          append($$anchor3, dl);
        }),
        "each",
        ScoreRating,
        34,
        6
      );
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if ($$props.ratings) $$render(consequent_5);
      }),
      "if",
      ScoreRating,
      33,
      4
    );
  }
  reset(div_2);
  var div_5 = sibling(div_2, 2);
  var node_7 = child(div_5);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_4 = comment();
      var node_8 = first_child(fragment_4);
      add_svelte_meta(
        () => each(node_8, 17, () => $$props.ratings2, index, ($$anchor3, $$item) => {
          let label2 = () => get($$item).label;
          label2();
          let rating2 = () => get($$item).rating;
          rating2();
          var dl_1 = root_94();
          var dt_1 = child(dl_1);
          var text_6 = child(dt_1, true);
          reset(dt_1);
          var dd_1 = sibling(dt_1, 2);
          var div_6 = child(dd_1);
          var div_7 = child(div_6);
          reset(div_6);
          var span_2 = sibling(div_6, 2);
          var text_7 = child(span_2, true);
          reset(span_2);
          reset(dd_1);
          reset(dl_1);
          template_effect(
            ($0) => {
              set_text(text_6, label2());
              set_class(div_7, 1, $0);
              set_style(div_7, `width: ${rating2() * 10}%`);
              set_text(text_7, rating2());
            },
            [
              () => clsx2(get(bar)({ class: clsx_default(theme?.bar, $$props.classes?.bar) }))
            ]
          );
          append($$anchor3, dl_1);
        }),
        "each",
        ScoreRating,
        51,
        6
      );
      append($$anchor2, fragment_4);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if ($$props.ratings2) $$render(consequent_6);
      }),
      "if",
      ScoreRating,
      50,
      4
    );
  }
  reset(div_5);
  reset(div_1);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ScoreRating = hmr(ScoreRating, () => ScoreRating[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ScoreRating[HMR].source;
    set(ScoreRating[HMR].source, module.default[HMR].original);
  });
}
var ScoreRating_default = ScoreRating;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Thumbup.svelte
Thumbup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/Thumbup.svelte";
var root_140 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), Thumbup[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_226 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), Thumbup[FILENAME], [[19, 8], [20, 8]]);
var root54 = add_locations(from_svg(`<svg><defs><linearGradient><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round" d="M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00.322-1.672V3a.75.75 0 01.75-.75A2.25 2.25 0 0116.5 4.5c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 01-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 00-1.423-.23H5.904M14.25 9h2.25M5.904 18.75c.083.205.173.405.27.602.197.4-.078.898-.523.898h-.908c-.889 0-1.713-.518-1.972-1.368a12 12 0 01-.521-3.507c0-1.553.295-3.036.831-4.398C3.387 10.203 4.167 9.75 5 9.75h1.053c.472 0 .745.556.5.96a8.958 8.958 0 00-1.302 4.665c0 1.194.232 2.333.654 3.375z"></path></svg>`), Thumbup[FILENAME], [[10, 0, [[11, 2, [[12, 4]]], [24, 2]]]]);
function Thumbup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Thumbup);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#00b500"), strokeColor = prop($$props, "strokeColor", 3, "#00b500"), size2 = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "thumbup"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "star"), role = prop($$props, "role", 3, "img"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var $$exports = { ...legacy_api() };
  var svg = root54();
  attribute_effect(
    svg,
    ($0) => ({
      width: size2(),
      height: size2(),
      ...restProps,
      class: $0,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5",
      stroke: "currentColor",
      fill: "none"
    }),
    [() => clsx_default($$props.svgClass)]
  );
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_140();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_226();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Thumbup,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", uniqueId);
    set_attribute(path, "fill", `url(#${uniqueId})`);
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Thumbup = hmr(Thumbup, () => Thumbup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Thumbup[HMR].source;
    set(Thumbup[HMR].source, module.default[HMR].original);
  });
}
var Thumbup_default = Thumbup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/CustomIcon.svelte
CustomIcon[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/rating/CustomIcon.svelte";
var root_141 = add_locations(from_svg(`<stop offset="0%"></stop><stop></stop><stop stop-color="transparent"></stop><stop offset="100%" stop-color="transparent"></stop>`, 1), CustomIcon[FILENAME], [[14, 8], [15, 8], [16, 8], [17, 8]]);
var root_227 = add_locations(from_svg(`<stop offset="0%"></stop><stop offset="100%"></stop>`, 1), CustomIcon[FILENAME], [[19, 8], [20, 8]]);
var root55 = add_locations(from_svg(`<svg><defs><linearGradient x1="0%" y1="0%" x2="100%" y2="0%"><!></linearGradient></defs><path stroke-linecap="round" stroke-linejoin="round"></path></svg>`), CustomIcon[FILENAME], [[10, 0, [[11, 2, [[12, 4]]], [25, 2]]]]);
function CustomIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CustomIcon);
  let fillPercent = prop($$props, "fillPercent", 3, 100), fillColor = prop($$props, "fillColor", 3, "#00ff00"), strokeColor = prop($$props, "strokeColor", 3, "#00ff00"), size2 = prop($$props, "size", 3, 24), ariaLabel = prop($$props, "ariaLabel", 3, "custom icon"), iconIndex = prop($$props, "iconIndex", 3, 0), groupId = prop($$props, "groupId", 3, "custom"), role = prop($$props, "role", 3, "img"), pathd = prop($$props, "pathd", 3, "M21 8.25c0-2.485-2.099-4.5-4.688-4.5-1.935 0-3.597 1.126-4.312 2.733-.715-1.607-2.377-2.733-4.313-2.733C5.1 3.75 3 5.765 3 8.25c0 7.22 9 12 9 12s9-4.78 9-12z"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "fillPercent",
      "fillColor",
      "strokeColor",
      "size",
      "ariaLabel",
      "iconIndex",
      "groupId",
      "role",
      "svgClass",
      "pathd"
    ],
    "restProps"
  );
  const uniqueId = `${groupId()}-${iconIndex()}`;
  var $$exports = { ...legacy_api() };
  var svg = root55();
  attribute_effect(
    svg,
    ($0) => ({
      width: size2(),
      height: size2(),
      class: $0,
      ...restProps,
      "aria-label": ariaLabel(),
      viewBox: "0 0 24 24",
      role: role(),
      "stroke-width": "1.5"
    }),
    [() => clsx_default($$props.svgClass)]
  );
  var defs = child(svg);
  var linearGradient = child(defs);
  var node = child(linearGradient);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_141();
      var stop = first_child(fragment);
      var stop_1 = sibling(stop);
      var stop_2 = sibling(stop_1);
      next();
      template_effect(() => {
        set_attribute(stop, "stop-color", fillColor());
        set_attribute(stop_1, "offset", `${fillPercent() ?? ""}%`);
        set_attribute(stop_1, "stop-color", fillColor());
        set_attribute(stop_2, "offset", `${fillPercent() ?? ""}%`);
      });
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = root_227();
      var stop_3 = first_child(fragment_1);
      var stop_4 = sibling(stop_3);
      template_effect(() => {
        set_attribute(stop_3, "stop-color", fillColor());
        set_attribute(stop_4, "stop-color", fillColor());
      });
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(fillPercent(), 100, false)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      CustomIcon,
      13,
      6
    );
  }
  reset(linearGradient);
  reset(defs);
  var path = sibling(defs);
  reset(svg);
  template_effect(() => {
    set_attribute(linearGradient, "id", uniqueId);
    set_attribute(path, "d", pathd());
    set_attribute(path, "fill", `url(#${uniqueId})`);
    set_attribute(path, "stroke", strokeColor());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  CustomIcon = hmr(CustomIcon, () => CustomIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CustomIcon[HMR].source;
    set(CustomIcon[HMR].source, module.default[HMR].original);
  });
}
var CustomIcon_default = CustomIcon;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/theme.js
var sidebar = T({
  slots: {
    base: "top-0 left-0 z-50 w-64 transition-transform bg-gray-50 dark:bg-gray-800",
    active: "flex items-center group-has-[ul]:ms-6 p-2 text-base font-normal text-gray-900 bg-gray-200 dark:bg-gray-700 rounded-sm dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700",
    nonactive: "flex items-center group-has-[ul]:ms-6 p-2 text-base font-normal text-gray-900 rounded-sm dark:text-white hover:bg-gray-100 dark:hover:bg-gray-700",
    div: "overflow-y-auto px-3 py-4 bg-gray-50 dark:bg-gray-800",
    backdrop: "fixed top-0 start-0 z-40 w-full h-full"
  },
  variants: {
    position: {
      fixed: { base: "fixed" },
      absolute: { base: "absolute" },
      static: { base: "static" }
    },
    isOpen: {
      true: "block",
      false: "hidden"
    },
    breakpoint: {
      sm: { base: "sm:block" },
      md: { base: "md:block" },
      lg: { base: "lg:block" },
      xl: { base: "xl:block" },
      "2xl": { base: "2xl:block" }
    },
    alwaysOpen: {
      true: { base: "block" }
      // Always display the sidebar when alwaysOpen is true
    },
    backdrop: {
      true: { backdrop: "bg-gray-900 opacity-75" }
    }
  },
  compoundVariants: [
    // When alwaysOpen is true, override the breakpoint display classes
    {
      alwaysOpen: true,
      class: {
        base: "!block"
      }
    }
  ]
});
var sidebarButton = T({
  slots: {
    base: "inline-flex items-center text-sm text-gray-500 rounded-lg hover:bg-gray-100 focus:outline-hidden focus:ring-2 focus:ring-gray-200 dark:text-gray-400 dark:hover:bg-gray-700 dark:focus:ring-gray-600",
    svg: "h-6 w-6 m-2"
  },
  variants: {
    breakpoint: {
      sm: "sm:hidden",
      md: "md:hidden",
      lg: "lg:hidden",
      xl: "xl:hidden",
      "2xl": "2xl:hidden"
    }
  }
});
var sidebarBrand = T({
  slots: {
    base: "flex items-center ps-2.5 mb-5",
    img: "h-6 me-3 sm:h-7",
    span: "self-center text-xl font-semibold whitespace-nowrap dark:text-white"
  }
});
var sidebarCta = T({
  slots: {
    base: "p-4 mt-6 bg-primary-50 rounded-lg dark:bg-primary-900",
    div: "flex items-center mb-3",
    span: "bg-primary-100 text-primary-800 text-sm font-semibold me-2 px-2.5 py-0.5 rounded-sm dark:bg-primary-200 dark:text-primary-900"
  }
});
var sidebarDropdownWrapper = T({
  slots: {
    base: "group",
    btn: "flex items-center p-2 w-full text-base font-normal text-gray-900 rounded-sm transition duration-75 group hover:bg-gray-100 dark:text-white dark:hover:bg-gray-700",
    span: "flex-1 ms-3 text-left whitespace-nowrap",
    svg: "h-3 w-3 text-gray-800 dark:text-white",
    ul: "py-2 space-y-0"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte
Sidebar[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/Sidebar.svelte";
var root_415 = add_locations(from_html(`<div role="presentation"></div>`), Sidebar[FILENAME], [[75, 8]]);
var root_67 = add_locations(from_html(`<div role="presentation"></div>`), Sidebar[FILENAME], [[77, 8]]);
var root_87 = add_locations(from_html(`<div role="presentation" class="fixed start-0 top-0 z-50 h-full w-full"></div>`), Sidebar[FILENAME], [[79, 8]]);
var root_102 = add_locations(from_html(`<div role="presentation" class="fixed start-0 top-0 z-50 h-full w-full"></div>`), Sidebar[FILENAME], [[81, 8]]);
var root_228 = add_locations(from_html(`<!> <aside><div><!></div></aside>`, 1), Sidebar[FILENAME], [[84, 4, [[85, 6]]]]);
var root_1111 = add_locations(from_html(`<aside><div><!></div></aside>`), Sidebar[FILENAME], [[91, 2, [[92, 4]]]]);
function Sidebar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Sidebar);
  let isOpen = prop($$props, "isOpen", 7, false), isSingle = prop($$props, "isSingle", 3, true), breakpoint = prop($$props, "breakpoint", 3, "md"), alwaysOpen = prop($$props, "alwaysOpen", 3, false), position = prop($$props, "position", 3, "fixed"), activateClickOutside = prop($$props, "activateClickOutside", 3, true), backdrop = prop($$props, "backdrop", 3, true), transition2 = prop($$props, "transition", 3, fly), activeUrl = prop($$props, "activeUrl", 3, ""), disableBreakpoints = prop($$props, "disableBreakpoints", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "isOpen",
      "closeSidebar",
      "isSingle",
      "breakpoint",
      "alwaysOpen",
      "position",
      "activateClickOutside",
      "backdrop",
      "backdropClass",
      "transition",
      "params",
      "divClass",
      "ariaLabel",
      "nonActiveClass",
      "activeClass",
      "activeUrl",
      "class",
      "classes",
      "disableBreakpoints"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Sidebar",
    {
      backdropClass: $$props.backdropClass,
      divClass: $$props.divClass,
      nonActiveClass: $$props.nonActiveClass,
      activeClass: $$props.activeClass
    },
    {
      backdropClass: "backdrop",
      divClass: "div",
      nonActiveClass: "nonactive",
      activeClass: "active"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      backdrop: $$props.backdropClass,
      div: $$props.divClass,
      nonactive: $$props.nonActiveClass,
      active: $$props.activeClass
    }),
    "styling"
  );
  const theme = getTheme("sidebar");
  const breakpointValues = { sm: 640, md: 768, lg: 1024, xl: 1280, "2xl": 1536 };
  let innerWidth = tag(state(-1), "innerWidth");
  let isLargeScreen = tag(
    user_derived(() => disableBreakpoints() ? false : alwaysOpen() || get(innerWidth) >= breakpointValues[breakpoint()]),
    "isLargeScreen"
  );
  const activeUrlStore = tag_proxy(proxy({ value: "" }), "activeUrlStore");
  setContext("activeUrl", activeUrlStore);
  user_effect(() => {
    activeUrlStore.value = activeUrl();
  });
  if (disableBreakpoints()) isOpen(true);
  const $$d = tag(
    user_derived(() => sidebar({
      isOpen: isOpen(),
      breakpoint: breakpoint(),
      position: position(),
      backdrop: backdrop(),
      alwaysOpen: alwaysOpen() && !disableBreakpoints()
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), active = tag(user_derived(() => get($$d).active), "active"), nonactive = tag(user_derived(() => get($$d).nonactive), "nonactive"), div = tag(user_derived(() => get($$d).div), "div"), backdropCls = tag(user_derived(() => get($$d).backdrop), "backdropCls");
  let sidebarCtx = {
    get closeSidebar() {
      return $$props.closeSidebar;
    },
    get activeClass() {
      return get(active)({ class: clsx_default(theme?.active, get(styling).active) });
    },
    get nonActiveClass() {
      return get(nonactive)({ class: clsx_default(theme?.nonactive, get(styling).nonactive) });
    },
    isSingle: isSingle()
  };
  let transitionParams = $$props.params ? $$props.params : { x: -320, duration: 200, easing: sineIn };
  setContext("sidebarContext", sidebarCtx);
  const handleEscape = () => {
    $$props.closeSidebar?.();
  };
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent_5 = ($$anchor3) => {
          var fragment_2 = root_228();
          var node_2 = first_child(fragment_2);
          {
            var consequent_4 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_3 = first_child(fragment_3);
              {
                var consequent = ($$anchor5) => {
                  var div_1 = root_415();
                  div_1.__click = function(...$$args) {
                    apply(() => $$props.closeSidebar, this, $$args, Sidebar, [75, 114]);
                  };
                  template_effect(($0) => set_class(div_1, 1, $0), [
                    () => clsx2(get(backdropCls)({ class: clsx_default(theme?.backdrop, get(styling).backdrop) }))
                  ]);
                  append($$anchor5, div_1);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_4 = comment();
                  var node_4 = first_child(fragment_4);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var div_2 = root_67();
                      template_effect(($0) => set_class(div_2, 1, $0), [
                        () => clsx2(get(backdropCls)({ class: clsx_default(theme?.backdrop, get(styling).backdrop) }))
                      ]);
                      append($$anchor6, div_2);
                    };
                    var alternate_1 = ($$anchor6) => {
                      var fragment_5 = comment();
                      var node_5 = first_child(fragment_5);
                      {
                        var consequent_2 = ($$anchor7) => {
                          var div_3 = root_87();
                          div_3.__click = function(...$$args) {
                            apply(() => $$props.closeSidebar, this, $$args, Sidebar, [79, 89]);
                          };
                          append($$anchor7, div_3);
                        };
                        var alternate = ($$anchor7) => {
                          var fragment_6 = comment();
                          var node_6 = first_child(fragment_6);
                          {
                            var consequent_3 = ($$anchor8) => {
                              var div_4 = root_102();
                              append($$anchor8, div_4);
                            };
                            add_svelte_meta(
                              () => if_block(
                                node_6,
                                ($$render) => {
                                  if (!backdrop() && !activateClickOutside()) $$render(consequent_3);
                                },
                                true
                              ),
                              "if",
                              Sidebar,
                              80,
                              6
                            );
                          }
                          append($$anchor7, fragment_6);
                        };
                        add_svelte_meta(
                          () => if_block(
                            node_5,
                            ($$render) => {
                              if (!backdrop() && activateClickOutside()) $$render(consequent_2);
                              else $$render(alternate, false);
                            },
                            true
                          ),
                          "if",
                          Sidebar,
                          78,
                          6
                        );
                      }
                      append($$anchor6, fragment_5);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_4,
                        ($$render) => {
                          if (backdrop() && !activateClickOutside()) $$render(consequent_1);
                          else $$render(alternate_1, false);
                        },
                        true
                      ),
                      "if",
                      Sidebar,
                      76,
                      6
                    );
                  }
                  append($$anchor5, fragment_4);
                };
                add_svelte_meta(
                  () => if_block(node_3, ($$render) => {
                    if (backdrop() && activateClickOutside()) $$render(consequent);
                    else $$render(alternate_2, false);
                  }),
                  "if",
                  Sidebar,
                  74,
                  6
                );
              }
              append($$anchor4, fragment_3);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if (isOpen() && !alwaysOpen()) $$render(consequent_4);
              }),
              "if",
              Sidebar,
              73,
              4
            );
          }
          var aside = sibling(node_2, 2);
          attribute_effect(aside, ($0) => ({ ...restProps, class: $0, "aria-label": $$props.ariaLabel }), [
            () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
          ]);
          var div_5 = child(aside);
          var node_7 = child(div_5);
          add_svelte_meta(() => snippet(node_7, () => $$props.children), "render", Sidebar, 86, 8);
          reset(div_5);
          reset(aside);
          action(aside, ($$node, $$action_arg) => trapFocus?.($$node, $$action_arg), () => !get(isLargeScreen) && isOpen() && !alwaysOpen() ? { onEscape: $$props.closeSidebar ? handleEscape : void 0 } : null);
          template_effect(($0) => set_class(div_5, 1, $0), [
            () => clsx2(get(div)({ class: clsx_default(theme?.base, get(styling).div) }))
          ]);
          transition(3, aside, transition2, () => !alwaysOpen() ? transitionParams : void 0);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (isOpen() || get(isLargeScreen)) $$render(consequent_5);
          }),
          "if",
          Sidebar,
          72,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_3 = ($$anchor2) => {
      var aside_1 = root_1111();
      attribute_effect(aside_1, ($0) => ({ ...restProps, class: $0, "aria-label": $$props.ariaLabel }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var div_6 = child(aside_1);
      var node_8 = child(div_6);
      add_svelte_meta(() => snippet(node_8, () => $$props.children), "render", Sidebar, 93, 6);
      reset(div_6);
      reset(aside_1);
      action(aside_1, ($$node, $$action_arg) => trapFocus?.($$node, $$action_arg), () => isOpen() ? { onEscape: $$props.closeSidebar ? handleEscape : void 0 } : null);
      template_effect(($0) => set_class(div_6, 1, $0), [
        () => clsx2(get(div)({ class: clsx_default(theme?.base, get(styling).div) }))
      ]);
      append($$anchor2, aside_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!disableBreakpoints()) $$render(consequent_6);
        else $$render(alternate_3, false);
      }),
      "if",
      Sidebar,
      71,
      0
    );
  }
  bind_window_size("innerWidth", ($$value) => set(innerWidth, $$value, true));
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Sidebar = hmr(Sidebar, () => Sidebar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Sidebar[HMR].source;
    set(Sidebar[HMR].source, module.default[HMR].original);
  });
}
var Sidebar_default = Sidebar;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte
SidebarWrapper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarWrapper.svelte";
var root56 = add_locations(from_html(`<div><!></div>`), SidebarWrapper[FILENAME], [[6, 0]]);
function SidebarWrapper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarWrapper);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children"], "restProps");
  var $$exports = { ...legacy_api() };
  var div = root56();
  attribute_effect(div, () => ({ ...restProps }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", SidebarWrapper, 7, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarWrapper = hmr(SidebarWrapper, () => SidebarWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarWrapper[HMR].source;
    set(SidebarWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarWrapper_default = SidebarWrapper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte
SidebarDropdownWrapper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarDropdownWrapper.svelte";
var root_416 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5 5 1 1 5"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[74, 8, [[75, 10]]]]);
var root_77 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 1 4 4 4-4"></path></svg>`), SidebarDropdownWrapper[FILENAME], [[81, 6, [[82, 8]]]]);
var root_88 = add_locations(from_html(`<ul><!></ul>`), SidebarDropdownWrapper[FILENAME], [[87, 4]]);
var root57 = add_locations(from_html(`<li><button><!> <span> </span> <!></button> <!></li>`), SidebarDropdownWrapper[FILENAME], [[64, 0, [[65, 2, [[69, 4]]]]]]);
function SidebarDropdownWrapper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarDropdownWrapper);
  const $selected = () => (validate_store(selected, "selected"), store_get(selected, "$selected", $$stores));
  const [$$stores, $$cleanup] = setup_stores();
  let isOpen = prop($$props, "isOpen", 15, false), transition2 = prop($$props, "transition", 3, slide), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "arrowup",
      "arrowdown",
      "icon",
      "isOpen",
      "btnClass",
      "label",
      "spanClass",
      "ulClass",
      "transition",
      "params",
      "svgClass",
      "class",
      "classes",
      "onclick"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "SidebarDropdownWrapper",
    {
      btnClass: $$props.btnClass,
      spanClass: $$props.spanClass,
      ulClass: $$props.ulClass,
      svgClass: $$props.svgClass
    },
    {
      btnClass: "btn",
      spanClass: "span",
      ulClass: "ul",
      svgClass: "svg"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      btn: $$props.btnClass,
      span: $$props.spanClass,
      ul: $$props.ulClass,
      svg: $$props.svgClass
    }),
    "styling"
  );
  const theme = getTheme("sidebarDropdownWrapper");
  const { base, btn, span: span2, svg, ul } = sidebarDropdownWrapper();
  let sidebarDropdown = uiHelpers();
  sidebarDropdown.isOpen = isOpen();
  let ctx = getContext("sidebarContext") || { isSingle: false };
  let self = {};
  if (ctx.isSingle && !ctx.selected) {
    ctx.selected = writable(null);
  }
  let selected = ctx.isSingle ? ctx.selected : writable(self);
  user_effect(() => {
    if (ctx.isSingle) {
      isOpen(strict_equals($selected(), self));
    } else {
      isOpen(sidebarDropdown.isOpen);
    }
  });
  function handleDropdown() {
    if (ctx.isSingle) {
      selected.update((current) => strict_equals(current, self) ? null : self);
    } else {
      sidebarDropdown.toggle();
    }
    if ($$props.onclick) $$props.onclick();
  }
  var $$exports = { ...legacy_api() };
  var li = root57();
  var button2 = child(li);
  attribute_effect(
    button2,
    ($0) => ({
      ...restProps,
      onclick: handleDropdown,
      type: "button",
      class: $0,
      "aria-controls": "sidebar-dropdown"
    }),
    [() => btn({ class: clsx_default(theme?.btn, get(styling).btn) })]
  );
  var node = child(button2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.icon), "render", SidebarDropdownWrapper, 67, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.icon) $$render(consequent);
      }),
      "if",
      SidebarDropdownWrapper,
      66,
      4
    );
  }
  var span_1 = sibling(node, 2);
  var text2 = child(span_1, true);
  reset(span_1);
  var node_2 = sibling(span_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_4, () => $$props.arrowup), "render", SidebarDropdownWrapper, 72, 8);
          append($$anchor3, fragment_2);
        };
        var alternate = ($$anchor3) => {
          var svg_1 = root_416();
          template_effect(($0) => set_class(svg_1, 0, $0), [
            () => clsx2(svg({ class: clsx_default(theme?.svg, get(styling).svg) }))
          ]);
          append($$anchor3, svg_1);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.arrowup) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          SidebarDropdownWrapper,
          71,
          6
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_5 = first_child(fragment_3);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_6 = first_child(fragment_4);
          add_svelte_meta(() => snippet(node_6, () => $$props.arrowdown), "render", SidebarDropdownWrapper, 79, 6);
          append($$anchor3, fragment_4);
        };
        var alternate_1 = ($$anchor3) => {
          var svg_2 = root_77();
          template_effect(($0) => set_class(svg_2, 0, $0), [
            () => clsx2(svg({ class: clsx_default(theme?.svg, get(styling).svg) }))
          ]);
          append($$anchor3, svg_2);
        };
        add_svelte_meta(
          () => if_block(
            node_5,
            ($$render) => {
              if ($$props.arrowdown) $$render(consequent_3);
              else $$render(alternate_1, false);
            },
            true
          ),
          "if",
          SidebarDropdownWrapper,
          78,
          4
        );
      }
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (isOpen()) $$render(consequent_2);
        else $$render(alternate_2, false);
      }),
      "if",
      SidebarDropdownWrapper,
      70,
      4
    );
  }
  reset(button2);
  var node_7 = sibling(button2, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var ul_1 = root_88();
      var node_8 = child(ul_1);
      add_svelte_meta(() => snippet(node_8, () => $$props.children), "render", SidebarDropdownWrapper, 88, 6);
      reset(ul_1);
      template_effect(($0) => set_class(ul_1, 1, $0), [
        () => clsx2(ul({ class: clsx_default(theme?.ul, get(styling).ul) }))
      ]);
      transition(3, ul_1, transition2, () => $$props.params);
      append($$anchor2, ul_1);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if (isOpen()) $$render(consequent_4);
      }),
      "if",
      SidebarDropdownWrapper,
      86,
      2
    );
  }
  reset(li);
  template_effect(
    ($0, $1) => {
      set_class(li, 1, $0);
      set_class(span_1, 1, $1);
      set_text(text2, $$props.label);
    },
    [
      () => clsx2(base({ class: clsx_default(theme?.base, $$props.class) })),
      () => clsx2(span2({ class: clsx_default(theme?.span, get(styling).span) }))
    ]
  );
  append($$anchor, li);
  var $$pop = pop($$exports);
  $$cleanup();
  return $$pop;
}
if (import.meta.hot) {
  SidebarDropdownWrapper = hmr(SidebarDropdownWrapper, () => SidebarDropdownWrapper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarDropdownWrapper[HMR].source;
    set(SidebarDropdownWrapper[HMR].source, module.default[HMR].original);
  });
}
var SidebarDropdownWrapper_default = SidebarDropdownWrapper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte
SidebarGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarGroup.svelte";
var root58 = add_locations(from_html(`<ul><!></ul>`), SidebarGroup[FILENAME], [[8, 0]]);
function SidebarGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarGroup);
  let className = prop($$props, "class", 3, "space-y-2"), borderClass = prop($$props, "borderClass", 3, "pt-4 mt-4 border-t border-gray-200 dark:border-gray-700"), border = prop($$props, "border", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "borderClass",
      "border"
    ],
    "restProps"
  );
  var $$exports = { ...legacy_api() };
  var ul = root58();
  attribute_effect(ul, ($0) => ({ ...restProps, class: $0 }), [() => border() ? clsx_default(borderClass()) : clsx_default(className())]);
  var node = child(ul);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", SidebarGroup, 9, 2);
  reset(ul);
  append($$anchor, ul);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarGroup = hmr(SidebarGroup, () => SidebarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarGroup[HMR].source;
    set(SidebarGroup[HMR].source, module.default[HMR].original);
  });
}
var SidebarGroup_default = SidebarGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte
SidebarItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarItem.svelte";
var root59 = add_locations(from_html(`<li><a><!> <span> </span> <!></a></li>`), SidebarItem[FILENAME], [[17, 0, [[18, 2, [[22, 4]]]]]]);
function SidebarItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarItem);
  let spanClass = prop($$props, "spanClass", 3, "ms-3"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "icon",
      "subtext",
      "href",
      "label",
      "spanClass",
      "activeClass",
      "nonActiveClass",
      "aClass",
      "active",
      "class"
    ],
    "restProps"
  );
  const context = getContext("sidebarContext") ?? {};
  const activeUrl = getContext("activeUrl");
  let activeItem = tag(
    user_derived(() => strict_equals($$props.active, void 0, false) ? $$props.active : activeUrl?.value ? strict_equals($$props.href, activeUrl?.value) : false),
    "activeItem"
  );
  let aCls = tag(
    user_derived(() => get(activeItem) ?? strict_equals(activeUrl?.value, $$props.href) ? $$props.activeClass ?? context.activeClass : $$props.nonActiveClass ?? context.nonActiveClass),
    "aCls"
  );
  var $$exports = { ...legacy_api() };
  var li = root59();
  var a2 = child(li);
  attribute_effect(
    a2,
    ($0) => ({
      onclick: context.closeSidebar,
      ...restProps,
      href: $$props.href,
      "aria-current": get(activeItem) ?? strict_equals(activeUrl?.value, $$props.href) ? "page" : void 0,
      class: $0
    }),
    [() => clsx_default(get(aCls), $$props.aClass)]
  );
  var node = child(a2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.icon), "render", SidebarItem, 20, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.icon) $$render(consequent);
      }),
      "if",
      SidebarItem,
      19,
      4
    );
  }
  var span2 = sibling(node, 2);
  var text2 = child(span2, true);
  reset(span2);
  var node_2 = sibling(span2, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_3, () => $$props.subtext), "render", SidebarItem, 24, 6);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.subtext) $$render(consequent_1);
      }),
      "if",
      SidebarItem,
      23,
      4
    );
  }
  reset(a2);
  reset(li);
  template_effect(
    ($0, $1) => {
      set_class(li, 1, $0);
      set_class(span2, 1, $1);
      set_text(text2, $$props.label);
    },
    [
      () => clsx2(clsx_default($$props.class)),
      () => clsx2(clsx_default(spanClass()))
    ]
  );
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarItem = hmr(SidebarItem, () => SidebarItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarItem[HMR].source;
    set(SidebarItem[HMR].source, module.default[HMR].original);
  });
}
var SidebarItem_default = SidebarItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarButton.svelte
SidebarButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarButton.svelte";
var root60 = add_locations(from_html(`<button><span class="sr-only">Open sidebar</span> <svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path clip-rule="evenodd" fill-rule="evenodd" d="M2 4.75A.75.75 0 012.75 4h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 4.75zm0 10.5a.75.75 0 01.75-.75h7.5a.75.75 0 010 1.5h-7.5a.75.75 0 01-.75-.75zM2 10a.75.75 0 01.75-.75h14.5a.75.75 0 010 1.5H2.75A.75.75 0 012 10z"></path></svg></button>`), SidebarButton[FILENAME], [[14, 0, [[15, 2], [16, 2, [[17, 4]]]]]]);
function SidebarButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarButton);
  let breakpoint = prop($$props, "breakpoint", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "breakpoint",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("sidebarButton");
  const $$d = tag(user_derived(() => sidebarButton({ breakpoint: breakpoint() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), svg = tag(user_derived(() => get($$d).svg), "svg");
  var $$exports = { ...legacy_api() };
  var button2 = root60();
  attribute_effect(button2, ($0) => ({ ...restProps, type: "button", class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var svg_1 = sibling(child(button2), 2);
  reset(button2);
  template_effect(($0) => set_class(svg_1, 0, $0), [
    () => clsx2(get(svg)({ class: clsx_default(theme?.svg, $$props.classes?.svg) }))
  ]);
  append($$anchor, button2);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarButton = hmr(SidebarButton, () => SidebarButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarButton[HMR].source;
    set(SidebarButton[HMR].source, module.default[HMR].original);
  });
}
var SidebarButton_default = SidebarButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte
SidebarCta[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarCta.svelte";
var root61 = add_locations(from_html(`<div><div><span> </span> <!></div> <!></div>`), SidebarCta[FILENAME], [[22, 0, [[23, 2, [[24, 4]]]]]]);
function SidebarCta($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarCta);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "divClass",
      "spanClass",
      "label",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("SidebarCta", { divClass: $$props.divClass, spanClass: $$props.spanClass }, { divClass: "div", spanClass: "span" });
  const styling = tag(user_derived(() => $$props.classes ?? { div: $$props.divClass, span: $$props.spanClass }), "styling");
  const theme = getTheme("sidebarCta");
  const $$d = tag(user_derived(sidebarCta), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), div = tag(user_derived(() => get($$d).div), "div"), span2 = tag(user_derived(() => get($$d).span), "span");
  var $$exports = { ...legacy_api() };
  var div_1 = root61();
  attribute_effect(div_1, ($0) => ({ ...restProps, id: "dropdown-cta", class: $0, role: "alert" }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var div_2 = child(div_1);
  var span_1 = child(div_2);
  var text2 = child(span_1, true);
  reset(span_1);
  var node = sibling(span_1, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.icon), "render", SidebarCta, 26, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.icon) $$render(consequent);
      }),
      "if",
      SidebarCta,
      25,
      4
    );
  }
  reset(div_2);
  var node_2 = sibling(div_2, 2);
  add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", SidebarCta, 29, 2);
  reset(div_1);
  template_effect(
    ($0, $1) => {
      set_class(div_2, 1, $0);
      set_class(span_1, 1, $1);
      set_text(text2, $$props.label);
    },
    [
      () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) })),
      () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) }))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarCta = hmr(SidebarCta, () => SidebarCta[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarCta[HMR].source;
    set(SidebarCta[HMR].source, module.default[HMR].original);
  });
}
var SidebarCta_default = SidebarCta;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte
SidebarBrand[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/sidebar/SidebarBrand.svelte";
var root_142 = add_locations(from_html(`<img/> <span> </span>`, 1), SidebarBrand[FILENAME], [[24, 4], [25, 4]]);
var root62 = add_locations(from_html(`<a><!></a>`), SidebarBrand[FILENAME], [[22, 0]]);
function SidebarBrand($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SidebarBrand);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "site",
      "imgClass",
      "spanClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("SidebarBrand", { imgClass: $$props.imgClass, spanClass: $$props.spanClass }, { imgClass: "img", spanClass: "span" });
  const styling = tag(user_derived(() => $$props.classes ?? { img: $$props.imgClass, span: $$props.spanClass }), "styling");
  const theme = getTheme("sidebarBrand");
  const $$d = tag(user_derived(sidebarBrand), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), img2 = tag(user_derived(() => get($$d).img), "img"), span2 = tag(user_derived(() => get($$d).span), "span");
  var $$exports = { ...legacy_api() };
  var a2 = root62();
  attribute_effect(
    a2,
    ($0) => ({
      ...restProps,
      href: $$props.site?.href ? $$props.site.href : "/",
      class: $0
    }),
    [
      () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
    ]
  );
  var node = child(a2);
  {
    var consequent = ($$anchor2) => {
      var fragment = root_142();
      var img_1 = first_child(fragment);
      var span_1 = sibling(img_1, 2);
      var text2 = child(span_1, true);
      reset(span_1);
      template_effect(
        ($0, $1) => {
          set_attribute(img_1, "src", $$props.site.img);
          set_class(img_1, 1, $0);
          set_attribute(img_1, "alt", $$props.site.name);
          set_class(span_1, 1, $1);
          set_text(text2, $$props.site.name);
        },
        [
          () => clsx2(get(img2)({ class: clsx_default(theme?.img, get(styling).img) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) }))
        ]
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", SidebarBrand, 27, 4);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_1,
            ($$render) => {
              if ($$props.children) $$render(consequent_1);
            },
            true
          ),
          "if",
          SidebarBrand,
          26,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.site) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      SidebarBrand,
      23,
      2
    );
  }
  reset(a2);
  append($$anchor, a2);
  return pop($$exports);
}
if (import.meta.hot) {
  SidebarBrand = hmr(SidebarBrand, () => SidebarBrand[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SidebarBrand[HMR].source;
    set(SidebarBrand[HMR].source, module.default[HMR].original);
  });
}
var SidebarBrand_default = SidebarBrand;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/theme.js
var cardPlaceholder = T({
  slots: {
    base: "p-4 rounded-sm border border-gray-200 shadow-sm animate-pulse md:p-6 dark:border-gray-700",
    area: "mb-4 flex h-48 items-center justify-center rounded-sm bg-gray-300 dark:bg-gray-700",
    icon: "text-gray-200 dark:text-gray-600",
    line: "rounded-full bg-gray-200 dark:bg-gray-700",
    footer: "mt-4 flex items-center space-x-3 rtl:space-x-reverse"
  },
  variants: {
    size: {
      sm: { base: "max-w-sm" },
      md: { base: "max-w-md" },
      lg: { base: "max-w-lg" },
      xl: { base: "max-w-xl" },
      "2xl": { base: "max-w-2xl" }
    }
  }
});
var imagePlaceholder = T({
  slots: {
    base: "space-y-8 animate-pulse md:space-y-0 md:space-x-8 rtl:space-x-reverse md:flex md:items-center",
    image: "flex w-full items-center justify-center rounded-sm bg-gray-300 sm:w-96 dark:bg-gray-700",
    svg: "text-gray-200",
    content: "w-full",
    line: "rounded-full bg-gray-200 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        image: "h-32",
        content: "space-y-2"
      },
      md: {
        image: "h-48",
        content: "space-y-3"
      },
      lg: {
        image: "h-64",
        content: "space-y-4"
      }
    },
    rounded: {
      none: {
        image: "rounded-none",
        line: "rounded-none"
      },
      sm: {
        image: "rounded-xs",
        line: "rounded-xs"
      },
      md: {
        image: "rounded-sm",
        line: "rounded-sm"
      },
      lg: {
        image: "rounded-lg",
        line: "rounded-lg"
      },
      full: {
        image: "rounded-full",
        line: "rounded-full"
      }
    }
  }
});
var listPlaceholder = T({
  slots: {
    base: "p-4 space-y-4 max-w-md rounded-sm border border-gray-200 divide-y divide-gray-200 shadow-sm animate-pulse dark:divide-gray-700 md:p-6 dark:border-gray-700",
    item: "flex items-center justify-between",
    content: "",
    title: "mb-2.5 h-2.5 w-24 rounded-full bg-gray-300 dark:bg-gray-600",
    subTitle: "h-2 w-32 rounded-full bg-gray-200 dark:bg-gray-700",
    extra: "h-2.5 w-12 rounded-full bg-gray-300 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        base: "p-3 space-y-3 max-w-sm md:p-4",
        title: "mb-2 h-2 w-20",
        subTitle: "h-1.5 w-28",
        extra: "h-2 w-10"
      },
      md: {},
      // default size
      lg: {
        base: "p-5 space-y-5 max-w-lg md:p-7",
        title: "mb-3 h-3 w-28",
        subTitle: "h-2.5 w-36",
        extra: "h-3 w-14"
      }
    },
    rounded: {
      none: { base: "rounded-none" },
      sm: { base: "rounded-xs" },
      md: { base: "rounded-sm" },
      lg: { base: "rounded-lg" },
      full: { base: "rounded-full p-8 md:p-16" }
    }
  }
});
var skeleton = T({
  slots: {
    wrapper: "animate-pulse",
    line: "rounded-full bg-gray-200 dark:bg-gray-700"
  },
  variants: {
    size: {
      sm: {
        wrapper: "max-w-sm"
      },
      md: {
        wrapper: "max-w-md"
      },
      lg: {
        wrapper: "max-w-lg"
      },
      xl: {
        wrapper: "max-w-xl"
      },
      "2xl": {
        wrapper: "max-w-2xl"
      }
    }
  }
});
var testimonialPlaceholder = T({
  slots: {
    base: "animate-pulse",
    lineA: "rounded-full bg-gray-200 dark:bg-gray-700",
    lineB: "rounded-full bg-gray-300 dark:bg-gray-700",
    svg: "me-2 h-10 w-10 text-gray-200 dark:text-gray-700",
    content: "mt-4 flex items-center justify-center"
  }
});
var textPlaceholder = T({
  slots: {
    base: "space-y-2.5 animate-pulse",
    div: "flex items-center space-x-2 rtl:space-x-reverse",
    lineA: "rounded-full bg-gray-200 dark:bg-gray-700",
    lineB: "rounded-full bg-gray-300 dark:bg-gray-600"
  },
  variants: {
    size: {
      sm: { base: "max-w-sm" },
      md: { base: "max-w-md" },
      lg: { base: "max-w-lg" },
      xl: { base: "max-w-xl" },
      "2xl": { base: "max-w-2xl" }
    }
  }
});
var videoPlaceholder = T({
  base: "flex justify-center items-center h-56 bg-gray-300 rounded-lg animate-pulse dark:bg-gray-700",
  variants: {
    size: {
      sm: "max-w-sm",
      md: "max-w-md",
      lg: "max-w-lg",
      xl: "max-w-xl",
      "2xl": "max-w-2xl"
    }
  }
});
var widgetPlaceholder = T({
  slots: {
    base: "p-4 max-w-sm rounded-sm border border-gray-200 shadow-sm animate-pulse md:p-6 dark:border-gray-700",
    wrapper: "mt-4 flex items-baseline space-x-6 rtl:space-x-reverse",
    hLine: "rounded-full bg-gray-200 dark:bg-gray-700",
    vLine: "w-full rounded-t-lg bg-gray-200 dark:bg-gray-700"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte
CardPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/CardPlaceholder.svelte";
var root63 = add_locations(from_html(`<div><div><svg width="48" height="48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <div></div> <div></div> <div></div> <div></div> <div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), CardPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [15, 2, [[16, 4, [[17, 6]]]]],
      [20, 2],
      [21, 2],
      [22, 2],
      [23, 2],
      [24, 2, [[25, 4, [[26, 6]]], [28, 4], [29, 4]]],
      [31, 2]
    ]
  ]
]);
function CardPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CardPlaceholder);
  let size2 = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("cardPlaceholder");
  const $$d = tag(user_derived(() => cardPlaceholder({ size: size2() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), area = tag(user_derived(() => get($$d).area), "area"), icon = tag(user_derived(() => get($$d).icon), "icon"), line = tag(user_derived(() => get($$d).line), "line"), footer2 = tag(user_derived(() => get($$d).footer), "footer");
  var $$exports = { ...legacy_api() };
  var div = root63();
  attribute_effect(div, ($0) => ({ role: "status", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var div_1 = child(div);
  var svg = child(div_1);
  reset(div_1);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var svg_1 = child(div_6);
  var div_7 = sibling(svg_1, 2);
  var div_8 = sibling(div_7, 2);
  reset(div_6);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) => {
      set_class(div_1, 1, $0);
      set_class(svg, 0, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
      set_class(div_6, 1, $6);
      set_class(svg_1, 0, $7);
      set_class(div_7, 1, $8);
      set_class(div_8, 1, $9);
    },
    [
      () => clsx2(get(area)({ class: clsx_default(theme?.area, $$props.classes?.area) })),
      () => clsx2(get(icon)({ class: clsx_default(theme?.icon) })),
      () => clsx2(get(line)({
        class: clsx_default("mb-4 h-2.5 w-1/2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({ class: clsx_default("h-2", theme?.line, $$props.classes?.line) })),
      () => clsx2(get(footer2)({ class: clsx_default(theme?.footer, $$props.classes?.footer) })),
      () => clsx2(get(line)({ class: clsx_default("h-14 w-14", theme?.line, $$props.classes?.line) })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2 h-2.5 w-32", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2 h-2 w-32", theme?.line, $$props.classes?.line)
      }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  CardPlaceholder = hmr(CardPlaceholder, () => CardPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CardPlaceholder[HMR].source;
    set(CardPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var CardPlaceholder_default = CardPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte
ImagePlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/ImagePlaceholder.svelte";
var root_143 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div></div>`), ImagePlaceholder[FILENAME], [
  [
    26,
    4,
    [
      [27, 6],
      [32, 6],
      [37, 6],
      [42, 6],
      [47, 6],
      [52, 6],
      [57, 6]
    ]
  ]
]);
var root64 = add_locations(from_html(`<div><div><svg width="48" height="48" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 640 512"><path d="M480 80C480 35.82 515.8 0 560 0C604.2 0 640 35.82 640 80C640 124.2 604.2 160 560 160C515.8 160 480 124.2 480 80zM0 456.1C0 445.6 2.964 435.3 8.551 426.4L225.3 81.01C231.9 70.42 243.5 64 256 64C268.5 64 280.1 70.42 286.8 81.01L412.7 281.7L460.9 202.7C464.1 196.1 472.2 192 480 192C487.8 192 495 196.1 499.1 202.7L631.1 419.1C636.9 428.6 640 439.7 640 450.9C640 484.6 612.6 512 578.9 512H55.91C25.03 512 .0006 486.1 .0006 456.1L0 456.1z"></path></svg></div> <!> <span class="sr-only">Loading...</span></div>`), ImagePlaceholder[FILENAME], [[19, 0, [[20, 2, [[21, 4, [[22, 6]]]]], [64, 2]]]]);
function ImagePlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ImagePlaceholder);
  let size2 = prop($$props, "size", 3, "md"), imgOnly = prop($$props, "imgOnly", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "rounded",
      "imgOnly",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("imagePlaceholder");
  const $$d = tag(user_derived(() => imagePlaceholder({ size: size2(), rounded: $$props.rounded })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), image = tag(user_derived(() => get($$d).image), "image"), svg = tag(user_derived(() => get($$d).svg), "svg"), content = tag(user_derived(() => get($$d).content), "content"), line = tag(user_derived(() => get($$d).line), "line");
  var $$exports = { ...legacy_api() };
  var div = root64();
  attribute_effect(div, ($0) => ({ role: "status", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default($$props.class, theme?.base) })
  ]);
  var div_1 = child(div);
  var svg_1 = child(div_1);
  reset(div_1);
  var node = sibling(div_1, 2);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_143();
      var div_3 = child(div_2);
      var div_4 = sibling(div_3, 2);
      var div_5 = sibling(div_4, 2);
      var div_6 = sibling(div_5, 2);
      var div_7 = sibling(div_6, 2);
      var div_8 = sibling(div_7, 2);
      var div_9 = sibling(div_8, 2);
      reset(div_2);
      template_effect(
        ($0, $1, $2, $3, $4, $5, $6, $7) => {
          set_class(div_2, 1, $0);
          set_class(div_3, 1, $1);
          set_class(div_4, 1, $2);
          set_class(div_5, 1, $3);
          set_class(div_6, 1, $4);
          set_class(div_7, 1, $5);
          set_class(div_8, 1, $6);
          set_class(div_9, 1, $7);
        },
        [
          () => clsx2(get(content)({ class: clsx_default(theme?.content, $$props.classes?.content) })),
          () => clsx2(get(line)({
            class: clsx_default("mb-4 h-2.5 w-1/2", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("mb-2.5 h-2 w-9/12", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("mb-2.5 h-2 w-10/12", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("mb-2.5 h-2 w-11/12", theme?.line, $$props.classes?.line)
          })),
          () => clsx2(get(line)({
            class: clsx_default("h-2 w-9/12", theme?.line, $$props.classes?.line)
          }))
        ]
      );
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!imgOnly()) $$render(consequent);
      }),
      "if",
      ImagePlaceholder,
      25,
      2
    );
  }
  next(2);
  reset(div);
  template_effect(
    ($0, $1) => {
      set_class(div_1, 1, $0);
      set_class(svg_1, 0, $1);
    },
    [
      () => clsx2(get(image)({ class: clsx_default(theme?.image, $$props.classes?.image) })),
      () => clsx2(get(svg)({ class: clsx_default(theme?.svg, $$props.classes?.svg) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ImagePlaceholder = hmr(ImagePlaceholder, () => ImagePlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ImagePlaceholder[HMR].source;
    set(ImagePlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ImagePlaceholder_default = ImagePlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte
ListPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/ListPlaceholder.svelte";
var root_144 = add_locations(from_html(`<div><div><div></div> <div></div></div> <div></div></div>`), ListPlaceholder[FILENAME], [[18, 4, [[23, 6, [[28, 8], [33, 8]]], [39, 6]]]]);
var root65 = add_locations(from_html(`<div><!> <span class="sr-only">Loading...</span></div>`), ListPlaceholder[FILENAME], [[16, 0, [[46, 2]]]]);
function ListPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ListPlaceholder);
  let itemNumber = prop($$props, "itemNumber", 3, 5), size2 = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "itemNumber",
      "size",
      "rounded",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("listPlaceholder");
  const $$d = tag(user_derived(() => listPlaceholder({ size: size2(), rounded: $$props.rounded })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), content = tag(user_derived(() => get($$d).content), "content"), title = tag(user_derived(() => get($$d).title), "title"), subTitle = tag(user_derived(() => get($$d).subTitle), "subTitle"), extra = tag(user_derived(() => get($$d).extra), "extra");
  let items = tag(user_derived(() => [...Array(itemNumber()).keys()]), "items");
  var $$exports = { ...legacy_api() };
  var div = root65();
  attribute_effect(div, ($0) => ({ role: "status", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(div);
  add_svelte_meta(
    () => each(node, 17, () => get(items), index, ($$anchor2, _, i2) => {
      var div_1 = root_144();
      var div_2 = child(div_1);
      var div_3 = child(div_2);
      var div_4 = sibling(div_3, 2);
      reset(div_2);
      var div_5 = sibling(div_2, 2);
      reset(div_1);
      template_effect(
        ($0, $1, $2, $3, $4) => {
          set_class(div_1, 1, $0);
          set_class(div_2, 1, $1);
          set_class(div_3, 1, $2);
          set_class(div_4, 1, $3);
          set_class(div_5, 1, $4);
        },
        [
          () => clsx2(get(item)({
            class: clsx_default(i2 > 0 ? "pt-4" : "", theme?.item, $$props.classes?.item)
          })),
          () => clsx2(get(content)({ class: clsx_default(theme?.content, $$props.classes?.content) })),
          () => clsx2(get(title)({ class: clsx_default(theme?.title, $$props.classes?.title) })),
          () => clsx2(get(subTitle)({ class: clsx_default(theme?.subTitle, $$props.classes?.subTitle) })),
          () => clsx2(get(extra)({ class: clsx_default(theme?.extra, $$props.classes?.extra) }))
        ]
      );
      append($$anchor2, div_1);
    }),
    "each",
    ListPlaceholder,
    17,
    2
  );
  next(2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ListPlaceholder = hmr(ListPlaceholder, () => ListPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ListPlaceholder[HMR].source;
    set(ListPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var ListPlaceholder_default = ListPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte
Skeleton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/Skeleton.svelte";
var root66 = add_locations(from_html(`<div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <span class="sr-only">Loading...</span></div>`), Skeleton[FILENAME], [
  [
    14,
    0,
    [
      [15, 2],
      [20, 2],
      [25, 2],
      [26, 2],
      [27, 2],
      [32, 2],
      [37, 2],
      [38, 2]
    ]
  ]
]);
function Skeleton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Skeleton);
  let size2 = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("skeleton");
  const $$d = tag(user_derived(() => skeleton({ size: size2() })), "[$derived object]"), wrapper = tag(user_derived(() => get($$d).wrapper), "wrapper"), line = tag(user_derived(() => get($$d).line), "line");
  var $$exports = { ...legacy_api() };
  var div = root66();
  attribute_effect(div, ($0) => ({ role: "status", ...restProps, class: $0 }), [
    () => get(wrapper)({ class: clsx_default(theme?.wrapper, $$props.class) })
  ]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(div_4, 1, $3);
      set_class(div_5, 1, $4);
      set_class(div_6, 1, $5);
      set_class(div_7, 1, $6);
    },
    [
      () => clsx2(get(line)({
        class: clsx_default("mb-4 h-2.5 w-1/2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2 w-9/12", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2 w-10/12", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("mb-2.5 h-2 w-11/12", theme?.line, $$props.classes?.line)
      })),
      () => clsx2(get(line)({
        class: clsx_default("h-2 w-9/12", theme?.line, $$props.classes?.line)
      }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Skeleton = hmr(Skeleton, () => Skeleton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Skeleton[HMR].source;
    set(Skeleton[HMR].source, module.default[HMR].original);
  });
}
var Skeleton_default = Skeleton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte
TestimonialPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/TestimonialPlaceholder.svelte";
var root67 = add_locations(from_html(`<div><div></div> <div></div> <div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-6-3a2 2 0 11-4 0 2 2 0 014 0zm-2 4a5 5 0 00-4.546 2.916A5.986 5.986 0 0010 16a5.986 5.986 0 004.546-2.084A5 5 0 0010 11z" clip-rule="evenodd"></path></svg> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), TestimonialPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [15, 2],
      [20, 2],
      [25, 2, [[30, 4, [[31, 6]]], [33, 4], [38, 4]]],
      [44, 2]
    ]
  ]
]);
function TestimonialPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TestimonialPlaceholder);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class", "classes"], "restProps");
  const theme = getTheme("testimonialPlaceholder");
  const { base, lineA, lineB, svg, content } = testimonialPlaceholder();
  var $$exports = { ...legacy_api() };
  var div = root67();
  attribute_effect(div, ($0) => ({ role: "status", ...restProps, class: $0 }), [() => base({ class: clsx_default(theme?.base, $$props.class) })]);
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var svg_1 = child(div_3);
  var div_4 = sibling(svg_1, 2);
  var div_5 = sibling(div_4, 2);
  reset(div_3);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div_1, 1, $0);
      set_class(div_2, 1, $1);
      set_class(div_3, 1, $2);
      set_class(svg_1, 0, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
    },
    [
      () => clsx2(lineB({
        class: clsx_default("mx-auto mb-2.5 h-2.5 max-w-[640px]", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(lineB({
        class: clsx_default("mx-auto h-2.5 max-w-[540px]", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(content({ class: clsx_default(theme?.content, $$props.classes?.content) })),
      () => clsx2(svg({ class: clsx_default(theme?.svg, $$props.classes?.svg) })),
      () => clsx2(lineA({
        class: clsx_default("me-3 h-2.5 w-20", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(lineA({
        class: clsx_default("h-2 w-24", theme?.lineA, $$props.classes?.lineA)
      }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TestimonialPlaceholder = hmr(TestimonialPlaceholder, () => TestimonialPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TestimonialPlaceholder[HMR].source;
    set(TestimonialPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TestimonialPlaceholder_default = TestimonialPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte
TextPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/TextPlaceholder.svelte";
var root68 = add_locations(from_html(`<div><div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <div><div></div> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), TextPlaceholder[FILENAME], [
  [
    18,
    0,
    [
      [19, 2, [[24, 4], [25, 4], [26, 4]]],
      [28, 2, [[33, 4], [34, 4], [35, 4]]],
      [37, 2, [[42, 4], [43, 4], [44, 4]]],
      [46, 2, [[51, 4], [52, 4], [53, 4]]],
      [55, 2, [[60, 4], [61, 4], [62, 4]]],
      [64, 2, [[69, 4], [70, 4], [71, 4]]],
      [73, 2]
    ]
  ]
]);
function TextPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TextPlaceholder);
  let size2 = prop($$props, "size", 3, "sm"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("textPlaceholder");
  const $$d = tag(user_derived(() => textPlaceholder({ size: size2() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), div = tag(user_derived(() => get($$d).div), "div"), lineA = tag(user_derived(() => get($$d).lineA), "lineA"), lineB = tag(user_derived(() => get($$d).lineB), "lineB");
  var $$exports = { ...legacy_api() };
  var div_1 = root68();
  attribute_effect(div_1, ($0) => ({ role: "status", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var div_2 = child(div_1);
  var div_3 = child(div_2);
  var div_4 = sibling(div_3, 2);
  var div_5 = sibling(div_4, 2);
  reset(div_2);
  var div_6 = sibling(div_2, 2);
  var div_7 = child(div_6);
  var div_8 = sibling(div_7, 2);
  var div_9 = sibling(div_8, 2);
  reset(div_6);
  var div_10 = sibling(div_6, 2);
  var div_11 = child(div_10);
  var div_12 = sibling(div_11, 2);
  var div_13 = sibling(div_12, 2);
  reset(div_10);
  var div_14 = sibling(div_10, 2);
  var div_15 = child(div_14);
  var div_16 = sibling(div_15, 2);
  var div_17 = sibling(div_16, 2);
  reset(div_14);
  var div_18 = sibling(div_14, 2);
  var div_19 = child(div_18);
  var div_20 = sibling(div_19, 2);
  var div_21 = sibling(div_20, 2);
  reset(div_18);
  var div_22 = sibling(div_18, 2);
  var div_23 = child(div_22);
  var div_24 = sibling(div_23, 2);
  var div_25 = sibling(div_24, 2);
  reset(div_22);
  next(2);
  reset(div_1);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23) => {
      set_class(div_2, 1, $0);
      set_class(div_3, 1, $1);
      set_class(div_4, 1, $2);
      set_class(div_5, 1, $3);
      set_class(div_6, 1, $4);
      set_class(div_7, 1, $5);
      set_class(div_8, 1, $6);
      set_class(div_9, 1, $7);
      set_class(div_10, 1, $8);
      set_class(div_11, 1, $9);
      set_class(div_12, 1, $10);
      set_class(div_13, 1, $11);
      set_class(div_14, 1, $12);
      set_class(div_15, 1, $13);
      set_class(div_16, 1, $14);
      set_class(div_17, 1, $15);
      set_class(div_18, 1, $16);
      set_class(div_19, 1, $17);
      set_class(div_20, 1, $18);
      set_class(div_21, 1, $19);
      set_class(div_22, 1, $20);
      set_class(div_23, 1, $21);
      set_class(div_24, 1, $22);
      set_class(div_25, 1, $23);
    },
    [
      () => clsx2(get(div)({ class: clsx_default("w-full", theme?.div, $$props.classes?.div) })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-32", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-24", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(div)({ class: clsx_default("w-11/12", theme?.div, $$props.classes?.div) })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-full", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-24", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(div)({ class: clsx_default("w-9/12", theme?.div, $$props.classes?.div) })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-80", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(div)({ class: clsx_default("w-11/12", theme?.div, $$props.classes?.div) })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-full", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-24", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(div)({ class: clsx_default("w-10/12", theme?.div, $$props.classes?.div) })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-32", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-24", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-full", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(div)({ class: clsx_default("w-8/12", theme?.div) })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      })),
      () => clsx2(get(lineA)({
        class: clsx_default("h-2.5 w-80", theme?.lineA, $$props.classes?.lineA)
      })),
      () => clsx2(get(lineB)({
        class: clsx_default("h-2.5 w-full", theme?.lineB, $$props.classes?.lineB)
      }))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  TextPlaceholder = hmr(TextPlaceholder, () => TextPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TextPlaceholder[HMR].source;
    set(TextPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var TextPlaceholder_default = TextPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte
VideoPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/VideoPlaceholder.svelte";
var root69 = add_locations(from_html(`<div role="status"><svg width="48" height="48" class="text-gray-200 dark:text-gray-600" xmlns="http://www.w3.org/2000/svg" aria-hidden="true" fill="currentColor" viewBox="0 0 384 512"><path d="M361 215C375.3 223.8 384 239.3 384 256C384 272.7 375.3 288.2 361 296.1L73.03 472.1C58.21 482 39.66 482.4 24.52 473.9C9.377 465.4 0 449.4 0 432V80C0 62.64 9.377 46.63 24.52 38.13C39.66 29.64 58.21 29.99 73.03 39.04L361 215z"></path></svg> <span class="sr-only">Loading...</span></div>`), VideoPlaceholder[FILENAME], [[14, 0, [[15, 2, [[16, 4]]], [18, 2]]]]);
function VideoPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, VideoPlaceholder);
  let size2 = prop($$props, "size", 3, "sm");
  const theme = getTheme("videoPlaceholder");
  const base = tag(user_derived(() => videoPlaceholder({ size: size2(), class: clsx_default(theme, $$props.class) })), "base");
  var $$exports = { ...legacy_api() };
  var div = root69();
  template_effect(() => set_class(div, 1, clsx2(get(base))));
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  VideoPlaceholder = hmr(VideoPlaceholder, () => VideoPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VideoPlaceholder[HMR].source;
    set(VideoPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var VideoPlaceholder_default = VideoPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte
WidgetPlaceholder[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/skeleton/WidgetPlaceholder.svelte";
var root70 = add_locations(from_html(`<div role="status"><div></div> <div></div> <div><div></div> <div></div> <div></div> <div></div> <div></div> <div></div> <div></div></div> <span class="sr-only">Loading...</span></div>`), WidgetPlaceholder[FILENAME], [
  [
    14,
    0,
    [
      [15, 2],
      [16, 2],
      [
        17,
        2,
        [
          [18, 4],
          [19, 4],
          [20, 4],
          [21, 4],
          [22, 4],
          [23, 4],
          [24, 4]
        ]
      ],
      [26, 2]
    ]
  ]
]);
function WidgetPlaceholder($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, WidgetPlaceholder);
  const theme = getTheme("widgetPlaceholder");
  const { base, wrapper, vLine, hLine } = widgetPlaceholder({});
  var $$exports = { ...legacy_api() };
  var div = root70();
  var div_1 = child(div);
  var div_2 = sibling(div_1, 2);
  var div_3 = sibling(div_2, 2);
  var div_4 = child(div_3);
  var div_5 = sibling(div_4, 2);
  var div_6 = sibling(div_5, 2);
  var div_7 = sibling(div_6, 2);
  var div_8 = sibling(div_7, 2);
  var div_9 = sibling(div_8, 2);
  var div_10 = sibling(div_9, 2);
  reset(div_3);
  next(2);
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(div_4, 1, $4);
      set_class(div_5, 1, $5);
      set_class(div_6, 1, $6);
      set_class(div_7, 1, $7);
      set_class(div_8, 1, $8);
      set_class(div_9, 1, $9);
      set_class(div_10, 1, $10);
    },
    [
      () => clsx2(base({ class: clsx_default(theme?.base, $$props.class) })),
      () => clsx2(hLine({ class: clsx_default("mb-2.5 h-2.5 w-32", $$props.classes?.hLine) })),
      () => clsx2(hLine({ class: clsx_default("mb-10 h-2 w-48", $$props.classes?.hLine) })),
      () => clsx2(wrapper()),
      () => clsx2(vLine({ class: clsx_default("h-72", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-56", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-72", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-64", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-80", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-72", $$props.classes?.vLine) })),
      () => clsx2(vLine({ class: clsx_default("h-80", $$props.classes?.vLine) }))
    ]
  );
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  WidgetPlaceholder = hmr(WidgetPlaceholder, () => WidgetPlaceholder[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = WidgetPlaceholder[HMR].source;
    set(WidgetPlaceholder[HMR].source, module.default[HMR].original);
  });
}
var WidgetPlaceholder_default = WidgetPlaceholder;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/theme.js
var speedDial = T({
  slots: {
    base: "group bg-transparent",
    popper: "flex items-center gap-2 bg-transparent text-inherit"
  },
  variants: {
    vertical: {
      true: { popper: "flex-col" }
    }
  },
  defaultVariants: {
    vertical: false
  }
});
var speedDialButton = T({
  slots: {
    base: "w-[52px] h-[52px] shadow-xs p-0",
    span: "mb-px text-xs font-medium"
  },
  variants: {
    noTooltip: {
      false: {},
      true: {}
    },
    textOutside: {
      true: {
        base: "relative",
        span: "absolute -start-12 top-1/2 mb-px text-sm font-medium -translate-y-1/2"
      }
    }
  },
  compoundVariants: [{ noTooltip: true, textOutside: false, class: { base: "flex flex-col" } }],
  defaultVariants: {}
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte
SpeedDial[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDial.svelte";
var root_145 = add_locations(from_html(`<div><!></div>`), SpeedDial[FILENAME], [[29, 2]]);
function SpeedDial($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDial);
  var $$ownership_validator = create_ownership_validator($$props);
  let placement = prop($$props, "placement", 3, "top"), pill = prop($$props, "pill", 3, true), tooltip2 = prop($$props, "tooltip", 3, "left"), trigger = prop($$props, "trigger", 3, "hover"), textOutside = prop($$props, "textOutside", 3, false), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "popperClass",
      "placement",
      "pill",
      "tooltip",
      "trigger",
      "textOutside",
      "class",
      "classes",
      "isOpen"
    ],
    "restProps"
  );
  warnThemeDeprecation("SpeedDial", { popperClass: $$props.popperClass }, { popperClass: "popper" });
  const styling = tag(user_derived(() => $$props.classes ?? { popper: $$props.popperClass }), "styling");
  const theme = getTheme("speedDial");
  setContext("speed-dial", { pill: pill(), tooltip: tooltip2(), textOutside: textOutside() });
  let vertical = tag(user_derived(() => strict_equals(getSideAxis(placement()), "y")), "vertical");
  let $$d = tag(user_derived(() => speedDial({ vertical: get(vertical) })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), popper = tag(user_derived(() => get($$d).popper), "popper");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) }));
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    add_svelte_meta(
      () => Popper_default(node, spread_props(() => restProps, {
        get trigger() {
          return trigger();
        },
        arrow: false,
        get placement() {
          return placement();
        },
        get class() {
          return get($0);
        },
        get isOpen() {
          return isOpen();
        },
        set isOpen($$value) {
          isOpen($$value);
        },
        children: wrap_snippet(SpeedDial, ($$anchor2, $$slotProps) => {
          var div = root_145();
          var node_1 = child(div);
          add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", SpeedDial, 30, 4);
          reset(div);
          template_effect(($02) => set_class(div, 1, $02), [
            () => clsx2(get(popper)({ class: clsx_default(theme?.popper, get(styling).popper) }))
          ]);
          append($$anchor2, div);
        }),
        $$slots: { default: true }
      })),
      "component",
      SpeedDial,
      28,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  SpeedDial = hmr(SpeedDial, () => SpeedDial[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDial[HMR].source;
    set(SpeedDial[HMR].source, module.default[HMR].original);
  });
}
var SpeedDial_default = SpeedDial;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tooltip/theme.js
var tooltip = T({
  base: "absolute px-3 py-2 rounded-lg text-sm z-50 pointer-events-none",
  variants: {
    type: {
      light: "bg-white text-gray-800 dark:bg-white dark:text-gray-800 border border-gray-200 dark:border-gray-200",
      auto: "bg-white text-gray-800 dark:bg-gray-800 dark:text-white border border-gray-200 dark:border-gray-700",
      dark: "bg-gray-800 text-white dark:bg-gray-800 dark:text-white dark:border dark:border-gray-700"
    },
    color: {
      // default: "bg-gray-800 dark:bg-gray-300 dark:text-gray-800",
      primary: "bg-primary-600 dark:bg-primary-600",
      secondary: "bg-secondary-600 dark:bg-secondary-600",
      gray: "bg-gray-600 dark:bg-gray-600",
      red: "bg-red-600 dark:bg-red-600",
      orange: "bg-orange-600 dark:bg-orange-600",
      amber: "bg-amber-600 dark:bg-amber-600",
      yellow: "bg-yellow-400 dark:bg-yellow-400",
      lime: "bg-lime-600 dark:bg-lime-600",
      green: "bg-green-600 dark:bg-green-600",
      emerald: "bg-emerald-600 dark:bg-emerald-600",
      teal: "bg-teal-600 dark:bg-teal-600",
      cyan: "bg-cyan-600 dark:bg-cyan-600",
      sky: "bg-sky-600 dark:bg-sky-600",
      blue: "bg-blue-600 dark:bg-blue-600",
      indigo: "bg-indigo-600 dark:bg-indigo-600",
      violet: "bg-violet-600 dark:bg-violet-600",
      purple: "bg-purple-600 dark:bg-purple-600",
      fuchsia: "bg-fuchsia-600 dark:bg-fuchsia-600",
      pink: "bg-pink-600 dark:bg-pink-600",
      rose: "bg-rose-800 dark:bg-rose-800"
    }
  },
  defaultVariants: {
    type: "dark",
    color: void 0
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte
Tooltip[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tooltip/Tooltip.svelte";
var root_146 = add_locations(from_html(`<div class="pointer-events-none"><!></div>`), Tooltip[FILENAME], [[24, 2]]);
function Tooltip($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tooltip);
  var $$ownership_validator = create_ownership_validator($$props);
  let type = prop($$props, "type", 3, "dark"), color = prop($$props, "color", 3, void 0), trigger = prop($$props, "trigger", 3, "hover"), arrow3 = prop($$props, "arrow", 3, true), placement = prop($$props, "placement", 3, "top"), isOpen = prop($$props, "isOpen", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "type",
      "color",
      "trigger",
      "arrow",
      "children",
      "placement",
      "onbeforetoggle",
      "class",
      "isOpen"
    ],
    "restProps"
  );
  const theme = getTheme("tooltip");
  const base = tag(user_derived(() => tooltip({ color: color(), type: type(), class: clsx_default($$props.class) })), "base");
  function onbeforetoggle(ev) {
    if (ev.target instanceof HTMLElement) {
      ev.target.querySelectorAll('a, button, input, textarea, select, details, [tabindex], [contenteditable="true"]').forEach((element2) => element2.setAttribute("tabindex", "-1"));
    }
    $$props.onbeforetoggle?.(ev);
  }
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    $$ownership_validator.binding("isOpen", Popper_default, isOpen);
    add_svelte_meta(
      () => Popper_default(node, spread_props(() => restProps, {
        get placement() {
          return placement();
        },
        get trigger() {
          return trigger();
        },
        get arrow() {
          return arrow3();
        },
        get class() {
          return get(base);
        },
        onbeforetoggle,
        get isOpen() {
          return isOpen();
        },
        set isOpen($$value) {
          isOpen($$value);
        },
        children: wrap_snippet(Tooltip, ($$anchor2, $$slotProps) => {
          var div = root_146();
          var node_1 = child(div);
          add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Tooltip, 24, 35);
          reset(div);
          append($$anchor2, div);
        }),
        $$slots: { default: true }
      })),
      "component",
      Tooltip,
      23,
      0,
      { componentTag: "Popper" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tooltip = hmr(Tooltip, () => Tooltip[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tooltip[HMR].source;
    set(Tooltip[HMR].source, module.default[HMR].original);
  });
}
var Tooltip_default = Tooltip;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte
SpeedDialButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDialButton.svelte";
var root_147 = add_locations(from_html(`<!> <span> </span>`, 1), SpeedDialButton[FILENAME], [[34, 2]]);
var root71 = add_locations(from_html(`<!> <!>`, 1), SpeedDialButton[FILENAME], []);
function SpeedDialButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDialButton);
  const context = getContext("speed-dial");
  let name = prop($$props, "name", 3, ""), color = prop($$props, "color", 3, "light"), pill = prop($$props, "pill", 19, () => context.pill), textOutside = prop($$props, "textOutside", 19, () => context.textOutside), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "color",
      "tooltip",
      "pill",
      "textOutside",
      "textClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("SpeedDialButton", { textClass: $$props.textClass }, { textClass: "span" });
  const styling = tag(user_derived(() => $$props.classes ?? { span: $$props.textClass }), "styling");
  let tooltip2 = $$props.tooltip ?? context.tooltip;
  const theme = getTheme("speedDialButton");
  let $$d = tag(
    user_derived(() => speedDialButton({
      textOutside: textOutside(),
      noTooltip: strict_equals(tooltip2, "none")
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), span2 = tag(user_derived(() => get($$d).span), "span");
  let spanCls = tag(
    user_derived(() => strict_equals(tooltip2, "none") || textOutside() ? get(span2)({ class: clsx_default(theme?.span, get(styling).span) }) : "sr-only"),
    "spanCls"
  );
  let buttonCls = tag(user_derived(() => get(base)({ class: clsx_default(theme?.base, $$props.class) })), "buttonCls");
  var $$exports = { ...legacy_api() };
  var fragment = root71();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Button_default(node, spread_props(
      {
        get pill() {
          return pill();
        },
        get color() {
          return color();
        }
      },
      () => restProps,
      {
        get class() {
          return get(buttonCls);
        },
        children: wrap_snippet(SpeedDialButton, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_147();
          var node_1 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", SpeedDialButton, 33, 2);
          var span_1 = sibling(node_1, 2);
          var text2 = child(span_1, true);
          reset(span_1);
          template_effect(() => {
            set_class(span_1, 1, clsx2(get(spanCls)));
            set_text(text2, name());
          });
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }
    )),
    "component",
    SpeedDialButton,
    32,
    0,
    { componentTag: "Button" }
  );
  var node_2 = sibling(node, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment_2 = comment();
      var node_3 = first_child(fragment_2);
      add_svelte_meta(
        () => Tooltip_default(node_3, {
          get placement() {
            return tooltip2;
          },
          type: "dark",
          children: wrap_snippet(SpeedDialButton, ($$anchor3, $$slotProps) => {
            next();
            var text_1 = text();
            template_effect(() => set_text(text_1, name()));
            append($$anchor3, text_1);
          }),
          $$slots: { default: true }
        }),
        "component",
        SpeedDialButton,
        38,
        2,
        { componentTag: "Tooltip" }
      );
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (strict_equals(tooltip2, "none", false)) $$render(consequent);
      }),
      "if",
      SpeedDialButton,
      37,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  SpeedDialButton = hmr(SpeedDialButton, () => SpeedDialButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDialButton[HMR].source;
    set(SpeedDialButton[HMR].source, module.default[HMR].original);
  });
}
var SpeedDialButton_default = SpeedDialButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDialTrigger.svelte
SpeedDialTrigger[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/speed-dial/SpeedDialTrigger.svelte";
var moving_cross = wrap_snippet(SpeedDialTrigger, function($$anchor) {
  validate_snippet_args(...arguments);
  var svg = root_148();
  append($$anchor, svg);
});
var root_148 = add_locations(from_svg(`<svg aria-hidden="true" class="h-8 w-8 transition-transform group-hover:rotate-45" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>`), SpeedDialTrigger[FILENAME], [[18, 2, [[19, 4]]]]);
var root_322 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDialTrigger[FILENAME], [[30, 4]]);
var root_78 = add_locations(from_html(`<!> <span class="sr-only"> </span>`, 1), SpeedDialTrigger[FILENAME], [[39, 4]]);
function SpeedDialTrigger($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, SpeedDialTrigger);
  let name = prop($$props, "name", 3, "Open actions menu"), gradient = prop($$props, "gradient", 3, false), pill = prop($$props, "pill", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "name",
      "gradient",
      "icon",
      "pill",
      "color",
      "class"
    ],
    "restProps"
  );
  const buttonProps = tag(
    user_derived(() => ({
      pill: pill(),
      color: $$props.color,
      ...restProps,
      class: ["group p-3!", clsx_default($$props.class)]
    })),
    "buttonProps"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      add_svelte_meta(
        () => GradientButton_default(node_1, spread_props(() => get(buttonProps), {
          children: wrap_snippet(SpeedDialTrigger, ($$anchor3, $$slotProps) => {
            var fragment_2 = root_322();
            var node_2 = first_child(fragment_2);
            {
              var consequent = ($$anchor4) => {
                var fragment_3 = comment();
                var node_3 = first_child(fragment_3);
                add_svelte_meta(() => snippet(node_3, () => $$props.icon), "render", SpeedDialTrigger, 26, 6);
                append($$anchor4, fragment_3);
              };
              var alternate = ($$anchor4) => {
                add_svelte_meta(() => moving_cross($$anchor4), "render", SpeedDialTrigger, 28, 6);
              };
              add_svelte_meta(
                () => if_block(node_2, ($$render) => {
                  if ($$props.icon) $$render(consequent);
                  else $$render(alternate, false);
                }),
                "if",
                SpeedDialTrigger,
                25,
                4
              );
            }
            var span2 = sibling(node_2, 2);
            var text2 = child(span2, true);
            reset(span2);
            template_effect(() => set_text(text2, name()));
            append($$anchor3, fragment_2);
          }),
          $$slots: { default: true }
        })),
        "component",
        SpeedDialTrigger,
        24,
        2,
        { componentTag: "GradientButton" }
      );
      append($$anchor2, fragment_1);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_5 = comment();
      var node_4 = first_child(fragment_5);
      add_svelte_meta(
        () => Button_default(node_4, spread_props(() => get(buttonProps), {
          children: wrap_snippet(SpeedDialTrigger, ($$anchor3, $$slotProps) => {
            var fragment_6 = root_78();
            var node_5 = first_child(fragment_6);
            {
              var consequent_2 = ($$anchor4) => {
                var fragment_7 = comment();
                var node_6 = first_child(fragment_7);
                add_svelte_meta(() => snippet(node_6, () => $$props.icon), "render", SpeedDialTrigger, 35, 6);
                append($$anchor4, fragment_7);
              };
              var alternate_1 = ($$anchor4) => {
                add_svelte_meta(() => moving_cross($$anchor4), "render", SpeedDialTrigger, 37, 6);
              };
              add_svelte_meta(
                () => if_block(node_5, ($$render) => {
                  if ($$props.icon) $$render(consequent_2);
                  else $$render(alternate_1, false);
                }),
                "if",
                SpeedDialTrigger,
                34,
                4
              );
            }
            var span_1 = sibling(node_5, 2);
            var text_1 = child(span_1, true);
            reset(span_1);
            template_effect(() => set_text(text_1, name()));
            append($$anchor3, fragment_6);
          }),
          $$slots: { default: true }
        })),
        "component",
        SpeedDialTrigger,
        33,
        2,
        { componentTag: "Button" }
      );
      append($$anchor2, fragment_5);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (gradient()) $$render(consequent_1);
        else $$render(alternate_2, false);
      }),
      "if",
      SpeedDialTrigger,
      23,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  SpeedDialTrigger = hmr(SpeedDialTrigger, () => SpeedDialTrigger[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = SpeedDialTrigger[HMR].source;
    set(SpeedDialTrigger[HMR].source, module.default[HMR].original);
  });
}
var SpeedDialTrigger_default = SpeedDialTrigger;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/spinner/theme.js
var spinner = T({
  base: "inline-block animate-spin text-gray-300",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "fill-primary-600",
      secondary: "fill-secondary-600",
      gray: "fill-gray-600 dark:fill-gray-300",
      red: "fill-red-600",
      orange: "fill-orange-500",
      amber: "fill-amber-500",
      yellow: "fill-yellow-400",
      lime: "fill-lime-500",
      green: "fill-green-500",
      emerald: "fill-emerald-500",
      teal: "fill-teal-500",
      cyan: "fill-cyan-500",
      sky: "fill-sky-500",
      blue: "fill-blue-600",
      indigo: "fill-indigo-600",
      violet: "fill-violet-600",
      purple: "fill-purple-600",
      fuchsia: "fill-fuchsia-600",
      pink: "fill-pink-600",
      rose: "fill-rose-600"
    },
    size: {
      "4": "w-4 h-4",
      "5": "w-5 h-5",
      "6": "w-6 h-6",
      "8": "w-8 h-8",
      "10": "w-10 h-10",
      "12": "w-12 h-12",
      "16": "w-16 h-16"
    }
  },
  defaultVariants: {
    color: "primary",
    size: "8"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/spinner/Spinner.svelte
Spinner[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/spinner/Spinner.svelte";
var root72 = add_locations(from_svg(`<svg><path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z"></path><path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z"></path></svg>`), Spinner[FILENAME], [[14, 0, [[15, 2], [16, 2]]]]);
function Spinner($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Spinner);
  let color = prop($$props, "color", 3, "primary"), size2 = prop($$props, "size", 3, "8"), currentFill = prop($$props, "currentFill", 3, "currentFill"), currentColor = prop($$props, "currentColor", 3, "currentColor"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "color",
      "size",
      "class",
      "currentFill",
      "currentColor"
    ],
    "restProps"
  );
  const theme = getTheme("spinner");
  let spinnerClass = tag(
    user_derived(() => spinner({
      color: color(),
      size: size2(),
      class: clsx_default(theme, $$props.class)
    })),
    "spinnerClass"
  );
  var $$exports = { ...legacy_api() };
  var svg = root72();
  attribute_effect(svg, () => ({
    ...restProps,
    role: "status",
    class: get(spinnerClass),
    viewBox: "0 0 100 101",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }));
  var path = child(svg);
  var path_1 = sibling(path);
  reset(svg);
  template_effect(() => {
    set_attribute(path, "fill", currentColor());
    set_attribute(path_1, "fill", currentFill());
  });
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  Spinner = hmr(Spinner, () => Spinner[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Spinner[HMR].source;
    set(Spinner[HMR].source, module.default[HMR].original);
  });
}
var Spinner_default = Spinner;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/step-indicator/theme.js
var stepIndicator = T({
  slots: {
    base: "space-y-2 dark:text-white",
    label: "text-base font-semibold",
    container: "flex w-full justify-between gap-2",
    wrapper: "relative h-full w-full",
    step: "h-full w-full rounded-xs",
    glow: "absolute -inset-1 rounded-xs opacity-30 blur-sm dark:opacity-25",
    incomplete: "h-full w-full rounded-xs bg-gray-200 dark:bg-gray-700"
  },
  variants: {
    size: {
      xs: { container: "h-1.5" },
      sm: { container: "h-2" },
      md: { container: "h-2.5" },
      lg: { container: "h-3" },
      xl: { container: "h-4" }
    },
    color: {
      primary: {
        step: "data-[state=completed]:bg-primary-500 data-[state=completed]:dark:bg-primary-900 data-[state=current]:bg-primary-800 data-[state=current]:dark:bg-primary-400",
        glow: "bg-primary-800 dark:bg-primary-400"
      },
      secondary: {
        step: "data-[state=completed]:bg-secondary-500 data-[state=completed]:dark:bg-secondary-900 data-[state=current]:bg-secondary-800 data-[state=current]:dark:bg-secondary-400",
        glow: "bg-secondary-800 dark:bg-secondary-400"
      },
      gray: {
        step: "data-[state=completed]:bg-gray-400 data-[state=completed]:dark:bg-gray-500 data-[state=current]:bg-gray-700 data-[state=current]:dark:bg-gray-200",
        glow: "bg-gray-700 dark:bg-gray-200"
      },
      red: {
        step: "data-[state=completed]:bg-red-600 data-[state=completed]:dark:bg-red-900 data-[state=current]:bg-red-900 data-[state=current]:dark:bg-red-500",
        glow: "bg-red-900 dark:bg-red-500"
      },
      yellow: {
        step: "data-[state=completed]:bg-yellow-400 data-[state=completed]:dark:bg-yellow-600 data-[state=current]:bg-yellow-600 data-[state=current]:dark:bg-yellow-400",
        glow: "bg-yellow-600 dark:bg-yellow-400"
      },
      green: {
        step: "data-[state=completed]:bg-green-500 data-[state=completed]:dark:bg-green-900 data-[state=current]:bg-green-800 data-[state=current]:dark:bg-green-400",
        glow: "bg-green-800 dark:bg-green-400"
      },
      indigo: {
        step: "data-[state=completed]:bg-indigo-500 data-[state=completed]:dark:bg-indigo-900 data-[state=current]:bg-indigo-800 data-[state=current]:dark:bg-indigo-400",
        glow: "bg-indigo-800 dark:bg-indigo-400"
      },
      purple: {
        step: "data-[state=completed]:bg-purple-500 data-[state=completed]:dark:bg-purple-900 data-[state=current]:bg-purple-800 data-[state=current]:dark:bg-purple-400",
        glow: "bg-purple-800 dark:bg-purple-400"
      },
      pink: {
        step: "data-[state=completed]:bg-pink-500 data-[state=completed]:dark:bg-pink-900 data-[state=current]:bg-pink-800 data-[state=current]:dark:bg-pink-400",
        glow: "bg-pink-800 dark:bg-pink-400"
      },
      blue: {
        step: "data-[state=completed]:bg-blue-500 data-[state=completed]:dark:bg-blue-900 data-[state=current]:bg-blue-800 data-[state=current]:dark:bg-blue-400",
        glow: "bg-blue-800 dark:bg-blue-400"
      },
      custom: {
        step: "",
        glow: ""
      }
    },
    glow: {
      true: {},
      false: {}
    },
    hideLabel: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    {
      glow: false,
      class: {
        glow: "hidden"
      }
    },
    {
      hideLabel: true,
      class: {
        label: "hidden"
      }
    }
  ],
  defaultVariants: {
    size: "md",
    color: "primary",
    glow: false,
    hideLabel: false
  }
});
var getStepStateClasses = (stepIndex, currentStep) => {
  if (stepIndex === currentStep - 1)
    return "data-[state=current]";
  if (stepIndex < currentStep - 1)
    return "data-[state=completed]";
  return "data-[state=incomplete]";
};

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/step-indicator/StepIndicator.svelte
StepIndicator[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/step-indicator/StepIndicator.svelte";
var root_149 = add_locations(from_html(`<h3> </h3>`), StepIndicator[FILENAME], [[32, 4]]);
var root_417 = add_locations(from_html(`<div></div>`), StepIndicator[FILENAME], [[41, 12]]);
var root_323 = add_locations(from_html(`<div><div data-state="current"></div> <!></div>`), StepIndicator[FILENAME], [[38, 8, [[39, 10]]]]);
var root_68 = add_locations(from_html(`<div data-state="completed"></div>`), StepIndicator[FILENAME], [[45, 8]]);
var root_79 = add_locations(from_html(`<div data-state="incomplete"></div>`), StepIndicator[FILENAME], [[47, 8]]);
var root73 = add_locations(from_html(`<div><!> <div></div></div>`), StepIndicator[FILENAME], [[30, 0, [[35, 2]]]]);
function StepIndicator($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, StepIndicator);
  let steps = prop($$props, "steps", 19, () => ["Step 1", "Step 2", "Step 3", "Step 4", "Step 5"]), currentStep = prop($$props, "currentStep", 3, 1), size2 = prop($$props, "size", 3, "md"), color = prop($$props, "color", 3, "primary"), glow = prop($$props, "glow", 3, false), hideLabel = prop($$props, "hideLabel", 3, false), completedCustom = prop($$props, "completedCustom", 3, ""), currentCustom = prop($$props, "currentCustom", 3, ""), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "steps",
      "currentStep",
      "size",
      "color",
      "glow",
      "hideLabel",
      "completedCustom",
      "currentCustom",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("stepIndicator");
  const {
    base,
    label: label2,
    container,
    wrapper,
    step: stepCls,
    glow: stepGlow,
    incomplete
  } = stepIndicator({
    size: size2(),
    color: color(),
    glow: glow(),
    hideLabel: hideLabel()
  });
  let safeCurrentStep = tag(user_derived(() => Math.max(1, Math.min(currentStep(), steps().length))), "safeCurrentStep");
  let currentStepLabel = tag(user_derived(() => steps()[get(safeCurrentStep) - 1] ?? "Unknown Step"), "currentStepLabel");
  const getCustomStepClass = (stepIndex) => {
    if (strict_equals(color(), "custom", false)) return "";
    if (strict_equals(stepIndex, currentStep() - 1)) {
      return currentCustom();
    } else if (stepIndex < currentStep() - 1) {
      return completedCustom();
    }
    return "";
  };
  var $$exports = { ...legacy_api() };
  var div = root73();
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [() => base({ class: clsx_default(theme?.base, $$props.class) })]);
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var h3 = root_149();
      var text2 = child(h3, true);
      reset(h3);
      template_effect(
        ($0) => {
          set_class(h3, 1, $0);
          set_text(text2, get(currentStepLabel));
        },
        [
          () => clsx2(label2({ class: clsx_default(theme?.label, $$props.classes?.label) }))
        ]
      );
      append($$anchor2, h3);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!hideLabel()) $$render(consequent);
      }),
      "if",
      StepIndicator,
      31,
      2
    );
  }
  var div_1 = sibling(node, 2);
  add_svelte_meta(
    () => each(div_1, 21, steps, index, ($$anchor2, step, i2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent_2 = ($$anchor3) => {
          var div_2 = root_323();
          var div_3 = child(div_2);
          var node_2 = sibling(div_3, 2);
          {
            var consequent_1 = ($$anchor4) => {
              var div_4 = root_417();
              template_effect(($0) => set_class(div_4, 1, $0), [
                () => clsx2(stepGlow({
                  class: clsx_default(getCustomStepClass(i2), theme?.glow, $$props.classes?.glow)
                }))
              ]);
              append($$anchor4, div_4);
            };
            add_svelte_meta(
              () => if_block(node_2, ($$render) => {
                if (glow()) $$render(consequent_1);
              }),
              "if",
              StepIndicator,
              40,
              10
            );
          }
          reset(div_2);
          template_effect(
            ($0, $1) => {
              set_class(div_2, 1, $0);
              set_class(div_3, 1, $1);
            },
            [
              () => clsx2(wrapper({ class: clsx_default(theme?.wrapper, $$props.classes?.wrapper) })),
              () => clsx2(stepCls({
                class: clsx_default(getStepStateClasses(i2, currentStep()), getCustomStepClass(i2), theme?.step, $$props.classes?.step)
              }))
            ]
          );
          append($$anchor3, div_2);
        };
        var alternate_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          {
            var consequent_3 = ($$anchor4) => {
              var div_5 = root_68();
              template_effect(($0) => set_class(div_5, 1, $0), [
                () => clsx2(stepCls({
                  class: clsx_default(getStepStateClasses(i2, currentStep()), getCustomStepClass(i2), theme?.step, $$props.classes?.step)
                }))
              ]);
              append($$anchor4, div_5);
            };
            var alternate = ($$anchor4) => {
              var div_6 = root_79();
              template_effect(($0) => set_class(div_6, 1, $0), [
                () => clsx2(incomplete({ class: clsx_default(theme?.incomplete, $$props.classes?.incomplete) }))
              ]);
              append($$anchor4, div_6);
            };
            add_svelte_meta(
              () => if_block(
                node_3,
                ($$render) => {
                  if (i2 < currentStep() - 1) $$render(consequent_3);
                  else $$render(alternate, false);
                },
                true
              ),
              "if",
              StepIndicator,
              44,
              6
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (strict_equals(i2, currentStep() - 1)) $$render(consequent_2);
            else $$render(alternate_1, false);
          }),
          "if",
          StepIndicator,
          37,
          6
        );
      }
      append($$anchor2, fragment);
    }),
    "each",
    StepIndicator,
    36,
    4
  );
  reset(div_1);
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(container({ class: clsx_default(theme?.container, $$props.classes?.container) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  StepIndicator = hmr(StepIndicator, () => StepIndicator[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = StepIndicator[HMR].source;
    set(StepIndicator[HMR].source, module.default[HMR].original);
  });
}
var StepIndicator_default = StepIndicator;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/theme.js
var stepper = T({
  slots: {
    base: "flex items-center w-full text-sm font-medium text-center text-gray-500 dark:text-gray-400 sm:text-base",
    item: "flex items-center",
    content: "flex items-center"
  },
  variants: {
    status: {
      completed: {
        item: "text-primary-600 dark:text-primary-500 md:w-full sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700",
        content: "after:content-['/'] sm:after:hidden after:mx-2 after:text-gray-200 dark:after:text-gray-500"
      },
      current: {
        item: "md:w-full sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700",
        content: "after:content-['/'] sm:after:hidden after:mx-2 after:text-gray-200 dark:after:text-gray-500"
      },
      pending: {
        item: "md:w-full sm:after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-1 after:hidden sm:after:inline-block after:mx-6 xl:after:mx-10 dark:after:border-gray-700",
        content: "after:content-['/'] sm:after:hidden after:mx-2 after:text-gray-200 dark:after:text-gray-500"
      }
    },
    isLast: {
      true: {
        item: "after:content-none after:hidden",
        content: "after:content-none"
      },
      false: {}
    }
  },
  defaultVariants: {
    status: "pending",
    isLast: false
  }
});
var progressStepper = T({
  slots: {
    base: "flex items-center w-full",
    item: "flex items-center w-full",
    circle: "flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0"
  },
  variants: {
    status: {
      completed: {
        item: "text-primary-600 dark:text-primary-500 after:content-[''] after:w-full after:h-1 after:border-b after:border-primary-100 after:border-4 after:inline-block dark:after:border-primary-800",
        circle: "bg-primary-100 dark:bg-primary-800"
      },
      current: {
        item: "after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-100 after:border-4 after:inline-block dark:after:border-gray-700",
        circle: "bg-gray-100 dark:bg-gray-700"
      },
      pending: {
        item: "after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-100 after:border-4 after:inline-block dark:after:border-gray-700",
        circle: "bg-gray-100 dark:bg-gray-700"
      }
    },
    isLast: {
      true: {
        item: "after:content-none"
      },
      false: {}
    }
  },
  defaultVariants: {
    status: "pending",
    isLast: false
  }
});
var detailedStepper = T({
  slots: {
    base: "items-center w-full space-y-4 sm:flex sm:space-x-8 sm:space-y-0 rtl:space-x-reverse",
    item: "flex items-center space-x-2.5 rtl:space-x-reverse",
    indicator: "flex items-center justify-center w-8 h-8 rounded-full shrink-0"
  },
  variants: {
    status: {
      completed: {
        item: "text-primary-600 dark:text-primary-500",
        indicator: "border border-primary-600 dark:border-primary-500 bg-primary-600 dark:bg-primary-500 text-white"
      },
      current: {
        item: "text-gray-500 dark:text-gray-400",
        indicator: "border border-gray-500 dark:border-gray-400 text-gray-500 dark:text-gray-400"
      },
      pending: {
        item: "text-gray-500 dark:text-gray-400",
        indicator: "border border-gray-500 dark:border-gray-400 text-gray-500 dark:text-gray-400"
      }
    }
  },
  defaultVariants: {
    status: "pending"
  }
});
var verticalStepper = T({
  slots: {
    base: "space-y-4 w-72",
    card: "w-full p-4 border rounded-lg",
    content: "flex items-center justify-between"
  },
  variants: {
    status: {
      completed: {
        card: "text-green-700 border-green-300 bg-green-50 dark:bg-gray-800 dark:border-green-800 dark:text-green-400"
      },
      current: {
        card: "text-primary-700 bg-primary-100 border-primary-300 dark:bg-gray-800 dark:border-primary-800 dark:text-primary-400"
      },
      pending: {
        card: "text-gray-900 bg-gray-100 border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400"
      }
    }
  },
  defaultVariants: {
    status: "pending"
  }
});
var breadcrumbStepper = T({
  slots: {
    base: "flex items-center w-full p-3 space-x-2 text-sm font-medium text-center text-gray-500 bg-white border border-gray-200 rounded-lg shadow-xs dark:text-gray-400 sm:text-base dark:bg-gray-800 dark:border-gray-700 sm:p-4 sm:space-x-4 rtl:space-x-reverse",
    item: "flex items-center",
    indicator: "flex items-center justify-center w-5 h-5 me-2 text-xs rounded-full shrink-0"
  },
  variants: {
    status: {
      completed: {
        item: "text-primary-600 dark:text-primary-500",
        indicator: "border border-primary-600 dark:border-primary-500 bg-primary-600 dark:bg-primary-500 text-white"
      },
      current: {
        item: "text-gray-500 dark:text-gray-400",
        indicator: "border border-gray-500 dark:border-gray-400 text-gray-500 dark:text-gray-400"
      },
      pending: {
        item: "text-gray-500 dark:text-gray-400",
        indicator: "border border-gray-500 dark:border-gray-400 text-gray-500 dark:text-gray-400"
      }
    },
    hasChevron: {
      true: {},
      false: {}
    }
  },
  defaultVariants: {
    status: "pending",
    hasChevron: false
  }
});
var timelineStepper = T({
  slots: {
    base: "relative text-gray-500 border-s border-gray-200 dark:border-gray-700 dark:text-gray-400",
    item: "ms-6",
    circle: "absolute flex items-center justify-center w-8 h-8 rounded-full -start-4 ring-4 ring-white dark:ring-gray-900"
  },
  variants: {
    status: {
      completed: {
        circle: "bg-green-200 dark:bg-green-900"
      },
      current: {
        circle: "bg-gray-100 dark:bg-gray-700"
      },
      pending: {
        circle: "bg-gray-100 dark:bg-gray-700"
      }
    },
    isLast: {
      true: {},
      false: {
        item: "mb-10"
      }
    }
  },
  defaultVariants: {
    status: "pending",
    isLast: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/Stepper.svelte
Stepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/Stepper.svelte";
var root_710 = add_locations(from_svg(`<svg class="me-2.5 h-3.5 w-3.5 sm:h-4 sm:w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 20"><path d="M10 .5a9.5 9.5 0 1 0 9.5 9.5A9.51 9.51 0 0 0 10 .5Zm3.707 8.207-4 4a1 1 0 0 1-1.414 0l-2-2a1 1 0 0 1 1.414-1.414L9 10.586l3.293-3.293a1 1 0 0 1 1.414 1.414Z"></path></svg>`), Stepper[FILENAME], [[40, 14, [[41, 16]]]]);
var root_89 = add_locations(from_html(`<span class="me-2"> </span>`), Stepper[FILENAME], [[45, 12]]);
var root_95 = add_locations(from_html(`<span> </span>`), Stepper[FILENAME], [[49, 12]]);
var root_418 = add_locations(from_html(`<li><span><!> <!></span></li>`), Stepper[FILENAME], [[22, 6, [[29, 8]]]]);
var root74 = add_locations(from_html(`<ol><!></ol>`), Stepper[FILENAME], [[17, 0]]);
function Stepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Stepper);
  let steps = prop($$props, "steps", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("stepper");
  setContext("stepperType", "stepper");
  const $$d = tag(user_derived(stepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), content = tag(user_derived(() => get($$d).content), "content");
  var $$exports = { ...legacy_api() };
  var ol = root74();
  attribute_effect(ol, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Stepper, 19, 4);
      append($$anchor2, fragment);
    };
    var alternate_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step, index2) => {
              var li = root_418();
              var span2 = child(li);
              var node_4 = child(span2);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var fragment_4 = comment();
                      var node_6 = first_child(fragment_4);
                      {
                        let $0 = user_derived(() => clsx_default(get(step).iconClass) || "me-2.5 h-3.5 w-3.5 sm:h-4 sm:w-4");
                        add_svelte_meta(
                          () => component(node_6, () => get(step).icon, ($$anchor7, step_icon) => {
                            step_icon($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          Stepper,
                          38,
                          14,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_4);
                    };
                    var alternate = ($$anchor6) => {
                      var svg = root_710();
                      append($$anchor6, svg);
                    };
                    add_svelte_meta(
                      () => if_block(node_5, ($$render) => {
                        if (get(step).icon) $$render(consequent_1);
                        else $$render(alternate, false);
                      }),
                      "if",
                      Stepper,
                      37,
                      12
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate_1 = ($$anchor5) => {
                  var span_1 = root_89();
                  var text2 = child(span_1, true);
                  reset(span_1);
                  template_effect(() => set_text(text2, get(step).id || index2 + 1));
                  append($$anchor5, span_1);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed")) $$render(consequent_2);
                    else $$render(alternate_1, false);
                  }),
                  "if",
                  Stepper,
                  36,
                  10
                );
              }
              var text_1 = sibling(node_4);
              var node_7 = sibling(text_1);
              {
                var consequent_3 = ($$anchor5) => {
                  var span_2 = root_95();
                  var text_2 = child(span_2, true);
                  reset(span_2);
                  template_effect(
                    ($0) => {
                      set_class(span_2, 1, $0);
                      set_text(text_2, get(step).description);
                    },
                    [
                      () => clsx2(clsx_default(get(step).descriptionClass) || "hidden sm:ms-2 sm:inline-flex")
                    ]
                  );
                  append($$anchor5, span_2);
                };
                add_svelte_meta(
                  () => if_block(node_7, ($$render) => {
                    if (get(step).description) $$render(consequent_3);
                  }),
                  "if",
                  Stepper,
                  48,
                  10
                );
              }
              reset(span2);
              reset(li);
              template_effect(
                ($0, $1) => {
                  set_class(li, 1, $0);
                  set_class(span2, 1, $1);
                  set_text(text_1, ` ${get(step).label ?? ""} `);
                },
                [
                  () => clsx2(get(item)({
                    status: get(step).status,
                    isLast: strict_equals(index2, steps().length - 1),
                    class: clsx_default(theme?.item, $$props.classes?.item)
                  })),
                  () => clsx2(get(content)({
                    status: get(step).status,
                    isLast: strict_equals(index2, steps().length - 1),
                    class: clsx_default(theme?.content, $$props.classes?.content)
                  }))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            Stepper,
            21,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_4);
            },
            true
          ),
          "if",
          Stepper,
          20,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_2, false);
      }),
      "if",
      Stepper,
      18,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  Stepper = hmr(Stepper, () => Stepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Stepper[HMR].source;
    set(Stepper[HMR].source, module.default[HMR].original);
  });
}
var Stepper_default = Stepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/ProgressStepper.svelte
ProgressStepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/ProgressStepper.svelte";
var root_711 = add_locations(from_svg(`<svg class="h-3.5 w-3.5 text-blue-600 lg:h-4 lg:w-4 dark:text-blue-300" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"></path></svg>`), ProgressStepper[FILENAME], [[34, 14, [[35, 16]]]]);
var root_103 = add_locations(from_svg(`<svg class="h-4 w-4 text-gray-500 lg:h-5 lg:w-5 dark:text-gray-100" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 16"><path d="M18 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2ZM6.5 3a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5ZM3.014 13.021l.157-.625A3.427 3.427 0 0 1 6.5 9.571a3.426 3.426 0 0 1 3.322 2.805l.159.622-6.967.023ZM16 12h-3a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2Zm0-3h-3a1 1 0 1 1 0-2h3a1 1 0 1 1 0 2Zm0-3h-3a1 1 0 1 1 0-2h3a1 1 0 1 1 0 2Z"></path></svg>`), ProgressStepper[FILENAME], [[41, 12, [[42, 14]]]]);
var root_419 = add_locations(from_html(`<li><span><!></span></li>`), ProgressStepper[FILENAME], [[22, 6, [[29, 8]]]]);
var root75 = add_locations(from_html(`<ol><!></ol>`), ProgressStepper[FILENAME], [[17, 0]]);
function ProgressStepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ProgressStepper);
  let steps = prop($$props, "steps", 19, () => []), restrorps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "class",
      "classes"
    ],
    "restrorps"
  );
  const theme = getTheme("progressStepper");
  setContext("stepperType", "progress");
  const $$d = tag(user_derived(progressStepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), circle = tag(user_derived(() => get($$d).circle), "circle");
  var $$exports = { ...legacy_api() };
  var ol = root75();
  attribute_effect(ol, ($0) => ({ class: $0, ...restrorps }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", ProgressStepper, 19, 4);
      append($$anchor2, fragment);
    };
    var alternate_3 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step, index2) => {
              var li = root_419();
              var span2 = child(li);
              var node_4 = child(span2);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var fragment_4 = comment();
                      var node_6 = first_child(fragment_4);
                      {
                        let $0 = user_derived(() => clsx_default(get(step).iconClass) || "h-5 w-5 lg:h-6 lg:w-6");
                        add_svelte_meta(
                          () => component(node_6, () => get(step).icon, ($$anchor7, step_icon) => {
                            step_icon($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          ProgressStepper,
                          32,
                          14,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_4);
                    };
                    var alternate = ($$anchor6) => {
                      var svg = root_711();
                      append($$anchor6, svg);
                    };
                    add_svelte_meta(
                      () => if_block(node_5, ($$render) => {
                        if (get(step).icon) $$render(consequent_1);
                        else $$render(alternate, false);
                      }),
                      "if",
                      ProgressStepper,
                      31,
                      12
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_7 = first_child(fragment_5);
                  {
                    var consequent_3 = ($$anchor6) => {
                      var fragment_6 = comment();
                      var node_8 = first_child(fragment_6);
                      {
                        let $0 = user_derived(() => clsx_default(get(step).iconClass) || "h-5 w-5 lg:h-6 lg:w-6");
                        add_svelte_meta(
                          () => component(node_8, () => get(step).icon, ($$anchor7, step_icon_1) => {
                            step_icon_1($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          ProgressStepper,
                          39,
                          12,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_6);
                    };
                    var alternate_1 = ($$anchor6) => {
                      var svg_1 = root_103();
                      append($$anchor6, svg_1);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_7,
                        ($$render) => {
                          if (get(step).icon) $$render(consequent_3);
                          else $$render(alternate_1, false);
                        },
                        true
                      ),
                      "if",
                      ProgressStepper,
                      38,
                      10
                    );
                  }
                  append($$anchor5, fragment_5);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed")) $$render(consequent_2);
                    else $$render(alternate_2, false);
                  }),
                  "if",
                  ProgressStepper,
                  30,
                  10
                );
              }
              reset(span2);
              reset(li);
              template_effect(
                ($0, $1) => {
                  set_class(li, 1, $0);
                  set_class(span2, 1, $1);
                },
                [
                  () => clsx2(get(item)({
                    status: get(step).status,
                    isLast: strict_equals(index2, steps().length - 1),
                    class: clsx_default(theme?.item, $$props.classes?.item)
                  })),
                  () => clsx2(get(circle)({
                    status: get(step).status,
                    class: clsx_default(theme?.circle, $$props.classes?.circle)
                  }))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            ProgressStepper,
            21,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_4);
            },
            true
          ),
          "if",
          ProgressStepper,
          20,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_3, false);
      }),
      "if",
      ProgressStepper,
      18,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  ProgressStepper = hmr(ProgressStepper, () => ProgressStepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ProgressStepper[HMR].source;
    set(ProgressStepper[HMR].source, module.default[HMR].original);
  });
}
var ProgressStepper_default = ProgressStepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/DetailedStepper.svelte
DetailedStepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/DetailedStepper.svelte";
var root_712 = add_locations(from_html(`<p class="text-sm"> </p>`), DetailedStepper[FILENAME], [[33, 12]]);
var root_420 = add_locations(from_html(`<li><span><!></span> <span><h3 class="leading-tight font-medium"> </h3> <!></span></li>`), DetailedStepper[FILENAME], [[22, 6, [[23, 8], [30, 8, [[31, 10]]]]]]);
var root76 = add_locations(from_html(`<ol><!></ol>`), DetailedStepper[FILENAME], [[17, 0]]);
function DetailedStepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DetailedStepper);
  let steps = prop($$props, "steps", 19, () => []), restrorps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "contentClass",
      "class",
      "classes"
    ],
    "restrorps"
  );
  const theme = getTheme("detailedStepper");
  setContext("stepperType", "detailed");
  const $$d = tag(user_derived(detailedStepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), indicator2 = tag(user_derived(() => get($$d).indicator), "indicator");
  var $$exports = { ...legacy_api() };
  var ol = root76();
  attribute_effect(ol, ($0) => ({ class: $0, ...restrorps }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", DetailedStepper, 19, 4);
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step) => {
              var li = root_420();
              var span2 = child(li);
              var node_4 = child(span2);
              {
                var consequent_1 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    let $0 = user_derived(() => clsx_default(get(step).iconClass));
                    add_svelte_meta(
                      () => component(node_5, () => get(step).icon, ($$anchor6, step_icon) => {
                        step_icon($$anchor6, {
                          get class() {
                            return get($0);
                          }
                        });
                      }),
                      "component",
                      DetailedStepper,
                      25,
                      12,
                      { componentTag: "step.icon" }
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate = ($$anchor5) => {
                  var text2 = text();
                  template_effect(() => set_text(text2, get(step).id));
                  append($$anchor5, text2);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed") && get(step).icon) $$render(consequent_1);
                    else $$render(alternate, false);
                  }),
                  "if",
                  DetailedStepper,
                  24,
                  10
                );
              }
              reset(span2);
              var span_1 = sibling(span2, 2);
              var h3 = child(span_1);
              var text_1 = child(h3, true);
              reset(h3);
              var node_6 = sibling(h3, 2);
              {
                var consequent_2 = ($$anchor5) => {
                  var p2 = root_712();
                  var text_2 = child(p2, true);
                  reset(p2);
                  template_effect(() => set_text(text_2, get(step).description));
                  append($$anchor5, p2);
                };
                add_svelte_meta(
                  () => if_block(node_6, ($$render) => {
                    if (get(step).description) $$render(consequent_2);
                  }),
                  "if",
                  DetailedStepper,
                  32,
                  10
                );
              }
              reset(span_1);
              reset(li);
              template_effect(
                ($0, $1, $2) => {
                  set_class(li, 1, $0);
                  set_class(span2, 1, $1);
                  set_class(span_1, 1, $2);
                  set_text(text_1, get(step).label);
                },
                [
                  () => clsx2(get(item)({
                    status: get(step).status,
                    class: clsx_default(theme?.item, $$props.classes?.item)
                  })),
                  () => clsx2(get(indicator2)({
                    status: get(step).status,
                    class: clsx_default(theme?.indicator, $$props.classes?.indicator)
                  })),
                  () => clsx2(clsx_default($$props.contentClass))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            DetailedStepper,
            21,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_3);
            },
            true
          ),
          "if",
          DetailedStepper,
          20,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      DetailedStepper,
      18,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  DetailedStepper = hmr(DetailedStepper, () => DetailedStepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DetailedStepper[HMR].source;
    set(DetailedStepper[HMR].source, module.default[HMR].original);
  });
}
var DetailedStepper_default = DetailedStepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/VerticalStepper.svelte
VerticalStepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/VerticalStepper.svelte";
var root_713 = add_locations(from_svg(`<svg class="h-4 w-4" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"></path></svg>`), VerticalStepper[FILENAME], [[31, 16, [[32, 18]]]]);
var root_1112 = add_locations(from_svg(`<svg class="h-4 w-4 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 14 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5h12m0 0L9 1m4 4L9 9"></path></svg>`), VerticalStepper[FILENAME], [[39, 16, [[40, 18]]]]);
var root_421 = add_locations(from_html(`<li><div role="alert"><div><span class="sr-only"> </span> <h3 class="font-medium"> </h3> <!></div></div></li>`), VerticalStepper[FILENAME], [[22, 6, [[23, 8, [[24, 10, [[25, 12], [26, 12]]]]]]]]);
var root77 = add_locations(from_html(`<ol><!></ol>`), VerticalStepper[FILENAME], [[17, 0]]);
function VerticalStepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, VerticalStepper);
  let steps = prop($$props, "steps", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "liClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("verticalStepper");
  setContext("stepperType", "vertical");
  const $$d = tag(user_derived(verticalStepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), card2 = tag(user_derived(() => get($$d).card), "card"), content = tag(user_derived(() => get($$d).content), "content");
  var $$exports = { ...legacy_api() };
  var ol = root77();
  attribute_effect(ol, ($0) => ({ class: $0, ...restProps }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", VerticalStepper, 19, 4);
      append($$anchor2, fragment);
    };
    var alternate_3 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_5 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step) => {
              var li = root_421();
              var div = child(li);
              var div_1 = child(div);
              var span2 = child(div_1);
              var text2 = child(span2, true);
              reset(span2);
              var h3 = sibling(span2, 2);
              var text_1 = child(h3);
              reset(h3);
              var node_4 = sibling(h3, 2);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var fragment_4 = comment();
                      var node_6 = first_child(fragment_4);
                      {
                        let $0 = user_derived(() => get(step).iconClass || "h-4 w-4");
                        add_svelte_meta(
                          () => component(node_6, () => get(step).icon, ($$anchor7, step_icon) => {
                            step_icon($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          VerticalStepper,
                          29,
                          16,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_4);
                    };
                    var alternate = ($$anchor6) => {
                      var svg = root_713();
                      append($$anchor6, svg);
                    };
                    add_svelte_meta(
                      () => if_block(node_5, ($$render) => {
                        if (get(step).icon) $$render(consequent_1);
                        else $$render(alternate, false);
                      }),
                      "if",
                      VerticalStepper,
                      28,
                      14
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_7 = first_child(fragment_5);
                  {
                    var consequent_4 = ($$anchor6) => {
                      var fragment_6 = comment();
                      var node_8 = first_child(fragment_6);
                      {
                        var consequent_3 = ($$anchor7) => {
                          var fragment_7 = comment();
                          var node_9 = first_child(fragment_7);
                          {
                            let $0 = user_derived(() => get(step).iconClass || "h-4 w-4");
                            add_svelte_meta(
                              () => component(node_9, () => get(step).icon, ($$anchor8, step_icon_1) => {
                                step_icon_1($$anchor8, {
                                  get class() {
                                    return get($0);
                                  }
                                });
                              }),
                              "component",
                              VerticalStepper,
                              37,
                              16,
                              { componentTag: "step.icon" }
                            );
                          }
                          append($$anchor7, fragment_7);
                        };
                        var alternate_1 = ($$anchor7) => {
                          var svg_1 = root_1112();
                          append($$anchor7, svg_1);
                        };
                        add_svelte_meta(
                          () => if_block(node_8, ($$render) => {
                            if (get(step).icon) $$render(consequent_3);
                            else $$render(alternate_1, false);
                          }),
                          "if",
                          VerticalStepper,
                          36,
                          14
                        );
                      }
                      append($$anchor6, fragment_6);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_7,
                        ($$render) => {
                          if (strict_equals(get(step).status, "current")) $$render(consequent_4);
                        },
                        true
                      ),
                      "if",
                      VerticalStepper,
                      35,
                      12
                    );
                  }
                  append($$anchor5, fragment_5);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed")) $$render(consequent_2);
                    else $$render(alternate_2, false);
                  }),
                  "if",
                  VerticalStepper,
                  27,
                  12
                );
              }
              reset(div_1);
              reset(div);
              reset(li);
              template_effect(
                ($0, $1, $2) => {
                  set_class(li, 1, $0);
                  set_class(div, 1, $1);
                  set_class(div_1, 1, $2);
                  set_text(text2, get(step).label);
                  set_text(text_1, `${get(step).id ?? ""}. ${get(step).label ?? ""}`);
                },
                [
                  () => clsx2(clsx_default($$props.liClass)),
                  () => clsx2(get(card2)({
                    status: get(step).status,
                    class: clsx_default(theme?.card, $$props.classes?.card)
                  })),
                  () => clsx2(get(content)({ class: clsx_default(theme?.content, $$props.classes?.content) }))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            VerticalStepper,
            21,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_5);
            },
            true
          ),
          "if",
          VerticalStepper,
          20,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_3, false);
      }),
      "if",
      VerticalStepper,
      18,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  VerticalStepper = hmr(VerticalStepper, () => VerticalStepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = VerticalStepper[HMR].source;
    set(VerticalStepper[HMR].source, module.default[HMR].original);
  });
}
var VerticalStepper_default = VerticalStepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/BreadcrumbStepper.svelte
BreadcrumbStepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/BreadcrumbStepper.svelte";
var root_714 = add_locations(from_html(`<span class="hidden sm:ms-2 sm:inline-flex"> </span>`), BreadcrumbStepper[FILENAME], [[41, 10]]);
var root_810 = add_locations(from_svg(`<svg class="ms-2 h-3 w-3 sm:ms-4 rtl:rotate-180" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 12 10"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m7 9 4-4-4-4M1 9l4-4-4-4"></path></svg>`), BreadcrumbStepper[FILENAME], [[45, 10, [[46, 12]]]]);
var root_422 = add_locations(from_html(`<li><span><!></span> <!> <!></li>`), BreadcrumbStepper[FILENAME], [[23, 6, [[30, 8]]]]);
var root78 = add_locations(from_html(`<ol><!></ol>`), BreadcrumbStepper[FILENAME], [[18, 0]]);
function BreadcrumbStepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, BreadcrumbStepper);
  let steps = prop($$props, "steps", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("breadcrumbStepper");
  setContext("stepperType", "breadcrumb");
  const $$d = tag(user_derived(breadcrumbStepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), indicator2 = tag(user_derived(() => get($$d).indicator), "indicator");
  var $$exports = { ...legacy_api() };
  var ol = root78();
  attribute_effect(
    ol,
    ($0) => ({
      class: $0,
      ...// { class: clsx(theme?.stepper) }
      restProps
    }),
    [
      () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
    ]
  );
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", BreadcrumbStepper, 20, 4);
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_4 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step, index2) => {
              var li = root_422();
              var span2 = child(li);
              var node_4 = child(span2);
              {
                var consequent_1 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    let $0 = user_derived(() => get(step).iconClass || "h-3 w-3");
                    add_svelte_meta(
                      () => component(node_5, () => get(step).icon, ($$anchor6, step_icon) => {
                        step_icon($$anchor6, {
                          get class() {
                            return get($0);
                          }
                        });
                      }),
                      "component",
                      BreadcrumbStepper,
                      32,
                      12,
                      { componentTag: "step.icon" }
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate = ($$anchor5) => {
                  var text2 = text();
                  template_effect(() => set_text(text2, get(step).id));
                  append($$anchor5, text2);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed") && get(step).icon) $$render(consequent_1);
                    else $$render(alternate, false);
                  }),
                  "if",
                  BreadcrumbStepper,
                  31,
                  10
                );
              }
              reset(span2);
              var text_1 = sibling(span2);
              var node_6 = sibling(text_1);
              {
                var consequent_2 = ($$anchor5) => {
                  var span_1 = root_714();
                  var text_2 = child(span_1, true);
                  reset(span_1);
                  template_effect(() => set_text(text_2, get(step).shortLabel));
                  append($$anchor5, span_1);
                };
                add_svelte_meta(
                  () => if_block(node_6, ($$render) => {
                    if (get(step).shortLabel) $$render(consequent_2);
                  }),
                  "if",
                  BreadcrumbStepper,
                  40,
                  8
                );
              }
              var node_7 = sibling(node_6, 2);
              {
                var consequent_3 = ($$anchor5) => {
                  var svg = root_810();
                  append($$anchor5, svg);
                };
                add_svelte_meta(
                  () => if_block(node_7, ($$render) => {
                    if (index2 < steps().length - 1) $$render(consequent_3);
                  }),
                  "if",
                  BreadcrumbStepper,
                  44,
                  8
                );
              }
              reset(li);
              template_effect(
                ($0, $1) => {
                  set_class(li, 1, $0);
                  set_class(span2, 1, $1);
                  set_text(text_1, ` ${get(step).label ?? ""} `);
                },
                [
                  () => clsx2(get(item)({
                    status: get(step).status,
                    hasChevron: index2 < steps().length - 1,
                    class: clsx_default(theme?.item, $$props.classes?.item)
                  })),
                  () => clsx2(get(indicator2)({
                    status: get(step).status,
                    class: clsx_default(theme?.indicator, $$props.classes?.indicator)
                  }))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            BreadcrumbStepper,
            22,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_4);
            },
            true
          ),
          "if",
          BreadcrumbStepper,
          21,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_1, false);
      }),
      "if",
      BreadcrumbStepper,
      19,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  BreadcrumbStepper = hmr(BreadcrumbStepper, () => BreadcrumbStepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = BreadcrumbStepper[HMR].source;
    set(BreadcrumbStepper[HMR].source, module.default[HMR].original);
  });
}
var BreadcrumbStepper_default = BreadcrumbStepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/TimelineStepper.svelte
TimelineStepper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/stepper/TimelineStepper.svelte";
var root_715 = add_locations(from_svg(`<svg class="h-3.5 w-3.5 text-green-500 dark:text-green-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 16 12"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M1 5.917 5.724 10.5 15 1.5"></path></svg>`), TimelineStepper[FILENAME], [[28, 14, [[29, 16]]]]);
var root_104 = add_locations(from_svg(`<svg class="h-3.5 w-3.5 text-gray-500 dark:text-gray-400" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 20 16"><path d="M18 0H2a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h16a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2ZM6.5 3a2.5 2.5 0 1 1 0 5 2.5 2.5 0 0 1 0-5ZM3.014 13.021l.157-.625A3.427 3.427 0 0 1 6.5 9.571a3.426 3.426 0 0 1 3.322 2.805l.159.622-6.967.023ZM16 12h-3a1 1 0 0 1 0-2h3a1 1 0 0 1 0 2Zm0-3h-3a1 1 0 1 1 0-2h3a1 1 0 1 1 0 2Zm0-3h-3a1 1 0 1 1 0-2h3a1 1 0 1 1 0 2Z"></path></svg>`), TimelineStepper[FILENAME], [[35, 12, [[36, 14]]]]);
var root_1113 = add_locations(from_html(`<p class="text-sm"> </p>`), TimelineStepper[FILENAME], [[43, 12]]);
var root_423 = add_locations(from_html(`<li><span><!></span> <div><h3 class="leading-tight font-medium"> </h3> <!></div></li>`), TimelineStepper[FILENAME], [[22, 6, [[23, 8], [40, 8, [[41, 10]]]]]]);
var root79 = add_locations(from_html(`<ol><!></ol>`), TimelineStepper[FILENAME], [[17, 0]]);
function TimelineStepper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TimelineStepper);
  let steps = prop($$props, "steps", 19, () => []), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "steps",
      "class",
      "classes",
      "contentClass"
    ],
    "restProps"
  );
  const theme = getTheme("timelineStepper");
  setContext("stepperType", "timeline");
  const $$d = tag(user_derived(timelineStepper), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), item = tag(user_derived(() => get($$d).item), "item"), circle = tag(user_derived(() => get($$d).circle), "circle");
  var $$exports = { ...legacy_api() };
  var ol = root79();
  attribute_effect(ol, ($0) => ({ class: $0, ...restProps }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node = child(ol);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", TimelineStepper, 19, 4);
      append($$anchor2, fragment);
    };
    var alternate_3 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        var consequent_5 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => each(node_3, 17, steps, index, ($$anchor4, step, index2) => {
              var li = root_423();
              var span2 = child(li);
              var node_4 = child(span2);
              {
                var consequent_2 = ($$anchor5) => {
                  var fragment_3 = comment();
                  var node_5 = first_child(fragment_3);
                  {
                    var consequent_1 = ($$anchor6) => {
                      var fragment_4 = comment();
                      var node_6 = first_child(fragment_4);
                      {
                        let $0 = user_derived(() => clsx_default(get(step).iconClass) || "h-3.5 w-3.5");
                        add_svelte_meta(
                          () => component(node_6, () => get(step).icon, ($$anchor7, step_icon) => {
                            step_icon($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          TimelineStepper,
                          26,
                          14,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_4);
                    };
                    var alternate = ($$anchor6) => {
                      var svg = root_715();
                      append($$anchor6, svg);
                    };
                    add_svelte_meta(
                      () => if_block(node_5, ($$render) => {
                        if (get(step).icon) $$render(consequent_1);
                        else $$render(alternate, false);
                      }),
                      "if",
                      TimelineStepper,
                      25,
                      12
                    );
                  }
                  append($$anchor5, fragment_3);
                };
                var alternate_2 = ($$anchor5) => {
                  var fragment_5 = comment();
                  var node_7 = first_child(fragment_5);
                  {
                    var consequent_3 = ($$anchor6) => {
                      var fragment_6 = comment();
                      var node_8 = first_child(fragment_6);
                      {
                        let $0 = user_derived(() => clsx_default(get(step).iconClass) || "h-3.5 w-3.5");
                        add_svelte_meta(
                          () => component(node_8, () => get(step).icon, ($$anchor7, step_icon_1) => {
                            step_icon_1($$anchor7, {
                              get class() {
                                return get($0);
                              }
                            });
                          }),
                          "component",
                          TimelineStepper,
                          33,
                          12,
                          { componentTag: "step.icon" }
                        );
                      }
                      append($$anchor6, fragment_6);
                    };
                    var alternate_1 = ($$anchor6) => {
                      var svg_1 = root_104();
                      append($$anchor6, svg_1);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_7,
                        ($$render) => {
                          if (get(step).icon) $$render(consequent_3);
                          else $$render(alternate_1, false);
                        },
                        true
                      ),
                      "if",
                      TimelineStepper,
                      32,
                      10
                    );
                  }
                  append($$anchor5, fragment_5);
                };
                add_svelte_meta(
                  () => if_block(node_4, ($$render) => {
                    if (strict_equals(get(step).status, "completed")) $$render(consequent_2);
                    else $$render(alternate_2, false);
                  }),
                  "if",
                  TimelineStepper,
                  24,
                  10
                );
              }
              reset(span2);
              var div = sibling(span2, 2);
              var h3 = child(div);
              var text2 = child(h3, true);
              reset(h3);
              var node_9 = sibling(h3, 2);
              {
                var consequent_4 = ($$anchor5) => {
                  var p2 = root_1113();
                  var text_1 = child(p2, true);
                  reset(p2);
                  template_effect(() => set_text(text_1, get(step).description));
                  append($$anchor5, p2);
                };
                add_svelte_meta(
                  () => if_block(node_9, ($$render) => {
                    if (get(step).description) $$render(consequent_4);
                  }),
                  "if",
                  TimelineStepper,
                  42,
                  10
                );
              }
              reset(div);
              reset(li);
              template_effect(
                ($0, $1, $2) => {
                  set_class(li, 1, $0);
                  set_class(span2, 1, $1);
                  set_class(div, 1, $2);
                  set_text(text2, get(step).label);
                },
                [
                  () => clsx2(get(item)({
                    isLast: strict_equals(index2, steps().length - 1),
                    class: clsx_default(theme?.item, $$props.classes?.item)
                  })),
                  () => clsx2(get(circle)({
                    status: get(step).status,
                    class: clsx_default(theme?.circle, $$props.classes?.circle)
                  })),
                  () => clsx2(clsx_default($$props.contentClass))
                ]
              );
              append($$anchor4, li);
            }),
            "each",
            TimelineStepper,
            21,
            4
          );
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_2,
            ($$render) => {
              if (steps()) $$render(consequent_5);
            },
            true
          ),
          "if",
          TimelineStepper,
          20,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate_3, false);
      }),
      "if",
      TimelineStepper,
      18,
      2
    );
  }
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  TimelineStepper = hmr(TimelineStepper, () => TimelineStepper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TimelineStepper[HMR].source;
    set(TimelineStepper[HMR].source, module.default[HMR].original);
  });
}
var TimelineStepper_default = TimelineStepper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tabs/theme.js
var tabs = T({
  slots: {
    base: "flex space-x-2 rtl:space-x-reverse",
    content: "p-4 bg-gray-50 rounded-lg dark:bg-gray-800 mt-4",
    divider: "h-px bg-gray-200 dark:bg-gray-700",
    active: "p-4 text-primary-600 bg-gray-100 rounded-t-lg dark:bg-gray-800 dark:text-primary-500",
    inactive: "p-4 text-gray-500 rounded-t-lg hover:text-gray-600 hover:bg-gray-50 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-gray-300"
  },
  variants: {
    tabStyle: {
      full: {
        active: "p-4 w-full rounded-none group-first:rounded-s-lg group-last:rounded-e-lg text-gray-900 bg-gray-100 focus:ring-4 focus:ring-primary-300 focus:outline-hidden dark:bg-gray-700 dark:text-white",
        inactive: "p-4 w-full rounded-none group-first:rounded-s-lg group-last:rounded-e-lg text-gray-500 dark:text-gray-400 bg-white hover:text-gray-700 hover:bg-gray-50 focus:ring-4 focus:ring-primary-300 focus:outline-hidden dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
      },
      pill: {
        active: "py-3 px-4 text-white bg-primary-600 rounded-lg",
        inactive: "py-3 px-4 text-gray-500 rounded-lg hover:text-gray-900 hover:bg-gray-100 dark:text-gray-400 dark:hover:bg-gray-800 dark:hover:text-white"
      },
      underline: {
        base: "-mb-px",
        active: "p-4 text-primary-600 border-b-2 border-primary-600 dark:text-primary-500 dark:border-primary-500 bg-transparent",
        inactive: "p-4 border-b-2 border-transparent hover:text-gray-600 hover:border-gray-300 dark:hover:text-gray-300 text-gray-500 dark:text-gray-400 bg-transparent"
      },
      none: {
        active: "",
        inactive: ""
      }
    },
    hasDivider: {
      true: {}
    }
  },
  compoundVariants: [
    {
      tabStyle: ["full", "pill"],
      hasDivider: true,
      class: {
        divider: "hidden"
      }
    }
  ],
  defaultVariants: {
    tabStyle: "none",
    hasDivider: true
  }
});
var tabItem = T({
  slots: {
    base: "group focus-within:z-10",
    button: "inline-block text-sm font-medium text-center disabled:cursor-not-allowed"
  },
  variants: {
    open: {
      true: {
        button: "active"
      }
    },
    disabled: {
      true: {
        button: "cursor-not-allowed"
      }
    }
  },
  compoundVariants: [
    {
      open: true,
      class: {
        button: ""
        // We'll merge this with activeClasses from context
      }
    },
    {
      open: false,
      class: {
        button: ""
        // We'll merge this with inactiveClasses from context
      }
    }
  ],
  defaultVariants: {
    open: false,
    disabled: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tabs/TabItem.svelte
TabItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tabs/TabItem.svelte";
var on_click2 = (_, open) => open(true);
var root80 = add_locations(from_html(`<li><button type="button" role="tab"><!></button></li>`), TabItem[FILENAME], [[41, 0, [[42, 2]]]]);
function TabItem($$anchor, $$props) {
  const tabId = props_id();
  check_target(new.target);
  push($$props, true, TabItem);
  let open = prop($$props, "open", 15, false), title = prop($$props, "title", 3, "Tab title"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "titleSlot",
      "open",
      "title",
      "key",
      "activeClass",
      "inactiveClass",
      "class",
      "classes",
      "disabled",
      "tabStyle"
    ],
    "restProps"
  );
  const theme = getTheme("tabItem");
  const activeClasses = getContext("activeClasses");
  const ctx = getContext("ctx");
  const compoTabStyle = tag(user_derived(() => $$props.tabStyle ?? ctx.tabStyle ?? "full"), "compoTabStyle");
  const $$d = tag(user_derived(() => tabs({ tabStyle: get(compoTabStyle), hasDivider: true })), "[$derived object]"), active = tag(user_derived(() => get($$d).active), "active"), inactive = tag(user_derived(() => get($$d).inactive), "inactive");
  const tabIdentifier = $$props.key ?? tabId;
  const self = { id: tabIdentifier, snippet: $$props.children };
  const registerTab = getContext("registerTab");
  const unregisterTab = getContext("unregisterTab");
  const updateSingleSelection = useSingleSelection((value) => open(strict_equals(value?.id, self.id)));
  user_effect(() => {
    updateSingleSelection(open(), self);
    registerTab?.(self);
    return () => {
      if (self.id) {
        unregisterTab?.(self.id);
      }
    };
  });
  const $$d_1 = tag(user_derived(() => tabItem({ open: open(), disabled: $$props.disabled })), "[$derived object]"), base = tag(user_derived(() => get($$d_1).base), "base"), button2 = tag(user_derived(() => get($$d_1).button), "button");
  var $$exports = { ...legacy_api() };
  var li = root80();
  attribute_effect(li, ($0) => ({ ...restProps, class: $0, role: "presentation" }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var button_1 = child(li);
  button_1.__click = [on_click2, open];
  var node = child(button_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.titleSlot), "render", TabItem, 55, 6);
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var text2 = text();
      template_effect(() => set_text(text2, title()));
      append($$anchor2, text2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.titleSlot) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TabItem,
      54,
      4
    );
  }
  reset(button_1);
  reset(li);
  template_effect(
    ($0) => {
      set_attribute(button_1, "id", self.id);
      set_attribute(button_1, "aria-controls", ctx.panelId);
      set_attribute(button_1, "aria-selected", open());
      button_1.disabled = $$props.disabled;
      set_class(button_1, 1, $0);
    },
    [
      () => clsx2(get(button2)({
        class: clsx_default(
          open() ? $$props.activeClass ?? get(active)({ class: activeClasses }) : $$props.inactiveClass ?? get(inactive)(),
          theme?.button,
          $$props.classes?.button
        )
      }))
    ]
  );
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  TabItem = hmr(TabItem, () => TabItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TabItem[HMR].source;
    set(TabItem[HMR].source, module.default[HMR].original);
  });
}
var TabItem_default = TabItem;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tabs/Tabs.svelte
Tabs[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/tabs/Tabs.svelte";
var root_150 = add_locations(from_html(`<div></div>`), Tabs[FILENAME], [[72, 2]]);
var root81 = add_locations(from_html(`<ul><!></ul> <!> <div role="tabpanel"><!></div>`, 1), Tabs[FILENAME], [[68, 0], [75, 0]]);
function Tabs($$anchor, $$props) {
  const uuid = props_id();
  check_target(new.target);
  push($$props, true, Tabs);
  let selected = prop($$props, "selected", 15), tabStyle = prop($$props, "tabStyle", 3, "none"), divider = prop($$props, "divider", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "selected",
      "tabStyle",
      "ulClass",
      "contentClass",
      "divider",
      "class",
      "classes"
    ],
    "restProps"
  );
  if ($$props.classes?.active) {
    setContext("activeClasses", $$props.classes.active);
  }
  warnThemeDeprecation("Tabs", { ulClass: $$props.ulClass, contentClass: $$props.contentClass }, { ulClass: "class", contentClass: "content" });
  const theme = getTheme("tabs");
  const styling = tag(user_derived(() => $$props.classes ?? { content: $$props.contentClass }), "styling");
  const $$d = tag(user_derived(() => tabs({ tabStyle: tabStyle(), hasDivider: divider() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), content = tag(user_derived(() => get($$d).content), "content"), dividerClass = tag(user_derived(() => get($$d).divider), "dividerClass");
  const panelId = `tab-panel-${uuid}`;
  const ctx = tag_proxy(proxy({ tabStyle: tabStyle(), panelId }), "ctx");
  const dividerBool = tag(user_derived(() => ["full", "pill"].includes(tabStyle()) ? false : divider()), "dividerBool");
  setContext("ctx", ctx);
  createSingleSelectionContext();
  const tabRegistry = tag_proxy(proxy(/* @__PURE__ */ new Map()), "tabRegistry");
  let selectedTab = tag(state(proxy({})), "selectedTab");
  const updateSelection = useSingleSelection((v) => {
    set(selectedTab, v ?? {}, true);
    selected(v?.id);
  });
  user_effect(() => {
    if (selected() && strict_equals(selected(), get(selectedTab).id, false)) {
      const targetTab = tabRegistry.get(selected());
      if (targetTab) {
        updateSelection(true, targetTab);
      }
    }
  });
  user_effect(() => {
    if (tabRegistry.size > 0 && !get(selectedTab).id) {
      const targetTab = selected() ? tabRegistry.get(selected()) : tabRegistry.values().next().value;
      if (targetTab) {
        updateSelection(true, targetTab);
      }
    }
  });
  setContext("registerTab", (tabData) => {
    if (tabData.id) {
      tabRegistry.set(tabData.id, tabData);
    }
  });
  setContext("unregisterTab", (tabId) => {
    tabRegistry.delete(tabId);
  });
  var $$exports = { ...legacy_api() };
  var fragment = root81();
  var ul = first_child(fragment);
  attribute_effect(ul, ($0) => ({ role: "tablist", ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class ?? $$props.ulClass) })
  ]);
  var node = child(ul);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Tabs, 69, 2);
  reset(ul);
  var node_1 = sibling(ul, 2);
  {
    var consequent = ($$anchor2) => {
      var div = root_150();
      template_effect(($0) => set_class(div, 1, $0), [
        () => clsx2(get(dividerClass)({ class: clsx_default(theme?.divider, $$props.classes?.divider) }))
      ]);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (get(dividerBool)) $$render(consequent);
      }),
      "if",
      Tabs,
      71,
      0
    );
  }
  var div_1 = sibling(node_1, 2);
  var node_2 = child(div_1);
  add_svelte_meta(() => snippet(node_2, () => get(selectedTab).snippet ?? noop), "render", Tabs, 76, 2);
  reset(div_1);
  template_effect(
    ($0) => {
      set_attribute(div_1, "id", panelId);
      set_class(div_1, 1, $0);
      set_attribute(div_1, "aria-labelledby", get(selectedTab).id);
    },
    [
      () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tabs = hmr(Tabs, () => Tabs[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tabs[HMR].source;
    set(Tabs[HMR].source, module.default[HMR].original);
  });
}
var Tabs_default = Tabs;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/theme.js
var table = T({
  slots: {
    div: "relative overflow-x-auto",
    table: "w-full text-left text-sm"
  },
  variants: {
    color: {
      // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      default: { table: "text-gray-500 dark:text-gray-400" },
      primary: { table: "text-primary-100 dark:text-primary-100" },
      secondary: { table: "text-secondary-100 dark:text-secondary-100" },
      gray: { table: "text-gray-100 dark:text-gray-100" },
      red: { table: "text-red-100 dark:text-red-100" },
      orange: { table: "text-orange-100 dark:text-orange-100" },
      amber: { table: "text-amber-100 dark:text-amber-100" },
      yellow: { table: "text-yellow-100 dark:text-yellow-100" },
      lime: { table: "text-lime-100 dark:text-lime-100" },
      green: { table: "text-green-100 dark:text-green-100" },
      emerald: { table: "text-emerald-100 dark:text-emerald-100" },
      teal: { table: "text-teal-100 dark:text-teal-100" },
      cyan: { table: "text-cyan-100 dark:text-cyan-100" },
      sky: { table: "text-sky-100 dark:text-sky-100" },
      blue: { table: "text-blue-100 dark:text-blue-100" },
      indigo: { table: "text-indigo-100 dark:text-indigo-100" },
      violet: { table: "text-violet-100 dark:text-violet-100" },
      purple: { table: "text-purple-100 dark:text-purple-100" },
      fuchsia: { table: "text-fuchsia-100 dark:text-fuchsia-100" },
      pink: { table: "text-pink-100 dark:text-pink-100" },
      rose: { table: "text-rose-100 dark:text-rose-100" }
    },
    shadow: {
      true: { div: "shadow-md sm:rounded-lg" }
    }
  }
});
var tableBodyRow = T({
  base: "",
  variants: {
    color: {
      default: "bg-white dark:bg-gray-800 dark:border-gray-700",
      primary: "bg-white bg-primary-500 border-primary-400",
      secondary: "bg-white bg-secondary-500 border-secondary-400",
      gray: "bg-gray-500 border-gray-400",
      red: "bg-red-500 border-red-400",
      orange: "bg-orange-500 border-orange-400",
      amber: "bg-amber-500 border-amber-400",
      yellow: "bg-yellow-500 border-yellow-400",
      lime: "bg-lime-500 border-lime-400",
      green: "bg-white bg-green-500 border-green-400",
      emerald: "bg-emerald-500 border-emerald-400",
      teal: "bg-teal-500 border-teal-400",
      cyan: "bg-cyan-500 border-cyan-400",
      sky: "bg-sky-500 border-sky-400",
      blue: "bg-white bg-blue-500 border-blue-400",
      indigo: "bg-indigo-500 border-indigo-400",
      violet: "bg-violet-500 border-violet-400",
      purple: "bg-purple-500 border-purple-400",
      fuchsia: "bg-fuchsia-500 border-fuchsia-400",
      pink: "bg-pink-500 border-pink-400",
      rose: "bg-rose-500 border-rose-400"
    },
    hoverable: {
      true: ""
    },
    striped: {
      true: ""
    },
    border: {
      true: "border-b last:border-b-0"
    }
  },
  compoundVariants: [
    {
      hoverable: true,
      color: "default",
      class: "hover:bg-gray-50 dark:hover:bg-gray-600"
    },
    {
      hoverable: true,
      color: "primary",
      class: "hover:bg-primary-400 dark:hover:bg-primary-400"
    },
    {
      hoverable: true,
      color: "secondary",
      class: "hover:bg-secondary-400 dark:hover:bg-secondary-400"
    },
    {
      hoverable: true,
      color: "gray",
      class: "hover:bg-gray-400 dark:hover:bg-gray-400"
    },
    {
      hoverable: true,
      color: "red",
      class: "hover:bg-red-400 dark:hover:bg-red-400"
    },
    {
      hoverable: true,
      color: "orange",
      class: "hover:bg-orange-400 dark:hover:bg-orange-400"
    },
    {
      hoverable: true,
      color: "amber",
      class: "hover:bg-amber-400 dark:hover:bg-amber-400"
    },
    {
      hoverable: true,
      color: "yellow",
      class: "hover:bg-yellow-400 dark:hover:bg-yellow-400"
    },
    {
      hoverable: true,
      color: "lime",
      class: "hover:bg-lime-400 dark:hover:bg-lime-400"
    },
    {
      hoverable: true,
      color: "green",
      class: "hover:bg-green-400 dark:hover:bg-green-400"
    },
    {
      hoverable: true,
      color: "emerald",
      class: "hover:bg-emerald-400 dark:hover:bg-emerald-400"
    },
    {
      hoverable: true,
      color: "teal",
      class: "hover:bg-teal-400 dark:hover:bg-teal-400"
    },
    {
      hoverable: true,
      color: "cyan",
      class: "hover:bg-cyan-400 dark:hover:bg-cyan-400"
    },
    {
      hoverable: true,
      color: "sky",
      class: "hover:bg-sky-400 dark:hover:bg-sky-400"
    },
    {
      hoverable: true,
      color: "blue",
      class: "hover:bg-blue-400 dark:hover:bg-blue-400"
    },
    {
      hoverable: true,
      color: "indigo",
      class: "hover:bg-indigo-400 dark:hover:bg-indigo-400"
    },
    {
      hoverable: true,
      color: "violet",
      class: "hover:bg-violet-400 dark:hover:bg-violet-400"
    },
    {
      hoverable: true,
      color: "purple",
      class: "hover:bg-purple-400 dark:hover:bg-purple-400"
    },
    {
      hoverable: true,
      color: "fuchsia",
      class: "hover:bg-fuchsia-400 dark:hover:bg-fuchsia-400"
    },
    {
      hoverable: true,
      color: "pink",
      class: "hover:bg-pink-400 dark:hover:bg-pink-400"
    },
    {
      hoverable: true,
      color: "rose",
      class: "hover:bg-rose-400 dark:hover:bg-rose-400"
    },
    {
      striped: true,
      color: "default",
      class: "odd:bg-white even:bg-gray-50 dark:odd:bg-gray-800 dark:even:bg-gray-700"
    },
    {
      striped: true,
      color: "primary",
      class: "odd:bg-primary-500 even:bg-primary-600 dark:odd:bg-primary-500 dark:even:bg-primary-600"
    },
    {
      striped: true,
      color: "secondary",
      class: "odd:bg-secondary-500 even:bg-secondary-600 dark:odd:bg-secondary-500 dark:even:bg-secondary-600"
    },
    {
      striped: true,
      color: "gray",
      class: "odd:bg-gray-500 even:bg-gray-600 dark:odd:bg-gray-500 dark:even:bg-gray-600"
    },
    // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
    {
      striped: true,
      color: "red",
      class: "odd:bg-red-500 even:bg-red-600 dark:odd:bg-red-500 dark:even:bg-red-600"
    },
    {
      striped: true,
      color: "orange",
      class: "odd:bg-orange-500 even:bg-orange-600 dark:odd:bg-orange-500 dark:even:bg-orange-600"
    },
    {
      striped: true,
      color: "amber",
      class: "odd:bg-amber-500 even:bg-amber-600 dark:odd:bg-amber-500 dark:even:bg-amber-600"
    },
    {
      striped: true,
      color: "yellow",
      class: "odd:bg-yellow-500 even:bg-yellow-600 dark:odd:bg-yellow-500 dark:even:bg-yellow-600"
    },
    {
      striped: true,
      color: "lime",
      class: "odd:bg-lime-500 even:bg-lime-600 dark:odd:bg-lime-500 dark:even:bg-lime-600"
    },
    {
      striped: true,
      color: "green",
      class: "odd:bg-green-500 even:bg-green-600 dark:odd:bg-green-500 dark:even:bg-green-600"
    },
    {
      striped: true,
      color: "emerald",
      class: "odd:bg-emerald-500 even:bg-emerald-600 dark:odd:bg-emerald-500 dark:even:bg-emerald-600"
    },
    {
      striped: true,
      color: "teal",
      class: "odd:bg-teal-500 even:bg-teal-600 dark:odd:bg-teal-500 dark:even:bg-teal-600"
    },
    {
      striped: true,
      color: "cyan",
      class: "odd:bg-cyan-500 even:bg-cyan-600 dark:odd:bg-cyan-500 dark:even:bg-cyan-600"
    },
    {
      striped: true,
      color: "sky",
      class: "odd:bg-sky-500 even:bg-sky-600 dark:odd:bg-sky-500 dark:even:bg-sky-600"
    },
    {
      striped: true,
      color: "blue",
      class: "odd:bg-blue-500 even:bg-blue-600 dark:odd:bg-blue-500 dark:even:bg-blue-600"
    },
    {
      striped: true,
      color: "indigo",
      class: "odd:bg-indigo-500 even:bg-indigo-600 dark:odd:bg-indigo-500 dark:even:bg-indigo-600"
    },
    {
      striped: true,
      color: "violet",
      class: "odd:bg-violet-500 even:bg-violet-600 dark:odd:bg-violet-500 dark:even:bg-violet-600"
    },
    {
      striped: true,
      color: "purple",
      class: "odd:bg-purple-500 even:bg-purple-600 dark:odd:bg-purple-500 dark:even:bg-purple-600"
    },
    {
      striped: true,
      color: "fuchsia",
      class: "odd:bg-fuchsia-500 even:bg-fuchsia-600 dark:odd:bg-fuchsia-500 dark:even:bg-fuchsia-600"
    },
    {
      striped: true,
      color: "pink",
      class: "odd:bg-pink-500 even:bg-pink-600 dark:odd:bg-pink-500 dark:even:bg-pink-600"
    },
    {
      striped: true,
      color: "rose",
      class: "odd:bg-rose-500 even:bg-rose-600 dark:odd:bg-rose-500 dark:even:bg-rose-600"
    }
  ]
});
var tableHead = T({
  base: "text-xs uppercase",
  variants: {
    color: {
      // default, primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      default: "text-gray-700 dark:text-gray-400 bg-gray-50 dark:bg-gray-700",
      primary: "text-white dark:text-white bg-primary-700 dark:bg-primary-700",
      secondary: "text-white dark:text-white bg-secondary-700 dark:bg-secondary-700",
      gray: "text-white dark:text-white bg-gray-700 dark:bg-gray-700",
      red: "text-white dark:text-white bg-red-700 dark:bg-red-700",
      orange: "text-white dark:text-white bg-orange-700 dark:bg-orange-700",
      amber: "text-white dark:text-white bg-amber-700 dark:bg-amber-700",
      yellow: "text-white dark:text-white bg-yellow-700 dark:bg-yellow-700",
      lime: "text-white dark:text-white bg-lime-700 dark:bg-lime-700",
      green: "text-white dark:text-white bg-green-700 dark:bg-green-700",
      emerald: "text-white dark:text-white bg-emerald-700 dark:bg-emerald-700",
      teal: "text-white dark:text-white bg-teal-700 dark:bg-teal-700",
      cyan: "text-white dark:text-white bg-cyan-700 dark:bg-cyan-700",
      sky: "text-white dark:text-white bg-sky-700 dark:bg-sky-700",
      blue: "text-white dark:text-white bg-blue-700 dark:bg-blue-700",
      indigo: "text-white dark:text-white bg-indigo-700 dark:bg-indigo-700",
      violet: "text-white dark:text-white bg-violet-700 dark:bg-violet-700",
      purple: "text-white dark:text-white bg-purple-700 dark:bg-purple-700",
      fuchsia: "text-white dark:text-white bg-fuchsia-700 dark:bg-fuchsia-700",
      pink: "text-white dark:text-white bg-pink-700 dark:bg-pink-700",
      rose: "text-white dark:text-white bg-rose-700 dark:bg-rose-700"
    },
    border: {
      true: "",
      false: ""
    },
    striped: {
      true: "",
      false: ""
    }
  },
  compoundVariants: [
    {
      color: "default",
      border: true,
      class: ""
      //"bg-transparent dark:bg-transparent"
    },
    {
      color: "default",
      striped: true,
      class: ""
      //"bg-transparent dark:bg-transparent border-gray-700"
    },
    {
      striped: true,
      color: "blue",
      class: "border-blue-400"
    },
    {
      striped: true,
      color: "green",
      class: "border-green-400"
    },
    {
      striped: true,
      color: "red",
      class: "border-red-400"
    },
    {
      striped: true,
      color: "yellow",
      class: "border-yellow-400"
    },
    {
      striped: true,
      color: "purple",
      class: "border-purple-400"
    },
    {
      striped: true,
      color: "indigo",
      class: "border-indigo-400"
    },
    {
      striped: true,
      color: "pink",
      class: "border-pink-400"
    }
  ]
});
var tableBodyCell = T({
  base: "px-6 py-4 whitespace-nowrap font-medium"
});
var tableHeadCell = T({
  base: "px-6 py-3"
});
var tableSearch = T({
  slots: {
    root: "relative overflow-x-auto shadow-md sm:rounded-lg",
    inner: "p-4",
    search: "relative mt-1",
    svgDiv: "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none",
    svg: "w-5 h-5",
    input: "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-80 p-2.5 ps-10 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500",
    table: "w-full text-left text-sm"
  },
  variants: {
    color: {
      default: {
        svg: "text-gray-500 dark:text-gray-400",
        table: "text-gray-500 dark:text-gray-400"
      },
      blue: {
        svg: "text-blue-500 dark:text-blue-400",
        table: "text-blue-100 dark:text-blue-100"
      },
      green: {
        svg: "text-green-500 dark:text-green-400",
        table: "text-green-100 dark:text-green-100"
      },
      red: {
        svg: "text-red-500 dark:text-red-400",
        table: "text-red-100 dark:text-red-100"
      },
      yellow: {
        svg: "text-yellow-500 dark:text-yellow-400",
        table: "text-yellow-100 dark:text-yellow-100"
      },
      purple: {
        svg: "text-purple-500 dark:text-purple-400",
        table: "text-purple-100 dark:text-purple-100"
      },
      indigo: {
        svg: "text-indigo-500 dark:text-indigo-400",
        table: "text-indigo-100 dark:text-indigo-100"
      },
      pink: {
        svg: "text-pink-500 dark:text-pink-400",
        table: "text-pink-100 dark:text-pink-100"
      }
    },
    striped: {
      true: {
        table: "[&_tbody_tr:nth-child(odd)]:bg-white [&_tbody_tr:nth-child(odd)]:dark:bg-gray-900 [&_tbody_tr:nth-child(even)]:bg-gray-50 [&_tbody_tr:nth-child(even)]:dark:bg-gray-800"
      },
      false: {}
    },
    hoverable: {
      true: {
        table: "[&_tbody_tr]:hover:bg-gray-50 [&_tbody_tr]:dark:hover:bg-gray-600"
      },
      false: {}
    }
  },
  defaultVariants: {
    color: "default",
    striped: false,
    hoverable: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte
TableHeadCell[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableHeadCell.svelte";
var root82 = add_locations(from_html(`<th><!></th>`), TableHeadCell[FILENAME], [[12, 0]]);
function TableHeadCell($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableHeadCell);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("tableHeadCell");
  var $$exports = { ...legacy_api() };
  var th = root82();
  attribute_effect(th, ($0) => ({ ...restProps, class: $0 }), [() => tableHeadCell({ class: clsx_default(theme, $$props.class) })]);
  var node = child(th);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", TableHeadCell, 14, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      TableHeadCell,
      13,
      2
    );
  }
  reset(th);
  append($$anchor, th);
  return pop($$exports);
}
if (import.meta.hot) {
  TableHeadCell = hmr(TableHeadCell, () => TableHeadCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHeadCell[HMR].source;
    set(TableHeadCell[HMR].source, module.default[HMR].original);
  });
}
var TableHeadCell_default = TableHeadCell;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableHead.svelte
TableHead[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableHead.svelte";
var root_151 = add_locations(from_html(`<!> <tr></tr>`, 1), TableHead[FILENAME], [[34, 4]]);
var root_716 = add_locations(from_html(`<tr><!></tr>`), TableHead[FILENAME], [[43, 6]]);
var root83 = add_locations(from_html(`<thead><!></thead>`), TableHead[FILENAME], [[29, 0]]);
function TableHead($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableHead);
  let defaultRow = prop($$props, "defaultRow", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "headerSlot",
      "color",
      "striped",
      "border",
      "class",
      "headItems",
      "defaultRow"
    ],
    "restProps"
  );
  const theme = getTheme("tableHead");
  const tableCtx = getContext("tableCtx");
  let compoColor = tag(user_derived(() => $$props.color ? $$props.color : tableCtx.color || "default"), "compoColor");
  let compoStriped = tag(user_derived(() => $$props.striped ? $$props.striped : tableCtx.striped || false), "compoStriped");
  let compoBorder = tag(user_derived(() => $$props.border ? $$props.border : tableCtx.border || false), "compoBorder");
  const base = tag(
    user_derived(() => tableHead({
      color: get(compoColor),
      border: get(compoBorder),
      striped: get(compoStriped),
      class: clsx_default(theme, $$props.class)
    })),
    "base"
  );
  function getItemText(item) {
    if (strict_equals(typeof item, "object") && "text" in item) {
      return item.text;
    }
    return String(item);
  }
  var $$exports = { ...legacy_api() };
  var thead = root83();
  attribute_effect(thead, () => ({ ...restProps, class: get(base) }));
  var node = child(thead);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = root_151();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.headerSlot), "render", TableHead, 32, 6);
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.headerSlot) $$render(consequent);
          }),
          "if",
          TableHead,
          31,
          4
        );
      }
      var tr = sibling(node_1, 2);
      add_svelte_meta(
        () => each(tr, 21, () => $$props.headItems, index, ($$anchor3, item) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          add_svelte_meta(
            () => TableHeadCell_default(node_3, {
              children: wrap_snippet(TableHead, ($$anchor4, $$slotProps) => {
                next();
                var text2 = text();
                template_effect(($0) => set_text(text2, $0), [() => getItemText(get(item))]);
                append($$anchor4, text2);
              }),
              $$slots: { default: true }
            }),
            "component",
            TableHead,
            36,
            8,
            { componentTag: "TableHeadCell" }
          );
          append($$anchor3, fragment_2);
        }),
        "each",
        TableHead,
        35,
        6
      );
      reset(tr);
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_4 = comment();
      var node_4 = first_child(fragment_4);
      {
        var consequent_3 = ($$anchor3) => {
          var fragment_5 = comment();
          var node_5 = first_child(fragment_5);
          {
            var consequent_2 = ($$anchor4) => {
              var tr_1 = root_716();
              var node_6 = child(tr_1);
              add_svelte_meta(() => snippet(node_6, () => $$props.children), "render", TableHead, 44, 8);
              reset(tr_1);
              append($$anchor4, tr_1);
            };
            var alternate = ($$anchor4) => {
              var fragment_6 = comment();
              var node_7 = first_child(fragment_6);
              add_svelte_meta(() => snippet(node_7, () => $$props.children), "render", TableHead, 47, 6);
              append($$anchor4, fragment_6);
            };
            add_svelte_meta(
              () => if_block(node_5, ($$render) => {
                if (defaultRow()) $$render(consequent_2);
                else $$render(alternate, false);
              }),
              "if",
              TableHead,
              42,
              4
            );
          }
          append($$anchor3, fragment_5);
        };
        add_svelte_meta(
          () => if_block(
            node_4,
            ($$render) => {
              if ($$props.children) $$render(consequent_3);
            },
            true
          ),
          "if",
          TableHead,
          41,
          2
        );
      }
      append($$anchor2, fragment_4);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.headItems) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      TableHead,
      30,
      2
    );
  }
  reset(thead);
  append($$anchor, thead);
  return pop($$exports);
}
if (import.meta.hot) {
  TableHead = hmr(TableHead, () => TableHead[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableHead[HMR].source;
    set(TableHead[HMR].source, module.default[HMR].original);
  });
}
var TableHead_default = TableHead;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte
TableBodyRow[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBodyRow.svelte";
var root84 = add_locations(from_html(`<tr><!></tr>`), TableBodyRow[FILENAME], [[22, 0]]);
function TableBodyRow($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBodyRow);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "color",
      "striped",
      "hoverable",
      "border"
    ],
    "restProps"
  );
  const theme = getTheme("tableBodyRow");
  const tableCtx = getContext("tableCtx");
  let compoColor = tag(user_derived(() => $$props.color || tableCtx.color || "default"), "compoColor");
  let compoHoverable = tag(user_derived(() => $$props.hoverable || tableCtx.hoverable || false), "compoHoverable");
  let compoStriped = tag(user_derived(() => $$props.striped || tableCtx.striped || false), "compoStriped");
  let compoBorder = tag(user_derived(() => $$props.border || tableCtx.border || false), "compoBorder");
  const base = tag(
    user_derived(() => tableBodyRow({
      color: get(compoColor),
      hoverable: get(compoHoverable),
      striped: get(compoStriped),
      border: get(compoBorder),
      class: clsx_default(theme, $$props.class)
    })),
    "base"
  );
  var $$exports = { ...legacy_api() };
  var tr = root84();
  attribute_effect(tr, () => ({ ...restProps, class: get(base) }));
  var node = child(tr);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", TableBodyRow, 24, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      TableBodyRow,
      23,
      2
    );
  }
  reset(tr);
  append($$anchor, tr);
  return pop($$exports);
}
if (import.meta.hot) {
  TableBodyRow = hmr(TableBodyRow, () => TableBodyRow[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyRow[HMR].source;
    set(TableBodyRow[HMR].source, module.default[HMR].original);
  });
}
var TableBodyRow_default = TableBodyRow;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte
TableBodyCell[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBodyCell.svelte";
var root_152 = add_locations(from_html(`<button><!></button>`), TableBodyCell[FILENAME], [[14, 4]]);
var root85 = add_locations(from_html(`<td><!></td>`), TableBodyCell[FILENAME], [[12, 0]]);
function TableBodyCell($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBodyCell);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "colspan",
      "onclick"
    ],
    "restProps"
  );
  const theme = getTheme("tableBodyCell");
  var $$exports = { ...legacy_api() };
  var td = root85();
  attribute_effect(td, ($0) => ({ ...restProps, class: $0, colspan: $$props.colspan ?? 1 }), [() => tableBodyCell({ class: clsx_default(theme, $$props.class) })]);
  var node = child(td);
  {
    var consequent_1 = ($$anchor2) => {
      var button2 = root_152();
      button2.__click = function(...$$args) {
        apply(() => $$props.onclick, this, $$args, TableBodyCell, [14, 13]);
      };
      var node_1 = child(button2);
      {
        var consequent = ($$anchor3) => {
          var fragment = comment();
          var node_2 = first_child(fragment);
          add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", TableBodyCell, 16, 8);
          append($$anchor3, fragment);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.children) $$render(consequent);
          }),
          "if",
          TableBodyCell,
          15,
          6
        );
      }
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_2 = comment();
          var node_4 = first_child(fragment_2);
          add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", TableBodyCell, 20, 4);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(
            node_3,
            ($$render) => {
              if ($$props.children) $$render(consequent_2);
            },
            true
          ),
          "if",
          TableBodyCell,
          19,
          2
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.onclick) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      TableBodyCell,
      13,
      2
    );
  }
  reset(td);
  append($$anchor, td);
  return pop($$exports);
}
if (import.meta.hot) {
  TableBodyCell = hmr(TableBodyCell, () => TableBodyCell[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBodyCell[HMR].source;
    set(TableBodyCell[HMR].source, module.default[HMR].original);
  });
}
var TableBodyCell_default = TableBodyCell;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBody.svelte
TableBody[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableBody.svelte";
var root86 = add_locations(from_html(`<tbody><!></tbody>`), TableBody[FILENAME], [[18, 0]]);
function TableBody($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableBody);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "bodyItems",
      "class"
    ],
    "restProps"
  );
  function getCellValues(row) {
    if (Array.isArray(row)) {
      return row;
    } else {
      return Object.values(row);
    }
  }
  var $$exports = { ...legacy_api() };
  var tbody = root86();
  attribute_effect(tbody, ($0) => ({ ...restProps, class: $0 }), [() => clsx_default($$props.class)]);
  var node = child(tbody);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(
        () => each(node_1, 17, () => $$props.bodyItems, index, ($$anchor3, row) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(
            () => TableBodyRow_default(node_2, {
              children: wrap_snippet(TableBody, ($$anchor4, $$slotProps) => {
                var fragment_2 = comment();
                var node_3 = first_child(fragment_2);
                add_svelte_meta(
                  () => each(node_3, 17, () => getCellValues(get(row)), index, ($$anchor5, cellValue) => {
                    var fragment_3 = comment();
                    var node_4 = first_child(fragment_3);
                    add_svelte_meta(
                      () => TableBodyCell_default(node_4, {
                        children: wrap_snippet(TableBody, ($$anchor6, $$slotProps2) => {
                          next();
                          var text2 = text();
                          template_effect(() => set_text(text2, get(cellValue) ?? ""));
                          append($$anchor6, text2);
                        }),
                        $$slots: { default: true }
                      }),
                      "component",
                      TableBody,
                      23,
                      10,
                      { componentTag: "TableBodyCell" }
                    );
                    append($$anchor5, fragment_3);
                  }),
                  "each",
                  TableBody,
                  22,
                  8
                );
                append($$anchor4, fragment_2);
              }),
              $$slots: { default: true }
            }),
            "component",
            TableBody,
            21,
            6,
            { componentTag: "TableBodyRow" }
          );
          append($$anchor3, fragment_1);
        }),
        "each",
        TableBody,
        20,
        4
      );
      append($$anchor2, fragment);
    };
    var alternate = ($$anchor2) => {
      var fragment_5 = comment();
      var node_5 = first_child(fragment_5);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_6 = comment();
          var node_6 = first_child(fragment_6);
          add_svelte_meta(() => snippet(node_6, () => $$props.children), "render", TableBody, 28, 4);
          append($$anchor3, fragment_6);
        };
        add_svelte_meta(
          () => if_block(
            node_5,
            ($$render) => {
              if ($$props.children) $$render(consequent_1);
            },
            true
          ),
          "if",
          TableBody,
          27,
          2
        );
      }
      append($$anchor2, fragment_5);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.bodyItems) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      TableBody,
      19,
      2
    );
  }
  reset(tbody);
  append($$anchor, tbody);
  return pop($$exports);
}
if (import.meta.hot) {
  TableBody = hmr(TableBody, () => TableBody[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableBody[HMR].source;
    set(TableBody[HMR].source, module.default[HMR].original);
  });
}
var TableBody_default = TableBody;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/Table.svelte
Table[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/Table.svelte";
var root_229 = add_locations(from_html(`<!> <!>`, 1), Table[FILENAME], []);
var root87 = add_locations(from_html(`<div><table><!><!><!></table></div>`), Table[FILENAME], [[43, 0, [[44, 2]]]]);
function Table($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Table);
  let border = prop($$props, "border", 3, true), color = prop($$props, "color", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "footerSlot",
      "captionSlot",
      "items",
      "divClass",
      "striped",
      "hoverable",
      "border",
      "shadow",
      "color",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation("Table", { divClass: $$props.divClass }, { divClass: "div" });
  const styling = tag(user_derived(() => $$props.classes ?? { div: $$props.divClass }), "styling");
  const theme = getTheme("table");
  const $$d = tag(user_derived(() => table({ color: color(), shadow: $$props.shadow })), "[$derived object]"), div = tag(user_derived(() => get($$d).div), "div"), table2 = tag(user_derived(() => get($$d).table), "table");
  let tableCtx = {
    get striped() {
      return $$props.striped;
    },
    get hoverable() {
      return $$props.hoverable;
    },
    get border() {
      return border();
    },
    get color() {
      return color();
    }
  };
  setContext("tableCtx", tableCtx);
  let headItems = tag(
    user_derived(() => $$props.items && $$props.items.length > 0 ? Object.keys($$props.items[0]).map((key2) => ({ text: key2.charAt(0).toUpperCase() + key2.slice(1) })) : []),
    "headItems"
  );
  let bodyItems = tag(user_derived(() => $$props.items && $$props.items.length > 0 ? $$props.items.map((item) => Object.values(item)) : []), "bodyItems");
  var $$exports = { ...legacy_api() };
  var div_1 = root87();
  var table_1 = child(div_1);
  attribute_effect(table_1, ($0) => ({ ...restProps, class: $0 }), [
    () => get(table2)({ class: clsx_default(theme?.table, $$props.class) })
  ]);
  var node = child(table_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.captionSlot), "render", Table, 46, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.captionSlot) $$render(consequent);
      }),
      "if",
      Table,
      45,
      4
    );
  }
  var node_2 = sibling(node);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = root_229();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(
        () => TableHead_default(node_3, {
          get headItems() {
            return get(headItems);
          }
        }),
        "component",
        Table,
        49,
        6,
        { componentTag: "TableHead" }
      );
      var node_4 = sibling(node_3, 2);
      add_svelte_meta(
        () => TableBody_default(node_4, {
          get bodyItems() {
            return get(bodyItems);
          }
        }),
        "component",
        Table,
        50,
        6,
        { componentTag: "TableBody" }
      );
      append($$anchor2, fragment_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      {
        var consequent_2 = ($$anchor3) => {
          var fragment_3 = comment();
          var node_6 = first_child(fragment_3);
          add_svelte_meta(() => snippet(node_6, () => $$props.children), "render", Table, 52, 6);
          append($$anchor3, fragment_3);
        };
        add_svelte_meta(
          () => if_block(
            node_5,
            ($$render) => {
              if ($$props.children) $$render(consequent_2);
            },
            true
          ),
          "if",
          Table,
          51,
          4
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.items && $$props.items.length > 0) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      Table,
      48,
      4
    );
  }
  var node_7 = sibling(node_2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_4 = comment();
      var node_8 = first_child(fragment_4);
      add_svelte_meta(() => snippet(node_8, () => $$props.footerSlot), "render", Table, 55, 6);
      append($$anchor2, fragment_4);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if ($$props.footerSlot) $$render(consequent_3);
      }),
      "if",
      Table,
      54,
      4
    );
  }
  reset(table_1);
  reset(div_1);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) }))
  ]);
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Table = hmr(Table, () => Table[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Table[HMR].source;
    set(Table[HMR].source, module.default[HMR].original);
  });
}
var Table_default = Table;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableSearch.svelte
TableSearch[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/table/TableSearch.svelte";
var root_153 = add_locations(from_html(`<div><div><label for="table-search" class="sr-only">Search</label> <div><div><svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd"></path></svg></div> <input type="text" id="table-search"/></div> <!></div> <table><!></table> <!></div>`), TableSearch[FILENAME], [
  [
    44,
    0,
    [
      [
        45,
        2,
        [[46, 4], [47, 4, [[48, 6, [[49, 8, [[50, 10]]]]], [53, 6]]]]
      ],
      [59, 2]
    ]
  ]
]);
function TableSearch($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TableSearch);
  let inputValue = prop($$props, "inputValue", 15), striped = prop($$props, "striped", 3, false), hoverable = prop($$props, "hoverable", 3, false), customColor = prop($$props, "customColor", 3, ""), color = prop($$props, "color", 3, "default"), placeholder = prop($$props, "placeholder", 3, "Search"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "header",
      "footer",
      "divClass",
      "inputValue",
      "striped",
      "hoverable",
      "customColor",
      "color",
      "innerDivClass",
      "inputClass",
      "searchClass",
      "svgDivClass",
      "svgClass",
      "tableClass",
      "class",
      "classes",
      "placeholder"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "TableSearch",
    {
      divClass: $$props.divClass,
      innerDivClass: $$props.innerDivClass,
      inputClass: $$props.inputClass,
      searchClass: $$props.searchClass,
      svgDivClass: $$props.svgDivClass,
      svgClass: $$props.svgClass,
      tableClass: $$props.tableClass
    },
    {
      divClass: "root",
      innerDivClass: "inner",
      inputClass: "input",
      searchClass: "search",
      svgDivClass: "svgDiv",
      svgClass: "svg",
      tableClass: "table"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      root: $$props.divClass,
      inner: $$props.innerDivClass,
      input: $$props.inputClass,
      search: $$props.searchClass,
      svgDiv: $$props.svgDivClass,
      svg: $$props.svgClass,
      table: $$props.tableClass
    }),
    "styling"
  );
  const theme = getTheme("tableSearch");
  const themeColor = strict_equals(color(), "custom") ? "default" : color();
  const $$d = tag(
    user_derived(() => tableSearch({
      color: themeColor,
      striped: striped(),
      hoverable: hoverable()
    })),
    "[$derived object]"
  ), root117 = tag(user_derived(() => get($$d).root), "root"), inner = tag(user_derived(() => get($$d).inner), "inner"), search2 = tag(user_derived(() => get($$d).search), "search"), svgDiv = tag(user_derived(() => get($$d).svgDiv), "svgDiv"), svg = tag(user_derived(() => get($$d).svg), "svg"), input2 = tag(user_derived(() => get($$d).input), "input"), table2 = tag(user_derived(() => get($$d).table), "table");
  const tableCls = tag(user_derived(() => get(table2)({ class: clsx_default($$props.tableClass, theme?.table, $$props.class) })), "tableCls");
  const finalTableClass = tag(
    user_derived(() => strict_equals(color(), "custom") && customColor() ? clsx_default(get(tableCls), customColor()) : get(tableCls)),
    "finalTableClass"
  );
  const tableSearchCtx = { striped: striped(), hoverable: hoverable(), color: color() };
  setContext("tableCtx", tableSearchCtx);
  var $$exports = { ...legacy_api() };
  var div = root_153();
  var div_1 = child(div);
  var div_2 = sibling(child(div_1), 2);
  var div_3 = child(div_2);
  var svg_1 = child(div_3);
  reset(div_3);
  var input_1 = sibling(div_3, 2);
  remove_input_defaults(input_1);
  reset(div_2);
  var node = sibling(div_2, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.header), "render", TableSearch, 56, 6);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.header) $$render(consequent);
      }),
      "if",
      TableSearch,
      55,
      4
    );
  }
  reset(div_1);
  var table_1 = sibling(div_1, 2);
  attribute_effect(table_1, () => ({ ...restProps, class: get(finalTableClass) }));
  var node_2 = child(table_1);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", TableSearch, 61, 6);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.children) $$render(consequent_1);
      }),
      "if",
      TableSearch,
      60,
      4
    );
  }
  reset(table_1);
  var node_4 = sibling(table_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_5 = first_child(fragment_2);
      add_svelte_meta(() => snippet(node_5, () => $$props.footer), "render", TableSearch, 65, 4);
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if ($$props.footer) $$render(consequent_2);
      }),
      "if",
      TableSearch,
      64,
      2
    );
  }
  reset(div);
  template_effect(
    ($0, $1, $2, $3, $4, $5) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, $1);
      set_class(div_2, 1, $2);
      set_class(div_3, 1, $3);
      set_class(svg_1, 0, $4);
      set_class(input_1, 1, $5);
      set_attribute(input_1, "placeholder", placeholder());
    },
    [
      () => clsx2(get(root117)({ class: clsx_default(theme?.root, get(styling).root) })),
      () => clsx2(get(inner)({ class: clsx_default(theme?.inner, get(styling).inner) })),
      () => clsx2(get(search2)({ class: clsx_default(theme?.search, get(styling).search) })),
      () => clsx2(get(svgDiv)({ class: clsx_default(theme?.svgDiv, get(styling).svgDiv) })),
      () => clsx2(get(svg)({ class: clsx_default(theme?.svg, get(styling).svg) })),
      () => clsx2(get(input2)({ class: clsx_default(theme?.input, get(styling).input) }))
    ]
  );
  bind_value(input_1, inputValue);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  TableSearch = hmr(TableSearch, () => TableSearch[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TableSearch[HMR].source;
    set(TableSearch[HMR].source, module.default[HMR].original);
  });
}
var TableSearch_default = TableSearch;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/theme.js
var activity = T({
  base: "relative border-s border-gray-200 dark:border-gray-700"
});
var activityItem = T({
  slots: {
    li: "mb-10 ms-6",
    span: "flex absolute -start-3 justify-center items-center w-6 h-6 bg-blue-200 rounded-full ring-8 ring-white dark:ring-gray-900 dark:bg-blue-900",
    img: "rounded-full shadow-lg",
    outer: "p-4 bg-white rounded-lg border border-gray-200 shadow-xs dark:bg-gray-700 dark:border-gray-600",
    inner: "justify-between items-center mb-3 sm:flex",
    time: "mb-1 text-xs font-normal text-gray-400 sm:order-last sm:mb-0",
    title: "text-sm font-normal text-gray-500 lex dark:text-gray-300",
    text: "p-3 text-xs italic font-normal text-gray-500 bg-gray-50 rounded-lg border border-gray-200 dark:bg-gray-600 dark:border-gray-500 dark:text-gray-300"
  }
});
var group = T({
  slots: {
    div: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
    time: "text-lg font-semibold text-gray-900 dark:text-white",
    ol: "mt-3 divide-y divider-gray-200 dark:divide-gray-700"
  }
});
var groupItem = T({
  slots: {
    base: "",
    a: "block items-center p-3 sm:flex hover:bg-gray-100 dark:hover:bg-gray-700",
    img: "me-3 mb-3 w-12 h-12 rounded-full sm:mb-0",
    div: "text-gray-600 dark:text-gray-400",
    title: "text-base font-normal",
    span: "inline-flex items-center text-xs font-normal text-gray-500 dark:text-gray-400",
    svg: "me-1 h-3 w-3"
  }
});
var colorVariants = {
  primary: {
    dot: "bg-primary-200 dark:bg-primary-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-primary-600 dark:text-primary-400",
    connector: "border-primary-200 dark:border-primary-700"
  },
  green: {
    dot: "bg-green-200 dark:bg-green-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-green-600 dark:text-green-400",
    connector: "border-green-200 dark:border-green-700"
  },
  orange: {
    dot: "bg-orange-200 dark:bg-orange-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-orange-600 dark:text-orange-400",
    connector: "border-orange-200 dark:border-orange-700"
  },
  red: {
    dot: "bg-red-200 dark:bg-red-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-red-600 dark:text-red-400",
    connector: "border-red-200 dark:border-red-700"
  },
  blue: {
    dot: "bg-blue-200 dark:bg-blue-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-blue-600 dark:text-blue-400",
    connector: "border-blue-200 dark:border-blue-700"
  },
  purple: {
    dot: "bg-purple-200 dark:bg-purple-900",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-purple-600 dark:text-purple-400",
    connector: "border-purple-200 dark:border-purple-700"
  },
  gray: {
    dot: "bg-gray-200 dark:bg-gray-700",
    ring: "ring-white dark:ring-gray-900",
    icon: "text-gray-600 dark:text-gray-400",
    connector: "border-gray-200 dark:border-gray-700"
  }
};
var timeline = T({
  variants: {
    order: {
      group: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
      horizontal: "sm:flex",
      activity: "relative",
      vertical: "relative",
      default: "relative border-s border-gray-200 dark:border-gray-700"
    }
  },
  defaultVariants: {
    order: "default"
  }
});
var timelineItem = T({
  slots: {
    base: "relative",
    div: "",
    time: "",
    h3: "",
    svg: "w-4 h-4",
    connector: "absolute top-6 left-3 w-px h-full"
  },
  variants: {
    order: {
      default: {
        base: "mb-10 ms-4",
        div: "absolute w-3 h-3 bg-gray-200 rounded-full mt-1.5 -left-1.5 border border-white dark:border-gray-900 dark:bg-gray-700",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      },
      vertical: {
        base: "mb-10 ms-6 relative",
        div: "flex absolute -left-4 top-1.5 justify-center items-center w-6 h-6 rounded-full ring-8",
        time: "mb-1 pl-4 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "flex ml-4 items-center mb-1 text-lg font-semibold text-gray-900 dark:text-white",
        connector: "absolute top-7 -left-1.5 w-px h-full"
      },
      horizontal: {
        base: "relative mb-6 sm:mb-0",
        div: "flex items-center",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      },
      activity: {
        base: "mb-10 ms-6 relative",
        div: "flex absolute -left-4 top-1.5 justify-center items-center w-6 h-6 rounded-full ring-8",
        time: "mb-1 text-sm font-normal leading-none text-gray-400 dark:text-gray-500",
        h3: "text-lg font-semibold text-gray-900 dark:text-white",
        connector: "absolute top-7 -left-4 w-px h-full"
      },
      group: {
        base: "",
        div: "p-5 mb-4 bg-gray-50 rounded-lg border border-gray-100 dark:bg-gray-800 dark:border-gray-700",
        time: "text-lg font-semibold text-gray-900 dark:text-white",
        h3: "text-lg font-semibold text-gray-900 dark:text-white"
      }
    },
    color: {
      primary: {},
      green: {},
      orange: {},
      red: {},
      blue: {},
      purple: {},
      gray: {}
    },
    isLast: {
      true: {},
      false: {}
    }
  },
  compoundVariants: [
    // Vertical color variants
    {
      order: "vertical",
      color: "primary",
      class: {
        div: colorVariants.primary.dot + " " + colorVariants.primary.ring,
        svg: colorVariants.primary.icon,
        connector: "bg-primary-200 dark:bg-primary-700"
      }
    },
    {
      order: "vertical",
      color: "green",
      class: {
        div: colorVariants.green.dot + " " + colorVariants.green.ring,
        svg: colorVariants.green.icon,
        connector: "bg-green-200 dark:bg-green-700"
      }
    },
    {
      order: "vertical",
      color: "orange",
      class: {
        div: colorVariants.orange.dot + " " + colorVariants.orange.ring,
        svg: colorVariants.orange.icon,
        connector: "bg-orange-200 dark:bg-orange-700"
      }
    },
    {
      order: "vertical",
      color: "red",
      class: {
        div: colorVariants.red.dot + " " + colorVariants.red.ring,
        svg: colorVariants.red.icon,
        connector: "bg-red-200 dark:bg-red-700"
      }
    },
    {
      order: "vertical",
      color: "blue",
      class: {
        div: colorVariants.blue.dot + " " + colorVariants.blue.ring,
        svg: colorVariants.blue.icon,
        connector: "bg-blue-200 dark:bg-blue-700"
      }
    },
    {
      order: "vertical",
      color: "purple",
      class: {
        div: colorVariants.purple.dot + " " + colorVariants.purple.ring,
        svg: colorVariants.purple.icon,
        connector: "bg-purple-200 dark:bg-purple-700"
      }
    },
    {
      order: "vertical",
      color: "gray",
      class: {
        div: colorVariants.gray.dot + " " + colorVariants.gray.ring,
        svg: colorVariants.gray.icon,
        connector: "bg-gray-200 dark:bg-gray-700"
      }
    },
    // Horizontal color variants
    {
      order: "horizontal",
      color: "primary",
      class: {
        div: colorVariants.primary.dot + " " + colorVariants.primary.ring,
        svg: colorVariants.primary.icon
      }
    },
    {
      order: "horizontal",
      color: "green",
      class: {
        div: colorVariants.green.dot + " " + colorVariants.green.ring,
        svg: colorVariants.green.icon
      }
    },
    {
      order: "horizontal",
      color: "orange",
      class: {
        div: colorVariants.orange.dot + " " + colorVariants.orange.ring,
        svg: colorVariants.orange.icon
      }
    },
    {
      order: "horizontal",
      color: "red",
      class: {
        div: colorVariants.red.dot + " " + colorVariants.red.ring,
        svg: colorVariants.red.icon
      }
    },
    {
      order: "horizontal",
      color: "blue",
      class: {
        div: colorVariants.blue.dot + " " + colorVariants.blue.ring,
        svg: colorVariants.blue.icon
      }
    },
    {
      order: "horizontal",
      color: "purple",
      class: {
        div: colorVariants.purple.dot + " " + colorVariants.purple.ring,
        svg: colorVariants.purple.icon
      }
    },
    {
      order: "horizontal",
      color: "gray",
      class: {
        div: colorVariants.gray.dot + " " + colorVariants.gray.ring,
        svg: colorVariants.gray.icon
      }
    },
    // Hide connector on last item
    {
      isLast: true,
      class: {
        connector: "hidden"
      }
    }
  ],
  defaultVariants: {
    order: "default",
    color: "primary",
    isLast: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Activity.svelte
Activity[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Activity.svelte";
var root88 = add_locations(from_html(`<ol><!></ol>`), Activity[FILENAME], [[12, 0]]);
function Activity($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Activity);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("activity");
  var $$exports = { ...legacy_api() };
  var ol = root88();
  attribute_effect(ol, ($0) => ({ ...restProps, class: $0 }), [() => activity({ class: clsx_default(theme, $$props.class) })]);
  var node = child(ol);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Activity, 13, 2);
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  Activity = hmr(Activity, () => Activity[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Activity[HMR].source;
    set(Activity[HMR].source, module.default[HMR].original);
  });
}
var Activity_default = Activity;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte
ActivityItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/ActivityItem.svelte";
var root_230 = add_locations(from_html(`<div><!></div>`), ActivityItem[FILENAME], [[53, 8]]);
var root_154 = add_locations(from_html(`<li><span><img/></span> <div><div><time> </time> <div><!></div></div> <!></div></li>`), ActivityItem[FILENAME], [
  [
    41,
    2,
    [[42, 4, [[43, 6]]], [45, 4, [[46, 6, [[47, 8], [48, 8]]]]]]
  ]
]);
function ActivityItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ActivityItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "activities",
      "liClass",
      "spanClass",
      "imgClass",
      "outerDivClass",
      "innerDivClass",
      "timeClass",
      "titleClass",
      "textClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "ActivityItem",
    {
      liClass: $$props.liClass,
      spanClass: $$props.spanClass,
      imgClass: $$props.imgClass,
      outerDivClass: $$props.outerDivClass,
      innerDivClass: $$props.innerDivClass,
      timeClass: $$props.timeClass,
      titleClass: $$props.titleClass,
      textClass: $$props.textClass
    },
    {
      liClass: "class",
      spanClass: "span",
      imgClass: "img",
      outerDivClass: "outer",
      innerDivClass: "inner",
      timeClass: "time",
      titleClass: "title",
      textClass: "text"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      span: $$props.spanClass,
      img: $$props.imgClass,
      outer: $$props.outerDivClass,
      inner: $$props.innerDivClass,
      time: $$props.timeClass,
      title: $$props.titleClass,
      text: $$props.textClass
    }),
    "styling"
  );
  const theme = getTheme("activityItem");
  const $$d = tag(user_derived(activityItem), "[$derived object]"), li = tag(user_derived(() => get($$d).li), "li"), span2 = tag(user_derived(() => get($$d).span), "span"), img2 = tag(user_derived(() => get($$d).img), "img"), outer = tag(user_derived(() => get($$d).outer), "outer"), inner = tag(user_derived(() => get($$d).inner), "inner"), time = tag(user_derived(() => get($$d).time), "time"), title = tag(user_derived(() => get($$d).title), "title"), text2 = tag(user_derived(() => get($$d).text), "text");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 17, () => $$props.activities, index, ($$anchor2, $$item) => {
      let name = () => get($$item).title;
      name();
      let date = () => get($$item).date;
      date();
      let src = () => get($$item).src;
      src();
      let alt = () => get($$item).alt;
      alt();
      let activity2 = () => get($$item).text;
      activity2();
      var li_1 = root_154();
      attribute_effect(li_1, ($0) => ({ ...restProps, class: $0 }), [
        () => get(li)({ class: clsx_default(theme?.li, $$props.class ?? $$props.liClass) })
      ]);
      var span_1 = child(li_1);
      var img_1 = child(span_1);
      reset(span_1);
      var div = sibling(span_1, 2);
      var div_1 = child(div);
      var time_1 = child(div_1);
      var text_1 = child(time_1, true);
      reset(time_1);
      var div_2 = sibling(time_1, 2);
      var node_1 = child(div_2);
      html(node_1, name);
      reset(div_2);
      reset(div_1);
      var node_2 = sibling(div_1, 2);
      {
        var consequent = ($$anchor3) => {
          var div_3 = root_230();
          var node_3 = child(div_3);
          html(node_3, activity2);
          reset(div_3);
          template_effect(($0) => set_class(div_3, 1, $0), [
            () => clsx2(get(text2)({ class: clsx_default(theme?.text, get(styling).text) }))
          ]);
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (activity2()) $$render(consequent);
          }),
          "if",
          ActivityItem,
          52,
          6
        );
      }
      reset(div);
      reset(li_1);
      template_effect(
        ($0, $1, $2, $3, $4, $5) => {
          set_class(span_1, 1, $0);
          set_class(img_1, 1, $1);
          set_attribute(img_1, "src", src());
          set_attribute(img_1, "alt", alt());
          set_class(div, 1, $2);
          set_class(div_1, 1, $3);
          set_class(time_1, 1, $4);
          set_text(text_1, date());
          set_class(div_2, 1, $5);
        },
        [
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) })),
          () => clsx2(get(img2)({ class: clsx_default(theme?.img, get(styling).img) })),
          () => clsx2(get(outer)({ class: clsx_default(theme?.outer, get(styling).outer) })),
          () => clsx2(get(inner)({ class: clsx_default(theme?.inner, get(styling).inner) })),
          () => clsx2(get(time)({ class: clsx_default(theme?.time, get(styling).time) })),
          () => clsx2(get(title)({ class: clsx_default(theme?.title, get(styling).title) }))
        ]
      );
      append($$anchor2, li_1);
    }),
    "each",
    ActivityItem,
    40,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  ActivityItem = hmr(ActivityItem, () => ActivityItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ActivityItem[HMR].source;
    set(ActivityItem[HMR].source, module.default[HMR].original);
  });
}
var ActivityItem_default = ActivityItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Group.svelte
Group[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Group.svelte";
var root89 = add_locations(from_html(`<div><time> </time> <ol><!></ol></div>`), Group[FILENAME], [[28, 0, [[29, 2], [30, 2]]]]);
function Group($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Group);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "timeClass",
      "date",
      "olClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Group",
    {
      divClass: $$props.divClass,
      timeClass: $$props.timeClass,
      olClass: $$props.olClass
    },
    { divClass: "class", timeClass: "time", olClass: "ol" }
  );
  const styling = tag(user_derived(() => ({ time: $$props.timeClass, ol: $$props.olClass })), "styling");
  const theme = getTheme("group");
  const $$d = tag(user_derived(group), "[$derived object]"), div = tag(user_derived(() => get($$d).div), "div"), time = tag(user_derived(() => get($$d).time), "time"), ol = tag(user_derived(() => get($$d).ol), "ol");
  var $$exports = { ...legacy_api() };
  var div_1 = root89();
  var time_1 = child(div_1);
  var text2 = child(time_1, true);
  reset(time_1);
  var ol_1 = sibling(time_1, 2);
  attribute_effect(ol_1, ($0) => ({ ...restProps, class: $0 }), [
    () => get(ol)({ class: clsx_default(theme?.ol, get(styling).ol) })
  ]);
  var node = child(ol_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Group, 31, 4);
  reset(ol_1);
  reset(div_1);
  template_effect(
    ($0, $1) => {
      set_class(div_1, 1, $0);
      set_class(time_1, 1, $1);
      set_text(text2, $$props.date);
    },
    [
      () => clsx2(get(div)({ class: clsx_default(theme?.div, $$props.class ?? $$props.divClass) })),
      () => clsx2(get(time)({ class: clsx_default(theme?.time, get(styling).time) }))
    ]
  );
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Group = hmr(Group, () => Group[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Group[HMR].source;
    set(Group[HMR].source, module.default[HMR].original);
  });
}
var Group_default = Group;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte
GroupItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/GroupItem.svelte";
var root_231 = add_locations(from_html(`<div class="text-sm font-normal"> </div>`), GroupItem[FILENAME], [[43, 10]]);
var root_324 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M3.707 2.293a1 1 0 00-1.414 1.414l14 14a1 1 0 001.414-1.414l-1.473-1.473A10.014 10.014 0 0019.542 10C18.268 5.943 14.478 3 10 3a9.958 9.958 0 00-4.512 1.074l-1.78-1.781zm4.261 4.26l1.514 1.515a2.003 2.003 0 012.45 2.45l1.514 1.514a4 4 0 00-5.478-5.478z" clip-rule="evenodd"></path><path d="M12.454 16.697L9.75 13.992a4 4 0 01-3.742-3.741L2.335 6.578A9.98 9.98 0 00.458 10c1.274 4.057 5.065 7 9.542 7 .847 0 1.669-.105 2.454-.303z"></path></svg> Private`, 1), GroupItem[FILENAME], [[48, 12, [[49, 14], [50, 14]]]]);
var root_424 = add_locations(from_svg(`<svg fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.083 9h1.946c.089-1.546.383-2.97.837-4.118A6.004 6.004 0 004.083 9zM10 2a8 8 0 100 16 8 8 0 000-16zm0 2c-.076 0-.232.032-.465.262-.238.234-.497.623-.737 1.182-.389.907-.673 2.142-.766 3.556h3.936c-.093-1.414-.377-2.649-.766-3.556-.24-.56-.5-.948-.737-1.182C10.232 4.032 10.076 4 10 4zm3.971 5c-.089-1.546-.383-2.97-.837-4.118A6.004 6.004 0 0115.917 9h-1.946zm-2.003 2H8.032c.093 1.414.377 2.649.766 3.556.24.56.5.948.737 1.182.233.23.389.262.465.262.076 0 .232-.032.465-.262.238-.234.498-.623.737-1.182.389-.907.673-2.142.766-3.556zm1.166 4.118c.454-1.147.748-2.572.837-4.118h1.946a6.004 6.004 0 01-2.783 4.118zm-6.268 0C6.412 13.97 6.118 12.546 6.03 11H4.083a6.004 6.004 0 002.783 4.118z" clip-rule="evenodd"></path></svg> Public`, 1), GroupItem[FILENAME], [[54, 12, [[55, 14]]]]);
var root_155 = add_locations(from_html(`<li><a><img/> <div><div><!></div> <!> <span><!></span></div></a></li>`), GroupItem[FILENAME], [[35, 2, [[36, 4, [[37, 6], [38, 6, [[39, 8], [46, 8]]]]]]]]);
function GroupItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, GroupItem);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "timelines",
      "aClass",
      "imgClass",
      "divClass",
      "titleClass",
      "spanClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "GroupItem",
    {
      aClass: $$props.aClass,
      imgClass: $$props.imgClass,
      divClass: $$props.divClass,
      titleClass: $$props.titleClass,
      spanClass: $$props.spanClass
    },
    {
      aClass: "class",
      imgClass: "img",
      divClass: "div",
      titleClass: "title",
      spanClass: "span"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      img: $$props.imgClass,
      div: $$props.divClass,
      title: $$props.titleClass,
      span: $$props.spanClass,
      a: $$props.aClass
    }),
    "styling"
  );
  const theme = getTheme("groupItem");
  const $$d = tag(user_derived(groupItem), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), a2 = tag(user_derived(() => get($$d).a), "a"), img2 = tag(user_derived(() => get($$d).img), "img"), div = tag(user_derived(() => get($$d).div), "div"), title = tag(user_derived(() => get($$d).title), "title"), span2 = tag(user_derived(() => get($$d).span), "span"), svg = tag(user_derived(() => get($$d).svg), "svg");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => each(node, 17, () => $$props.timelines, index, ($$anchor2, $$item) => {
      let name = () => get($$item).name;
      name();
      let src = () => get($$item).src;
      src();
      let alt = () => get($$item).alt;
      alt();
      let isPrivate = () => get($$item).isPrivate;
      isPrivate();
      let href = () => get($$item).href;
      href();
      let comment2 = () => get($$item).comment;
      comment2();
      var li = root_155();
      attribute_effect(li, ($0) => ({ class: $0, ...restProps }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var a_1 = child(li);
      var img_1 = child(a_1);
      var div_1 = sibling(img_1, 2);
      var div_2 = child(div_1);
      var node_1 = child(div_2);
      html(node_1, name);
      reset(div_2);
      var node_2 = sibling(div_2, 2);
      {
        var consequent = ($$anchor3) => {
          var div_3 = root_231();
          var text2 = child(div_3, true);
          reset(div_3);
          template_effect(() => set_text(text2, comment2()));
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if (comment2()) $$render(consequent);
          }),
          "if",
          GroupItem,
          42,
          8
        );
      }
      var span_1 = sibling(node_2, 2);
      var node_3 = child(span_1);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = root_324();
          var svg_1 = first_child(fragment_1);
          next();
          template_effect(($0) => set_class(svg_1, 0, $0), [
            () => clsx2(get(svg)({ class: clsx_default(theme?.svg, $$props.classes?.svg) }))
          ]);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = root_424();
          var svg_2 = first_child(fragment_2);
          next();
          template_effect(($0) => set_class(svg_2, 0, $0), [
            () => clsx2(get(svg)({ class: clsx_default(theme?.svg, $$props.classes?.svg) }))
          ]);
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (isPrivate()) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          GroupItem,
          47,
          10
        );
      }
      reset(span_1);
      reset(div_1);
      reset(a_1);
      reset(li);
      template_effect(
        ($0, $1, $2, $3, $4) => {
          set_attribute(a_1, "href", href());
          set_class(a_1, 1, $0);
          set_class(img_1, 1, $1);
          set_attribute(img_1, "src", src());
          set_attribute(img_1, "alt", alt());
          set_class(div_1, 1, $2);
          set_class(div_2, 1, $3);
          set_class(span_1, 1, $4);
        },
        [
          () => clsx2(get(a2)({ class: clsx_default(theme?.a, get(styling).a) })),
          () => clsx2(get(img2)({ class: clsx_default(theme?.img, get(styling).img) })),
          () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) })),
          () => clsx2(get(title)({ class: clsx_default(theme?.title, get(styling).title) })),
          () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) }))
        ]
      );
      append($$anchor2, li);
    }),
    "each",
    GroupItem,
    34,
    0
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  GroupItem = hmr(GroupItem, () => GroupItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = GroupItem[HMR].source;
    set(GroupItem[HMR].source, module.default[HMR].original);
  });
}
var GroupItem_default = GroupItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Timeline.svelte
Timeline[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/Timeline.svelte";
var root90 = add_locations(from_html(`<ol><!></ol>`), Timeline[FILENAME], [[16, 0]]);
function Timeline($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Timeline);
  let order = prop($$props, "order", 3, "default"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "order",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("timeline");
  setContext("order", order());
  const olCls = tag(user_derived(() => timeline({ order: order(), class: clsx_default(theme, $$props.class) })), "olCls");
  var $$exports = { ...legacy_api() };
  var ol = root90();
  attribute_effect(ol, () => ({ ...restProps, class: get(olCls) }));
  var node = child(ol);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Timeline, 17, 2);
  reset(ol);
  append($$anchor, ol);
  return pop($$exports);
}
if (import.meta.hot) {
  Timeline = hmr(Timeline, () => Timeline[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timeline[HMR].source;
    set(Timeline[HMR].source, module.default[HMR].original);
  });
}
var Timeline_default = Timeline;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte
TimelineItem[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/timeline/TimelineItem.svelte";
var root_156 = add_locations(from_html(`<div aria-hidden="true"></div>`), TimelineItem[FILENAME], [[68, 4]]);
var root_425 = add_locations(from_html(`<div><svg aria-hidden="true" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"></path></svg></div>`), TimelineItem[FILENAME], [[75, 6, [[76, 8, [[77, 10]]]]]]);
var root_69 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[82, 4]]);
var root_717 = add_locations(from_html(`<h3> </h3>`), TimelineItem[FILENAME], [[89, 4]]);
var root_96 = add_locations(from_html(`<time> </time>`), TimelineItem[FILENAME], [[96, 6]]);
var root91 = add_locations(from_html(`<li><!> <!> <!> <!> <!></li>`), TimelineItem[FILENAME], [[65, 0]]);
function TimelineItem($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, TimelineItem);
  let dateFormat = prop($$props, "dateFormat", 3, "month-year"), color = prop($$props, "color", 3, "primary"), isLast = prop($$props, "isLast", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "orientationSlot",
      "title",
      "date",
      "dateFormat",
      "color",
      "isLast",
      "svgClass",
      "liClass",
      "divClass",
      "timeClass",
      "h3Class",
      "connectorClass",
      "datePrefix",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "TimelineItem",
    {
      svgClass: $$props.svgClass,
      liClass: $$props.liClass,
      divClass: $$props.divClass,
      timeClass: $$props.timeClass,
      h3Class: $$props.h3Class,
      connectorClass: $$props.connectorClass
    },
    {
      liClass: "class",
      svgClass: "svg",
      divClass: "div",
      timeClass: "time",
      h3Class: "h3",
      connectorClass: "connector"
    }
  );
  const styling = tag(
    user_derived(() => ({
      svg: $$props.svgClass,
      div: $$props.divClass,
      time: $$props.timeClass,
      h3: $$props.h3Class,
      connector: $$props.connectorClass
    })),
    "styling"
  );
  const theme = getTheme("timelineItem");
  let order = getContext("order");
  const $$d = tag(user_derived(() => timelineItem({ order, color: color(), isLast: isLast() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), div = tag(user_derived(() => get($$d).div), "div"), time = tag(user_derived(() => get($$d).time), "time"), h3 = tag(user_derived(() => get($$d).h3), "h3"), svg = tag(user_derived(() => get($$d).svg), "svg"), connector = tag(user_derived(() => get($$d).connector), "connector");
  function formatDisplayDate(dateStr, format2) {
    const date = new Date(dateStr);
    if (isNaN(date.getTime())) return dateStr;
    switch (format2) {
      case "year":
        return date.toLocaleDateString(void 0, { year: "numeric" });
      case "month-year":
        return date.toLocaleDateString(void 0, { month: "long", year: "numeric" });
      case "full-date":
        return date.toLocaleDateString(void 0, { day: "numeric", month: "long", year: "numeric" });
      default:
        return date.toLocaleDateString(void 0, { month: "long", year: "numeric" });
    }
  }
  var $$exports = { ...legacy_api() };
  var li = root91();
  attribute_effect(li, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class ?? $$props.liClass) })
  ]);
  var node = child(li);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_156();
      template_effect(($0) => set_class(div_1, 1, $0), [
        () => clsx2(get(connector)({ class: clsx_default(theme?.connector, get(styling).connector) }))
      ]);
      append($$anchor2, div_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!isLast() && (strict_equals(order, "vertical") || strict_equals(order, "activity"))) $$render(consequent);
      }),
      "if",
      TimelineItem,
      67,
      2
    );
  }
  var node_1 = sibling(node, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_3 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_3, () => $$props.orientationSlot), "render", TimelineItem, 73, 6);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var div_2 = root_425();
          var svg_1 = child(div_2);
          reset(div_2);
          template_effect(
            ($0, $1) => {
              set_class(div_2, 1, $0);
              set_class(svg_1, 0, $1);
            },
            [
              () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) })),
              () => clsx2(get(svg)({ class: clsx_default(theme?.svg, get(styling).svg) }))
            ]
          );
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_2, ($$render) => {
            if ($$props.orientationSlot && (strict_equals(order, "vertical") || strict_equals(order, "horizontal"))) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          TimelineItem,
          72,
          4
        );
      }
      append($$anchor2, fragment);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_4 = first_child(fragment_2);
      {
        var consequent_3 = ($$anchor3) => {
          var time_1 = root_69();
          var text2 = child(time_1);
          reset(time_1);
          template_effect(
            ($0, $1) => {
              set_attribute(time_1, "datetime", $$props.date);
              set_class(time_1, 1, $0);
              set_text(text2, `${$$props.datePrefix ?? ""}
      ${$1 ?? ""}`);
            },
            [
              () => clsx2(get(time)({ class: clsx_default(theme?.time, get(styling).time) })),
              () => formatDisplayDate($$props.date, dateFormat())
            ]
          );
          append($$anchor3, time_1);
        };
        add_svelte_meta(
          () => if_block(
            node_4,
            ($$render) => {
              if ($$props.date) $$render(consequent_3);
            },
            true
          ),
          "if",
          TimelineItem,
          81,
          2
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (strict_equals(order, "default", false)) $$render(consequent_2);
        else $$render(alternate_1, false);
      }),
      "if",
      TimelineItem,
      71,
      2
    );
  }
  var node_5 = sibling(node_1, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var h3_1 = root_717();
      var text_1 = child(h3_1, true);
      reset(h3_1);
      template_effect(
        ($0) => {
          set_class(h3_1, 1, $0);
          set_text(text_1, $$props.title);
        },
        [
          () => clsx2(get(h3)({ class: clsx_default(theme?.h3, get(styling).h3) }))
        ]
      );
      append($$anchor2, h3_1);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if ($$props.title) $$render(consequent_4);
      }),
      "if",
      TimelineItem,
      88,
      2
    );
  }
  var node_6 = sibling(node_5, 2);
  {
    var consequent_6 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_7 = first_child(fragment_3);
      {
        var consequent_5 = ($$anchor3) => {
          var time_2 = root_96();
          var text_2 = child(time_2);
          reset(time_2);
          template_effect(
            ($0, $1) => {
              set_attribute(time_2, "datetime", $$props.date);
              set_class(time_2, 1, $0);
              set_text(text_2, `${$$props.datePrefix ?? ""}
        ${$1 ?? ""}`);
            },
            [
              () => clsx2(get(time)({ class: clsx_default(theme?.time, get(styling).time) })),
              () => formatDisplayDate($$props.date, dateFormat())
            ]
          );
          append($$anchor3, time_2);
        };
        add_svelte_meta(
          () => if_block(node_7, ($$render) => {
            if ($$props.date) $$render(consequent_5);
          }),
          "if",
          TimelineItem,
          95,
          4
        );
      }
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_6, ($$render) => {
        if (strict_equals(order, "default", false)) $$render(consequent_6);
      }),
      "if",
      TimelineItem,
      94,
      2
    );
  }
  var node_8 = sibling(node_6, 2);
  add_svelte_meta(() => snippet(node_8, () => $$props.children), "render", TimelineItem, 103, 2);
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  TimelineItem = hmr(TimelineItem, () => TimelineItem[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = TimelineItem[HMR].source;
    set(TimelineItem[HMR].source, module.default[HMR].original);
  });
}
var TimelineItem_default = TimelineItem;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toast/theme.js
var toast = T({
  slots: {
    base: "flex w-full max-w-xs p-4 text-gray-500 bg-white rounded-lg shadow-sm dark:text-gray-400 dark:bg-gray-800 gap-3",
    icon: "w-8 h-8 inline-flex items-center justify-center shrink-0 rounded-lg",
    content: "w-full text-sm font-normal",
    close: "ms-auto -mx-1.5 -my-1.5 bg-white text-gray-400 hover:text-gray-900 rounded-lg focus:ring-2 focus:ring-gray-300 p-1.5 hover:bg-gray-100 inline-flex items-center justify-center h-8 w-8 dark:text-gray-500 dark:hover:text-white dark:bg-gray-800 dark:hover:bg-gray-700"
  },
  variants: {
    position: {
      "top-left": { base: "absolute top-5 start-5" },
      "top-right": { base: "absolute top-5 end-5" },
      "bottom-left": { base: "absolute bottom-5 start-5" },
      "bottom-right": { base: "absolute bottom-5 end-5" }
    },
    color: {
      // primary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        icon: "text-primary-500 bg-primary-100 dark:bg-primary-800 dark:text-primary-200",
        close: "text-primary-500 dark:text-primary-200 hover:text-primary-600 dark:hover:text-primary-500"
      },
      gray: {
        icon: "text-gray-500 bg-gray-100 dark:bg-gray-700 dark:text-gray-200",
        close: "text-gray-500 dark:text-gray-200 hover:text-gray-600 dark:hover:text-gray-500"
      },
      red: {
        icon: "text-red-500 bg-red-100 dark:bg-red-800 dark:text-red-200",
        close: "text-red-500 dark:text-red-200 hover:text-red-600 dark:hover:text-red-500"
      },
      orange: {
        icon: "text-orange-500 bg-orange-100 dark:bg-orange-700 dark:text-orange-200",
        close: "text-orange-500 dark:text-orange-200 hover:text-orange-600 dark:hover:text-orange-500"
      },
      amber: {
        icon: "text-amber-500 bg-amber-100 dark:bg-amber-700 dark:text-amber-200",
        close: "text-amber-500 dark:text-amber-200 hover:text-amber-600 dark:hover:text-amber-500"
      },
      yellow: {
        icon: "text-yellow-500 bg-yellow-100 dark:bg-yellow-800 dark:text-yellow-200",
        close: "text-yellow-500 dark:text-yellow-200 hover:text-yellow-600 dark:hover:text-yellow-500"
      },
      lime: {
        icon: "text-lime-500 bg-lime-100 dark:bg-lime-700 dark:text-lime-200",
        close: "text-lime-500 dark:text-lime-200 hover:text-lime-600 dark:hover:text-lime-500"
      },
      green: {
        icon: "text-green-500 bg-green-100 dark:bg-green-800 dark:text-green-200",
        close: "text-green-500 dark:text-green-200 hover:text-green-600 dark:hover:text-green-500"
      },
      emerald: {
        icon: "text-emerald-500 bg-emerald-100 dark:bg-emerald-800 dark:text-emerald-200",
        close: "text-emerald-500 dark:text-emerald-200 hover:text-emerald-600 dark:hover:text-emerald-500"
      },
      teal: {
        icon: "text-teal-500 bg-teal-100 dark:bg-teal-800 dark:text-teal-200",
        close: "text-teal-500 dark:text-teal-200 hover:text-teal-600 dark:hover:text-teal-500"
      },
      cyan: {
        icon: "text-cyan-500 bg-cyan-100 dark:bg-cyan-800 dark:text-cyan-200",
        close: "text-cyan-500 dark:text-cyan-200 hover:text-cyan-600 dark:hover:text-cyan-500"
      },
      sky: {
        icon: "text-sky-500 bg-sky-100 dark:bg-sky-800 dark:text-sky-200",
        close: "text-sky-500 dark:text-sky-200 hover:text-sky-600 dark:hover:text-sky-500"
      },
      blue: {
        icon: "text-blue-500 bg-blue-100 dark:bg-blue-800 dark:text-blue-200",
        close: "text-blue-500 dark:text-blue-200 hover:text-blue-600 dark:hover:text-blue-500"
      },
      indigo: {
        icon: "text-indigo-500 bg-indigo-100 dark:bg-indigo-800 dark:text-indigo-200",
        close: "text-indigo-500 dark:text-indigo-200 hover:text-indigo-600 dark:hover:text-indigo-500"
      },
      violet: {
        icon: "text-violet-500 bg-violet-100 dark:bg-violet-800 dark:text-violet-200",
        close: "text-violet-500 dark:text-violet-200 hover:text-violet-600 dark:hover:text-violet-500"
      },
      purple: {
        icon: "text-purple-500 bg-purple-100 dark:bg-purple-800 dark:text-purple-200",
        close: "text-purple-500 dark:text-purple-200 hover:text-purple-600 dark:hover:text-purple-500"
      },
      fuchsia: {
        icon: "text-fuchsia-500 bg-fuchsia-100 dark:bg-fuchsia-800 dark:text-fuchsia-200",
        close: "text-fuchsia-500 dark:text-fuchsia-200 hover:text-fuchsia-600 dark:hover:text-fuchsia-500"
      },
      pink: {
        icon: "text-pink-500 bg-pink-100 dark:bg-pink-700 dark:text-pink-200",
        close: "text-pink-500 dark:text-pink-200 hover:text-pink-600 dark:hover:text-pink-500"
      },
      rose: {
        icon: "text-rose-500 bg-rose-100 dark:bg-rose-700 dark:text-rose-200",
        close: "text-rose-500 dark:text-rose-200 hover:text-rose-600 dark:hover:text-rose-500"
      }
    },
    align: {
      true: { base: "items-center" },
      false: { base: "items-start" }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toast/Toast.svelte
Toast[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toast/Toast.svelte";
var root_232 = add_locations(from_html(`<div><!></div>`), Toast[FILENAME], [[45, 6]]);
var root_157 = add_locations(from_html(`<div><!> <div><!></div> <!></div>`), Toast[FILENAME], [[43, 2, [[50, 4]]]]);
function Toast($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toast);
  let toastStatus = prop($$props, "toastStatus", 15, true), dismissable = prop($$props, "dismissable", 3, true), color = prop($$props, "color", 3, "primary"), align = prop($$props, "align", 3, true), transition2 = prop($$props, "transition", 3, fly), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "toastStatus",
      "dismissable",
      "color",
      "position",
      "iconClass",
      "contentClass",
      "align",
      "params",
      "transition",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Toast",
    {
      iconClass: $$props.iconClass,
      contentClass: $$props.contentClass
    },
    { iconClass: "icon", contentClass: "content" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { icon: $$props.iconClass, content: $$props.contentClass }), "styling");
  const theme = getTheme("toast");
  const $$d = tag(user_derived(() => toast({ color: color(), position: $$props.position, align: align() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), iconVariants = tag(user_derived(() => get($$d).icon), "iconVariants"), content = tag(user_derived(() => get($$d).content), "content"), close = tag(user_derived(() => get($$d).close), "close");
  let ref = tag(state(void 0), "ref");
  function _close(event2) {
    if (get(ref)?.dispatchEvent(new Event("close", { bubbles: true, cancelable: true }))) {
      toastStatus(false);
    }
  }
  createDismissableContext(_close);
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_157();
      attribute_effect(div, ($0) => ({ role: "alert", ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      var node_1 = child(div);
      {
        var consequent = ($$anchor3) => {
          var div_1 = root_232();
          var node_2 = child(div_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.icon), "render", Toast, 46, 8);
          reset(div_1);
          template_effect(($0) => set_class(div_1, 1, $0), [
            () => clsx2(get(iconVariants)({ class: clsx_default(theme?.icon, get(styling).icon) }))
          ]);
          append($$anchor3, div_1);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.icon) $$render(consequent);
          }),
          "if",
          Toast,
          44,
          4
        );
      }
      var div_2 = sibling(node_1, 2);
      var node_3 = child(div_2);
      add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", Toast, 51, 6);
      reset(div_2);
      var node_4 = sibling(div_2, 2);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_1 = comment();
          var node_5 = first_child(fragment_1);
          {
            let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, $$props.classes?.close) }));
            add_svelte_meta(
              () => CloseButton_default(node_5, {
                get class() {
                  return get($0);
                },
                ariaLabel: "Remove toast",
                get color() {
                  return color();
                }
              }),
              "component",
              Toast,
              55,
              6,
              { componentTag: "CloseButton" }
            );
          }
          append($$anchor3, fragment_1);
        };
        add_svelte_meta(
          () => if_block(node_4, ($$render) => {
            if (dismissable()) $$render(consequent_1);
          }),
          "if",
          Toast,
          54,
          4
        );
      }
      reset(div);
      bind_this(div, ($$value) => set(ref, $$value), () => get(ref));
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
      ]);
      transition(3, div, transition2, () => $$props.params);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (toastStatus()) $$render(consequent_2);
      }),
      "if",
      Toast,
      42,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Toast = hmr(Toast, () => Toast[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toast[HMR].source;
    set(Toast[HMR].source, module.default[HMR].original);
  });
}
var Toast_default = Toast;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte
Toolbar[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/Toolbar.svelte";
var root92 = add_locations(from_html(`<div><div><!></div> <!></div>`), Toolbar[FILENAME], [[30, 0, [[31, 2]]]]);
function Toolbar($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toolbar);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "end",
      "color",
      "embedded",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("toolbar");
  const context = tag_proxy(proxy({ separators: false }), "context");
  setContext("toolbar", context);
  let frameColor = tag(user_derived(() => $$props.embedded ? "default" : $$props.color), "frameColor");
  let $$d = tag(
    user_derived(() => toolbar({
      color: get(frameColor),
      embedded: $$props.embedded,
      separators: context.separators
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), content = tag(user_derived(() => get($$d).content), "content");
  var $$exports = { ...legacy_api() };
  var div = root92();
  attribute_effect(
    div,
    ($0) => ({
      ...// let separatorsClass: string = twMerge($separators && 'sm:divide-x rtl:divide-x-reverse');
      // let divClass: string = twMerge('flex justify-between items-center', !embedded && 'py-2 px-3', className);
      restProps,
      class: $0
    }),
    [
      () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
    ]
  );
  var div_1 = child(div);
  var node = child(div_1);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", Toolbar, 32, 4);
  reset(div_1);
  var node_1 = sibling(div_1, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      add_svelte_meta(() => snippet(node_2, () => $$props.end), "render", Toolbar, 35, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($$props.end) $$render(consequent);
      }),
      "if",
      Toolbar,
      34,
      2
    );
  }
  reset(div);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(get(content)({ class: clsx_default(theme?.content, $$props.classes?.content) }))
  ]);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Toolbar = hmr(Toolbar, () => Toolbar[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toolbar[HMR].source;
    set(Toolbar[HMR].source, module.default[HMR].original);
  });
}
var Toolbar_default = Toolbar;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte
ToolbarGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/toolbar/ToolbarGroup.svelte";
var root93 = add_locations(from_html(`<div><!></div>`), ToolbarGroup[FILENAME], [[19, 0]]);
function ToolbarGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ToolbarGroup);
  let position = prop($$props, "position", 3, "middle"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "spacing",
      "padding",
      "position",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("toolbarGroup");
  const groupCls = tag(
    user_derived(() => toolbarGroup({
      spacing: $$props.spacing,
      padding: $$props.padding,
      position: position(),
      class: clsx_default(theme, $$props.class)
    })),
    "groupCls"
  );
  const context = getContext("toolbar");
  if (context) context.separators = true;
  var $$exports = { ...legacy_api() };
  var div = root93();
  attribute_effect(div, () => ({ ...restProps, class: get(groupCls) }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", ToolbarGroup, 20, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ToolbarGroup = hmr(ToolbarGroup, () => ToolbarGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ToolbarGroup[HMR].source;
    set(ToolbarGroup[HMR].source, module.default[HMR].original);
  });
}
var ToolbarGroup_default = ToolbarGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/video/Video.svelte
Video[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/video/Video.svelte";
var root94 = add_locations(from_html(`<video><source/> <!> <track kind="captions"/> Your browser does not support the video tag.</video>`, 2), Video[FILENAME], [[11, 0, [[12, 2], [16, 2]]]]);
function Video($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Video);
  let type = prop($$props, "type", 3, "video/mp4"), srclang = prop($$props, "srclang", 3, "en"), label2 = prop($$props, "label", 3, "english_captions"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "type",
      "trackSrc",
      "src",
      "srclang",
      "label",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("span");
  var $$exports = { ...legacy_api() };
  var video = root94();
  attribute_effect(video, ($0) => ({ ...restProps, class: $0 }), [() => clsx_default(theme, $$props.class)]);
  var source = child(video);
  var node = sibling(source, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Video, 14, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Video,
      13,
      2
    );
  }
  var track = sibling(node, 2);
  next();
  reset(video);
  template_effect(() => {
    set_attribute(source, "src", $$props.src);
    set_attribute(source, "type", type());
    set_attribute(track, "src", $$props.trackSrc);
    set_attribute(track, "srclang", srclang());
    set_attribute(track, "label", label2());
  });
  append($$anchor, video);
  return pop($$exports);
}
if (import.meta.hot) {
  Video = hmr(Video, () => Video[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Video[HMR].source;
    set(Video[HMR].source, module.default[HMR].original);
  });
}
var Video_default = Video;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/theme.js
var buttonToggleGroup = T({
  base: "inline-flex border border-gray-300 overflow-hidden",
  variants: {
    roundedSize: {
      sm: "rounded-sm",
      md: "rounded-md",
      lg: "rounded-lg",
      xl: "rounded-xl",
      full: "rounded-full"
    }
  }
});
var buttonToggle = T({
  slots: {
    button: "relative flex items-center transition-all duration-200 focus:outline-none border-r last:border-r-0 dark:bg-white dark:text-gray-800 disabled:cursor-not-allowed disabled:opacity-50",
    content: "flex items-center w-full overflow-hidden relative",
    text: "transition-all duration-200 ml-0",
    icon: "absolute left-0 flex-shrink-0 text-green-600"
  },
  variants: {
    selected: {
      true: {
        text: "ml-5"
      },
      false: {}
    },
    size: {
      sm: {
        button: "p-1 px-2 text-sm"
      },
      md: {
        button: "p-2 px-4 text-base"
      },
      lg: {
        button: "p-3 px-5 text-lg"
      },
      xl: {
        button: "p-4 px-6 text-xl"
      }
    },
    roundedSize: {
      sm: {
        button: "first:rounded-s-sm last:rounded-e-sm"
      },
      md: {
        button: "first:rounded-s-md last:rounded-e-md"
      },
      lg: {
        button: "first:rounded-s-lg last:rounded-e-lg"
      },
      xl: {
        button: "first:rounded-s-xl last:rounded-e-xl"
      },
      full: {
        button: "first:rounded-s-full last:rounded-e-full"
      }
    },
    color: {
      primary: {
        button: "data-[selected=true]:bg-primary-200 data-[selected=false]:hover:bg-gray-100"
      },
      secondary: {
        button: "data-[selected=true]:bg-secondary-200 data-[selected=false]:hover:bg-gray-100"
      },
      gray: {
        button: "data-[selected=true]:bg-gray-200 data-[selected=false]:hover:bg-gray-100"
      },
      red: {
        button: "data-[selected=true]:bg-red-200 data-[selected=false]:hover:bg-red-50"
      },
      orange: {
        button: "data-[selected=true]:bg-orange-200 data-[selected=false]:hover:bg-orange-50"
      },
      amber: {
        button: "data-[selected=true]:bg-amber-200 data-[selected=false]:hover:bg-amber-50"
      },
      yellow: {
        button: "data-[selected=true]:bg-yellow-200 data-[selected=false]:hover:bg-yellow-50"
      },
      lime: {
        button: "data-[selected=true]:bg-lime-200 data-[selected=false]:hover:bg-lime-50"
      },
      green: {
        button: "data-[selected=true]:bg-green-200 data-[selected=false]:hover:bg-green-50"
      },
      emerald: {
        button: "data-[selected=true]:bg-emerald-200 data-[selected=false]:hover:bg-emerald-50"
      },
      teal: {
        button: "data-[selected=true]:bg-teal-200 data-[selected=false]:hover:bg-teal-50"
      },
      cyan: {
        button: "data-[selected=true]:bg-cyan-200 data-[selected=false]:hover:bg-cyan-50"
      },
      sky: {
        button: "data-[selected=true]:bg-sky-200 data-[selected=false]:hover:bg-sky-50"
      },
      blue: {
        button: "data-[selected=true]:bg-blue-200 data-[selected=false]:hover:bg-blue-50"
      },
      indigo: {
        button: "data-[selected=true]:bg-indigo-200 data-[selected=false]:hover:bg-indigo-50"
      },
      violet: {
        button: "data-[selected=true]:bg-violet-200 data-[selected=false]:hover:bg-violet-50"
      },
      purple: {
        button: "data-[selected=true]:bg-purple-200 data-[selected=false]:hover:bg-purple-50"
      },
      fuchsia: {
        button: "data-[selected=true]:bg-fuchsia-200 data-[selected=false]:hover:bg-fuchsia-50"
      },
      pink: {
        button: "data-[selected=true]:bg-pink-200 data-[selected=false]:hover:bg-pink-50"
      },
      rose: {
        button: "data-[selected=true]:bg-rose-200 data-[selected=false]:hover:bg-rose-50"
      },
      none: {}
    }
  },
  defaultVariants: {
    selected: false,
    color: "primary",
    size: "md",
    roundedSize: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggleGroup.svelte
ButtonToggleGroup[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggleGroup.svelte";
var root95 = add_locations(from_html(`<div class="inline"><div><!></div></div>`), ButtonToggleGroup[FILENAME], [[68, 0, [[69, 2]]]]);
function ButtonToggleGroup($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonToggleGroup);
  let multiSelect2 = prop($$props, "multiSelect", 3, false), name = prop($$props, "name", 3, "toggle-group"), value = prop($$props, "value", 23, () => multiSelect2() ? [] : null), size2 = prop($$props, "size", 3, "md"), roundedSize = prop($$props, "roundedSize", 3, "md"), onSelect = prop($$props, "onSelect", 3, (val) => {
  }), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "multiSelect",
      "name",
      "value",
      "color",
      "size",
      "roundedSize",
      "onSelect",
      "children",
      "ctxIconClass",
      "ctxBtnClass",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("buttonToggleGroup");
  const base = tag(
    user_derived(() => buttonToggleGroup({
      roundedSize: roundedSize(),
      class: clsx_default(theme, $$props.class)
    })),
    "base"
  );
  let selectedValues = tag(state(proxy(multiSelect2() ? [] : null)), "selectedValues");
  user_effect(() => {
    value(get(selectedValues));
    onSelect()(get(selectedValues));
  });
  function toggleSelected(toggleValue) {
    if (multiSelect2()) {
      const currentSelected = [...get(selectedValues)];
      const index2 = currentSelected.indexOf(toggleValue);
      if (strict_equals(index2, -1)) {
        set(selectedValues, [...currentSelected, toggleValue], true);
      } else {
        currentSelected.splice(index2, 1);
        set(selectedValues, currentSelected, true);
      }
    } else {
      set(selectedValues, strict_equals(toggleValue, get(selectedValues)) ? null : toggleValue, true);
    }
  }
  function isSelected(toggleValue) {
    if (multiSelect2()) {
      return get(selectedValues).includes(toggleValue);
    } else {
      return strict_equals(get(selectedValues), toggleValue);
    }
  }
  const buttonToggleContext = { toggleSelected, isSelected };
  setContext("button-toggle-group", buttonToggleContext);
  setContext("multiSelect", multiSelect2());
  setContext("buttonToggleColor", $$props.color);
  setContext("buttonToggleSize", size2());
  setContext("buttonToggleRounded", roundedSize());
  setContext("ctxIconClass", clsx_default($$props.ctxIconClass));
  setContext("ctxBtnClass", clsx_default($$props.ctxBtnClass));
  var $$exports = { ...legacy_api() };
  var div = root95();
  var div_1 = child(div);
  attribute_effect(div_1, () => ({
    class: get(base),
    role: multiSelect2() ? "group" : "radiogroup",
    "aria-label": name(),
    ...restProps
  }));
  var node = child(div_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", ButtonToggleGroup, 70, 4);
  reset(div_1);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonToggleGroup = hmr(ButtonToggleGroup, () => ButtonToggleGroup[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonToggleGroup[HMR].source;
    set(ButtonToggleGroup[HMR].source, module.default[HMR].original);
  });
}
var ButtonToggleGroup_default = ButtonToggleGroup;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/CheckIcon.svelte
CheckIcon[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/CheckIcon.svelte";
var root96 = add_locations(from_svg(`<svg><polyline points="20 6 9 17 4 12"></polyline></svg>`), CheckIcon[FILENAME], [[7, 0, [[8, 2]]]]);
function CheckIcon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CheckIcon);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "class"], "restProps");
  var $$exports = { ...legacy_api() };
  var svg = root96();
  attribute_effect(
    svg,
    ($0) => ({
      xmlns: "http://www.w3.org/2000/svg",
      width: "16",
      height: "16",
      viewBox: "0 0 24 24",
      fill: "none",
      stroke: "currentColor",
      "stroke-width": "2",
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      class: $0,
      ...restProps
    }),
    [() => clsx_default($$props.class)]
  );
  append($$anchor, svg);
  return pop($$exports);
}
if (import.meta.hot) {
  CheckIcon = hmr(CheckIcon, () => CheckIcon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckIcon[HMR].source;
    set(CheckIcon[HMR].source, module.default[HMR].original);
  });
}
var CheckIcon_default = CheckIcon;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggle.svelte
ButtonToggle[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/button-toggle/ButtonToggle.svelte";
var root97 = add_locations(from_html(`<button><div><!> <span><!></span></div></button>`), ButtonToggle[FILENAME], [[38, 0, [[39, 2, [[47, 4]]]]]]);
function ButtonToggle($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, ButtonToggle);
  let selected = prop($$props, "selected", 7, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "selected",
      "children",
      "iconSlot",
      "color",
      "class",
      "iconClass",
      "txtClass",
      "contentClass",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "ButtonToggle",
    {
      iconClass: $$props.iconClass,
      txtClass: $$props.txtClass,
      contentClass: $$props.contentClass
    },
    { iconClass: "icon", txtClass: "text", contentClass: "content" }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      icon: $$props.iconClass,
      text: $$props.txtClass,
      content: $$props.contentClass
    }),
    "styling"
  );
  const theme = getTheme("buttonToggle");
  const { toggleSelected, isSelected } = getContext("button-toggle-group");
  const multiSelect2 = getContext("multiSelect");
  const actualColor = getContext("buttonToggleColor") ? getContext("buttonToggleColor") : $$props.color ? $$props.color : "primary";
  const size2 = getContext("buttonToggleSize");
  const roundedSize = getContext("buttonToggleRounded");
  const ctxIconClass = getContext("ctxIconClass");
  const actualIconClass = ctxIconClass;
  const ctxBtnClass = getContext("ctxBtnClass");
  function handleClick() {
    toggleSelected($$props.value);
  }
  const $$d = tag(user_derived(() => buttonToggle({ selected: selected(), color: $$props.color, size: size2 })), "[$derived object]"), button2 = tag(user_derived(() => get($$d).button), "button"), content = tag(user_derived(() => get($$d).content), "content"), text2 = tag(user_derived(() => get($$d).text), "text"), icon = tag(user_derived(() => get($$d).icon), "icon");
  user_effect(() => {
    selected(isSelected($$props.value));
  });
  var $$exports = { ...legacy_api() };
  var button_1 = root97();
  attribute_effect(
    button_1,
    ($0) => ({
      type: "button",
      class: $0,
      "data-selected": selected(),
      onclick: handleClick,
      role: multiSelect2 ? "checkbox" : "radio",
      "aria-checked": selected(),
      ...restProps
    }),
    [
      () => get(button2)({
        selected: selected(),
        color: actualColor,
        size: size2,
        roundedSize,
        class: clsx_default(theme?.button, ctxBtnClass, $$props.class)
      })
    ]
  );
  var div = child(button_1);
  var node = child(div);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        var consequent = ($$anchor3) => {
          var fragment_1 = comment();
          var node_2 = first_child(fragment_1);
          add_svelte_meta(() => snippet(node_2, () => $$props.iconSlot), "render", ButtonToggle, 42, 8);
          append($$anchor3, fragment_1);
        };
        var alternate = ($$anchor3) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          {
            let $0 = user_derived(() => get(icon)({
              class: clsx_default(theme?.icon ?? actualIconClass, get(styling).icon)
            }));
            add_svelte_meta(
              () => CheckIcon_default(node_3, {
                get class() {
                  return get($0);
                }
              }),
              "component",
              ButtonToggle,
              44,
              8,
              { componentTag: "CheckIcon" }
            );
          }
          append($$anchor3, fragment_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.iconSlot) $$render(consequent);
            else $$render(alternate, false);
          }),
          "if",
          ButtonToggle,
          41,
          6
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (selected()) $$render(consequent_1);
      }),
      "if",
      ButtonToggle,
      40,
      4
    );
  }
  var span2 = sibling(node, 2);
  var node_4 = child(span2);
  add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", ButtonToggle, 48, 6);
  reset(span2);
  reset(div);
  reset(button_1);
  template_effect(
    ($0, $1) => {
      set_class(div, 1, $0);
      set_class(span2, 1, $1);
    },
    [
      () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) })),
      () => clsx2(get(text2)({
        selected: selected(),
        class: clsx_default(theme?.text, get(styling).text)
      }))
    ]
  );
  append($$anchor, button_1);
  return pop($$exports);
}
if (import.meta.hot) {
  ButtonToggle = hmr(ButtonToggle, () => ButtonToggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = ButtonToggle[HMR].source;
    set(ButtonToggle[HMR].source, module.default[HMR].original);
  });
}
var ButtonToggle_default = ButtonToggle;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/checkbox/theme.js
var checkbox = T({
  slots: {
    base: "w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 me-2 rounded-sm",
    div: "flex items-center"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        base: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
      },
      secondary: {
        base: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600"
      },
      gray: {
        base: "text-gray-600 focus:ring-gray-600 dark:ring-offset-gray-800 dark:focus:ring-gray-600"
      },
      red: {
        base: "text-red-600 focus:ring-red-600 dark:ring-offset-red-600 dark:focus:ring-red-600"
      },
      orange: {
        base: "text-orange-600 focus:ring-orange-600 dark:ring-offset-orange-600 dark:focus:ring-orange-600"
      },
      amber: {
        base: "text-amber-600 focus:ring-amber-600 dark:ring-offset-amber-600 dark:focus:ring-amber-600"
      },
      yellow: {
        base: "text-yellow-400 focus:ring-yellow-400 dark:ring-offset-yellow-400 dark:focus:ring-yellow-400"
      },
      lime: {
        base: "text-lime-700 focus:ring-lime-700 dark:ring-offset-lime-700 dark:focus:ring-lime-700"
      },
      green: {
        base: "text-green-600 focus:ring-green-600 dark:ring-offset-green-600 dark:focus:ring-green-600"
      },
      emerald: {
        base: "text-emerald-600 focus:ring-emerald-600 dark:ring-offset-emerald-600 dark:focus:ring-emerald-600"
      },
      teal: {
        base: "text-teal-600 focus:ring-teal-600 dark:ring-offset-teal-600 dark:focus:ring-teal-600"
      },
      cyan: {
        base: "text-cyan-600 focus:ring-cyan-600 dark:ring-offset-cyan-600 dark:focus:ring-cyan-600"
      },
      sky: {
        base: "text-sky-600 focus:ring-sky-600 dark:ring-offset-sky-600 dark:focus:ring-sky-600"
      },
      blue: {
        base: "text-blue-700 focus:ring-blue-600 dark:ring-offset-blue-700 dark:focus:ring-blue-700"
      },
      indigo: {
        base: "text-indigo-700 focus:ring-indigo-700 dark:ring-offset-indigo-700 dark:focus:ring-indigo-700"
      },
      violet: {
        base: "text-violet-600 focus:ring-violet-600 dark:ring-offset-violet-600 dark:focus:ring-violet-600"
      },
      purple: {
        base: "text-purple-600 focus:ring-purple-600 dark:ring-offset-purple-600 dark:focus:ring-purple-600"
      },
      fuchsia: {
        base: "text-fuchsia-600 focus:ring-fuchsia-600 dark:ring-offset-fuchsia-600 dark:focus:ring-fuchsia-600"
      },
      pink: {
        base: "text-pink-600 focus:ring-pink-600 dark:ring-offset-pink-600 dark:focus:ring-pink-600"
      },
      rose: {
        base: "text-rose-600 focus:ring-rose-600 dark:ring-offset-rose-600 dark:focus:ring-rose-600"
      }
    },
    tinted: {
      true: { base: "dark:bg-gray-600 dark:border-gray-500" },
      false: { base: "dark:bg-gray-700 dark:border-gray-600" }
    },
    custom: {
      true: { base: "sr-only peer" }
    },
    rounded: {
      true: { base: "rounded-sm" }
    },
    inline: {
      true: {
        div: "inline-flex",
        false: "flex items-center"
      }
    },
    disabled: {
      true: {
        base: "cursor-not-allowed opacity-50 bg-gray-200 border-gray-300",
        div: "cursor-not-allowed opacity-70"
      },
      false: {}
    }
  },
  defaultVariants: {
    color: "primary",
    disabled: false
  }
});
var checkboxButton = T({
  base: "",
  variants: {
    inline: {
      true: "inline-flex",
      false: "flex"
    },
    checked: {
      true: "outline-4 outline-green-500"
    }
  },
  defaultVariants: {
    inline: true
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/label/theme.js
var label = T({
  base: "text-sm rtl:text-right font-medium block",
  variants: {
    color: {
      disabled: "text-gray-500 dark:text-gray-500",
      primary: "text-primary-700 dark:text-primary-500",
      secondary: "text-secondary-700 dark:text-secondary-500",
      green: "text-green-700 dark:text-green-500",
      emerald: "text-emerald-700 dark:text-emerald-500",
      red: "text-red-700 dark:text-red-500",
      blue: "text-blue-700 dark:text-blue-500",
      yellow: "text-yellow-700 dark:text-yellow-500",
      orange: "text-orange-700 dark:text-orange-500",
      gray: "text-gray-700 dark:text-gray-200",
      teal: "text-teal-700 dark:text-teal-500",
      cyan: "text-cyan-700 dark:text-cyan-500",
      sky: "text-sky-700 dark:text-sky-500",
      indigo: "text-indigo-700 dark:text-indigo-500",
      lime: "text-lime-700 dark:text-lime-500",
      amber: "text-amber-700 dark:text-amber-500",
      violet: "text-violet-700 dark:text-violet-500",
      purple: "text-purple-700 dark:text-purple-500",
      fuchsia: "text-fuchsia-700 dark:text-fuchsia-500",
      pink: "text-pink-700 dark:text-pink-500",
      rose: "text-rose-700 dark:text-rose-500"
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/label/Label.svelte
Label[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/label/Label.svelte";
var root_158 = add_locations(from_html(`<label><!></label>`), Label[FILENAME], [[15, 2]]);
function Label($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Label);
  let color = prop($$props, "color", 3, "gray"), show = prop($$props, "show", 3, true), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "show",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("label");
  let base = tag(user_derived(() => label({ color: color(), class: clsx_default(theme, $$props.class) })), "base");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var label_1 = root_158();
      attribute_effect(label_1, () => ({ ...restProps, class: get(base) }));
      var node_1 = child(label_1);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Label, 16, 4);
      reset(label_1);
      append($$anchor2, label_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", Label, 19, 2);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (show()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Label,
      14,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Label = hmr(Label, () => Label[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Label[HMR].source;
    set(Label[HMR].source, module.default[HMR].original);
  });
}
var Label_default = Label;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/checkbox/Checkbox.svelte
Checkbox[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/checkbox/Checkbox.svelte";
var root_325 = add_locations(from_html(`<input/> <!>`, 1), Checkbox[FILENAME], [[46, 6]]);
var root_718 = add_locations(from_html(`<input/> <!>`, 1), Checkbox[FILENAME], [[56, 4]]);
function Checkbox($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Checkbox);
  const binding_group = [];
  let color = prop($$props, "color", 3, "primary"), group2 = prop($$props, "group", 31, () => tag_proxy(proxy([]), "group")), choices = prop($$props, "choices", 19, () => []), checked = prop($$props, "checked", 15, false), labelProps = prop($$props, "labelProps", 19, () => ({})), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "custom",
      "inline",
      "tinted",
      "rounded",
      "group",
      "choices",
      "checked",
      "classes",
      "class",
      "divClass",
      "disabled",
      "value",
      "labelProps"
    ],
    "restProps"
  );
  warnThemeDeprecation("Checkbox", { divClass: $$props.divClass }, { divClass: "div" });
  const styling = tag(user_derived(() => $$props.classes ?? { div: $$props.divClass }), "styling");
  const theme = getTheme("checkbox");
  const $$d = tag(
    user_derived(() => checkbox({
      color: color(),
      tinted: $$props.tinted,
      custom: $$props.custom,
      rounded: $$props.rounded,
      inline: $$props.inline,
      disabled: $$props.disabled ?? false
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), divStyle = tag(user_derived(() => get($$d).div), "divStyle");
  user_effect(() => {
    if (strict_equals($$props.value, void 0, false) && Array.isArray(group2())) {
      checked(group2().includes($$props.value));
    }
  });
  user_effect(() => {
    if (strict_equals($$props.value, void 0) || !Array.isArray(group2())) return;
    const index2 = group2().indexOf($$props.value);
    if (strict_equals(checked(), void 0)) checked(index2 >= 0);
    if (checked()) {
      if (index2 < 0) {
        group2().push($$props.value);
      }
    } else {
      if (index2 >= 0) {
        group2().splice(index2, 1);
      }
    }
  });
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      validate_each_keys(choices, (choice, i2) => choice.value ?? i2);
      add_svelte_meta(
        () => each(node_1, 19, choices, (choice, i2) => choice.value ?? i2, ($$anchor3, choice) => {
          var fragment_2 = comment();
          var node_2 = first_child(fragment_2);
          {
            let $0 = user_derived(() => !!$$props.children || !!get(choice).label);
            let $1 = user_derived(() => get(divStyle)({ class: clsx_default(theme?.div, get(styling).div) }));
            add_svelte_meta(
              () => Label_default(node_2, spread_props(
                {
                  get show() {
                    return get($0);
                  }
                },
                labelProps,
                {
                  get class() {
                    return get($1);
                  },
                  children: wrap_snippet(Checkbox, ($$anchor4, $$slotProps) => {
                    var fragment_3 = root_325();
                    var input2 = first_child(fragment_3);
                    attribute_effect(
                      input2,
                      ($02) => ({
                        type: "checkbox",
                        value: get(choice).value,
                        checked: get(choice).checked ?? false,
                        disabled: $$props.disabled,
                        ...restProps,
                        class: $02
                      }),
                      [
                        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
                      ],
                      void 0,
                      void 0,
                      true
                    );
                    var node_3 = sibling(input2, 2);
                    {
                      var consequent = ($$anchor5) => {
                        var fragment_4 = comment();
                        var node_4 = first_child(fragment_4);
                        add_svelte_meta(
                          () => snippet(node_4, () => $$props.children, () => ({
                            value: get(choice).value,
                            checked: get(choice).checked,
                            disabled: $$props.disabled
                          })),
                          "render",
                          Checkbox,
                          48,
                          8
                        );
                        append($$anchor5, fragment_4);
                      };
                      var alternate = ($$anchor5) => {
                        var text2 = text();
                        template_effect(() => set_text(text2, get(choice).label));
                        append($$anchor5, text2);
                      };
                      add_svelte_meta(
                        () => if_block(node_3, ($$render) => {
                          if ($$props.children) $$render(consequent);
                          else $$render(alternate, false);
                        }),
                        "if",
                        Checkbox,
                        47,
                        6
                      );
                    }
                    bind_group(
                      binding_group,
                      [],
                      input2,
                      () => {
                        get(choice).value;
                        return group2();
                      },
                      group2
                    );
                    append($$anchor4, fragment_3);
                  }),
                  $$slots: { default: true }
                }
              )),
              "component",
              Checkbox,
              45,
              4,
              { componentTag: "Label" }
            );
          }
          append($$anchor3, fragment_2);
        }),
        "each",
        Checkbox,
        44,
        2
      );
      append($$anchor2, fragment_1);
    };
    var alternate_1 = ($$anchor2) => {
      var fragment_6 = comment();
      var node_5 = first_child(fragment_6);
      {
        let $0 = user_derived(() => !!$$props.children);
        let $1 = user_derived(() => get(divStyle)({ class: clsx_default(theme?.div, get(styling).div) }));
        add_svelte_meta(
          () => Label_default(node_5, spread_props(
            {
              get show() {
                return get($0);
              }
            },
            labelProps,
            {
              get class() {
                return get($1);
              },
              children: wrap_snippet(Checkbox, ($$anchor3, $$slotProps) => {
                var fragment_7 = root_718();
                var input_1 = first_child(fragment_7);
                attribute_effect(
                  input_1,
                  ($02) => ({
                    type: "checkbox",
                    value: $$props.value,
                    disabled: $$props.disabled,
                    ...restProps,
                    class: $02
                  }),
                  [
                    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
                  ],
                  void 0,
                  void 0,
                  true
                );
                var node_6 = sibling(input_1, 2);
                {
                  var consequent_2 = ($$anchor4) => {
                    var fragment_8 = comment();
                    var node_7 = first_child(fragment_8);
                    add_svelte_meta(
                      () => snippet(node_7, () => $$props.children, () => ({
                        value: $$props.value,
                        checked: checked(),
                        disabled: $$props.disabled
                      })),
                      "render",
                      Checkbox,
                      58,
                      6
                    );
                    append($$anchor4, fragment_8);
                  };
                  add_svelte_meta(
                    () => if_block(node_6, ($$render) => {
                      if ($$props.children) $$render(consequent_2);
                    }),
                    "if",
                    Checkbox,
                    57,
                    4
                  );
                }
                bind_checked(input_1, checked);
                append($$anchor3, fragment_7);
              }),
              $$slots: { default: true }
            }
          )),
          "component",
          Checkbox,
          55,
          2,
          { componentTag: "Label" }
        );
      }
      append($$anchor2, fragment_6);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (choices().length > 0) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      Checkbox,
      43,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Checkbox = hmr(Checkbox, () => Checkbox[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Checkbox[HMR].source;
    set(Checkbox[HMR].source, module.default[HMR].original);
  });
}
var Checkbox_default = Checkbox;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/checkbox/CheckboxButton.svelte
CheckboxButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/checkbox/CheckboxButton.svelte";
var root_159 = add_locations(from_html(`<!> <!>`, 1), CheckboxButton[FILENAME], []);
function CheckboxButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, CheckboxButton);
  var $$ownership_validator = create_ownership_validator($$props);
  const binding_group = [];
  let group2 = prop($$props, "group", 15), checked = prop($$props, "checked", 15, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "group",
      "checked",
      "inline",
      "pill",
      "outline",
      "size",
      "color",
      "shadow"
    ],
    "restProps"
  );
  const theme = getTheme("checkboxButton");
  let buttonClass = tag(
    user_derived(() => checkboxButton({
      inline: $$props.inline,
      checked: checked(),
      class: clsx_default(theme, $$props.class)
    })),
    "buttonClass"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Button_default(node, {
      tag: "label",
      get pill() {
        return $$props.pill;
      },
      get outline() {
        return $$props.outline;
      },
      get size() {
        return $$props.size;
      },
      get color() {
        return $$props.color;
      },
      get shadow() {
        return $$props.shadow;
      },
      get class() {
        return get(buttonClass);
      },
      children: wrap_snippet(CheckboxButton, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_159();
        var node_1 = first_child(fragment_1);
        {
          $$ownership_validator.binding("group", Checkbox_default, group2);
          $$ownership_validator.binding("checked", Checkbox_default, checked);
          add_svelte_meta(
            () => Checkbox_default(node_1, spread_props(() => restProps, {
              class: "sr-only",
              get group() {
                return group2();
              },
              set group($$value) {
                group2($$value);
              },
              get checked() {
                return checked();
              },
              set checked($$value) {
                checked($$value);
              }
            })),
            "component",
            CheckboxButton,
            17,
            2,
            { componentTag: "Checkbox" }
          );
        }
        var node_2 = sibling(node_1, 2);
        add_svelte_meta(() => snippet(node_2, () => $$props.children ?? noop), "render", CheckboxButton, 18, 2);
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    CheckboxButton,
    16,
    0,
    { componentTag: "Button" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  CheckboxButton = hmr(CheckboxButton, () => CheckboxButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = CheckboxButton[HMR].source;
    set(CheckboxButton[HMR].source, module.default[HMR].original);
  });
}
var CheckboxButton_default = CheckboxButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/dropzone/theme.js
var dropzone = T({
  base: "flex flex-col justify-center items-center w-full h-64 bg-gray-50 rounded-lg border-2 border-gray-300 border-dashed cursor-pointer dark:hover:bg-bray-800 dark:bg-gray-700 hover:bg-gray-100 dark:border-gray-600 dark:hover:border-gray-500 dark:hover:bg-gray-600"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/dropzone/Dropzone.svelte
Dropzone[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/dropzone/Dropzone.svelte";
var root98 = add_locations(from_html(`<label><!> <input/></label>`), Dropzone[FILENAME], [[45, 0, [[48, 2]]]]);
function Dropzone($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Dropzone);
  let files = prop($$props, "files", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "files",
      "class",
      "onDrop",
      "onDragOver",
      "onChange"
    ],
    "restProps"
  );
  const theme = getTheme("dropzone");
  let inputElement;
  const handleDrop = function(event2) {
    event2.preventDefault();
    if (event2.dataTransfer?.files && event2.dataTransfer.files.length > 0) {
      files(event2.dataTransfer.files);
      if (inputElement) {
        inputElement.files = event2.dataTransfer.files;
      }
    }
    if ($$props.onDrop) {
      $$props.onDrop.call(this, event2);
    }
  };
  const handleDragOver = function(event2) {
    event2.preventDefault();
    if ($$props.onDragOver) {
      $$props.onDragOver.call(this, event2);
    }
  };
  const handleChange = function(event2) {
    if ($$props.onChange) {
      $$props.onChange.call(this, event2);
    }
  };
  var $$exports = { ...legacy_api() };
  var label2 = root98();
  var node = child(label2);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Dropzone, 46, 2);
  var input2 = sibling(node, 2);
  attribute_effect(
    input2,
    () => ({
      ...restProps,
      onchange: handleChange,
      type: "file",
      class: "hidden"
    }),
    void 0,
    void 0,
    void 0,
    true
  );
  bind_this(input2, ($$value) => inputElement = $$value, () => inputElement);
  reset(label2);
  template_effect(($0) => set_class(label2, 1, $0), [
    () => clsx2(dropzone({ class: clsx_default(theme, $$props.class) }))
  ]);
  event("drop", label2, handleDrop);
  event("dragover", label2, handleDragOver);
  bind_files(input2, files);
  append($$anchor, label2);
  return pop($$exports);
}
if (import.meta.hot) {
  Dropzone = hmr(Dropzone, () => Dropzone[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Dropzone[HMR].source;
    set(Dropzone[HMR].source, module.default[HMR].original);
  });
}
var Dropzone_default = Dropzone;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/fileupload/theme.js
var fileupload = T({
  slots: {
    base: "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right p-2.5 focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:placeholder-gray-400 border-gray-300 dark:border-gray-600 text-sm rounded-lg border p-0! dark:text-gray-400",
    wrapper: "relative w-full",
    close: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 end-0 p-2.5",
    svg: ""
  },
  variants: {
    size: {
      sm: { base: "text-xs ps-9 pe-9 p-2" },
      md: { base: "text-sm ps-10 pe-10 p-2.5" },
      lg: { base: "sm:text-base ps-11 pe-11 p-3" }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/fileupload/Fileupload.svelte
Fileupload[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/fileupload/Fileupload.svelte";
var root99 = add_locations(from_html(`<div><input/> <!></div>`), Fileupload[FILENAME], [[29, 0, [[30, 2]]]]);
function Fileupload($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Fileupload);
  var $$ownership_validator = create_ownership_validator($$props);
  let files = prop($$props, "files", 15), size2 = prop($$props, "size", 3, "md"), clearable = prop($$props, "clearable", 3, false), elementRef = prop($$props, "elementRef", 15), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "files",
      "size",
      "clearable",
      "elementRef",
      "class",
      "classes",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "wrapperClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Fileupload",
    {
      wrapperClass: $$props.wrapperClass,
      clearableClass: $$props.clearableClass,
      clearableSvgClass: $$props.clearableSvgClass
    },
    {
      wrapperClass: "wrapper",
      clearableClass: "close",
      clearableSvgClass: "svg"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      wrapper: $$props.wrapperClass,
      close: $$props.clearableClass,
      svg: $$props.clearableSvgClass
    }),
    "styling"
  );
  const theme = getTheme("fileupload");
  const { base, wrapper, close } = fileupload();
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 20, 6);
      files(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  createDismissableContext(clearAll);
  var $$exports = { ...legacy_api() };
  var div = root99();
  var input2 = child(div);
  attribute_effect(
    input2,
    ($0) => ({ type: "file", ...restProps, class: $0 }),
    [
      () => base({ size: size2(), class: clsx_default(theme?.base, $$props.class) })
    ],
    void 0,
    void 0,
    true
  );
  bind_this(input2, ($$value) => elementRef($$value), () => elementRef());
  var node = sibling(input2, 2);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      {
        let $0 = user_derived(() => close({ class: clsx_default(theme?.close, get(styling).close) }));
        let $1 = user_derived(() => clsx_default(get(styling).svg));
        add_svelte_meta(
          () => CloseButton_default(node_1, {
            get class() {
              return get($0);
            },
            get color() {
              return clearableColor();
            },
            "aria-label": "Clear selected files",
            get svgClass() {
              return get($1);
            }
          }),
          "component",
          Fileupload,
          32,
          4,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (files() && files().length > 0 && clearable()) $$render(consequent);
      }),
      "if",
      Fileupload,
      31,
      2
    );
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(wrapper({ class: clsx_default(theme?.wrapper, get(styling).wrapper) }))
  ]);
  bind_files(input2, files);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Fileupload = hmr(Fileupload, () => Fileupload[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Fileupload[HMR].source;
    set(Fileupload[HMR].source, module.default[HMR].original);
  });
}
var Fileupload_default = Fileupload;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/floating-label/theme.js
var floatingLabelInput = T({
  slots: {
    base: "relative",
    input: "block w-full text-sm text-gray-900 bg-transparent appearance-none dark:text-white focus:outline-hidden focus:ring-0 peer disabled:cursor-not-allowed disabled:opacity-50",
    label: "absolute text-sm duration-300 transform scale-75 z-10 origin-left rtl:origin-right peer-placeholder-shown:scale-100 peer-focus:scale-75",
    close: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    combo: "absolute top-full right-0 left-0 z-10 mt-1 max-h-60 overflow-y-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800",
    svg: ""
  },
  variants: {
    variant: {
      filled: {
        base: "relative",
        input: "rounded-t-lg border-0 border-b-2 bg-gray-50 dark:bg-gray-700",
        label: "-translate-y-4 start-2.5 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-4"
      },
      outlined: {
        base: "relative",
        input: "rounded-lg border",
        label: "-translate-y-4 bg-white dark:bg-gray-900 px-2 peer-focus:px-2 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:-translate-y-4 start-1"
      },
      standard: {
        base: "relative z-0",
        input: "border-0 border-b-2",
        label: "-translate-y-6 -z-10 peer-focus:start-0 peer-placeholder-shown:translate-y-0 peer-focus:-translate-y-6"
      }
    },
    size: {
      small: {},
      default: {}
    },
    color: {
      default: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
        label: "text-gray-500 dark:text-gray-400 peer-focus:text-primary-600 dark:peer-focus:text-primary-500"
      },
      primary: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-primary-500 focus:border-primary-600",
        label: "text-primary-500 dark:text-primary-400 peer-focus:text-primary-600 dark:peer-focus:text-primary-500"
      },
      secondary: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-secondary-500 focus:border-secondary-600",
        label: "text-secondary-500 dark:text-secondary-400 peer-focus:text-secondary-600 dark:peer-focus:text-secondary-500"
      },
      gray: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-gray-500 focus:border-gray-600",
        label: "text-gray-500 dark:text-gray-400 peer-focus:text-gray-600 dark:peer-focus:text-gray-500"
      },
      red: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-red-500 focus:border-red-600",
        label: "text-red-500 dark:text-red-400 peer-focus:text-red-600 dark:peer-focus:text-red-500"
      },
      orange: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-orange-500 focus:border-orange-600",
        label: "text-orange-500 dark:text-orange-400 peer-focus:text-orange-600 dark:peer-focus:text-orange-500"
      },
      amber: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-amber-500 focus:border-amber-600",
        label: "text-amber-500 dark:text-amber-400 peer-focus:text-amber-600 dark:peer-focus:text-amber-500"
      },
      yellow: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-yellow-500 focus:border-yellow-600",
        label: "text-yellow-500 dark:text-yellow-400 peer-focus:text-yellow-600 dark:peer-focus:text-yellow-500"
      },
      lime: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-lime-500 focus:border-lime-600",
        label: "text-lime-500 dark:text-lime-400 peer-focus:text-lime-600 dark:peer-focus:text-lime-500"
      },
      green: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-green-500 focus:border-green-600",
        label: "text-green-500 dark:text-green-400 peer-focus:text-green-600 dark:peer-focus:text-green-500"
      },
      emerald: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-emerald-500 focus:border-emerald-600",
        label: "text-emerald-500 dark:text-emerald-400 peer-focus:text-emerald-600 dark:peer-focus:text-emerald-500"
      },
      teal: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-teal-500 focus:border-teal-600",
        label: "text-teal-500 dark:text-teal-400 peer-focus:text-teal-600 dark:peer-focus:text-teal-500"
      },
      cyan: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-cyan-500 focus:border-cyan-600",
        label: "text-cyan-500 dark:text-cyan-400 peer-focus:text-cyan-600 dark:peer-focus:text-cyan-500"
      },
      sky: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-sky-500 focus:border-sky-600",
        label: "text-sky-500 dark:text-sky-400 peer-focus:text-sky-600 dark:peer-focus:text-sky-500"
      },
      blue: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-blue-500 focus:border-blue-600",
        label: "text-blue-500 dark:text-blue-400 peer-focus:text-blue-600 dark:peer-focus:text-blue-500"
      },
      indigo: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-indigo-500 focus:border-indigo-600",
        label: "text-indigo-500 dark:text-indigo-400 peer-focus:text-indigo-600 dark:peer-focus:text-indigo-500"
      },
      violet: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-violet-500 focus:border-violet-600",
        label: "text-violet-600 dark:text-violet-500 peer-focus:text-violet-600 dark:peer-focus:text-violet-500"
      },
      purple: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-purple-500 focus:border-purple-600",
        label: "text-purple-600 dark:text-purple-500 peer-focus:text-purple-600 dark:peer-focus:text-purple-500"
      },
      fuchsia: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-fuchsia-500 focus:border-fuchsia-600",
        label: "text-fuchsia-600 dark:text-fuchsia-500 peer-focus:text-fuchsia-600 dark:peer-focus:text-fuchsia-500"
      },
      pink: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-pink-500 focus:border-pink-600",
        label: "text-pink-600 dark:text-pink-500 peer-focus:text-pink-600 dark:peer-focus:text-pink-500"
      },
      rose: {
        input: "border-gray-300 dark:border-gray-600 dark:focus:border-rose-500 focus:border-rose-600",
        label: "text-rose-600 dark:text-rose-500 peer-focus:text-rose-600 dark:peer-focus:text-rose-500"
      }
    }
  },
  compoundVariants: [
    {
      variant: "filled",
      size: "small",
      class: {
        input: "px-2.5 pb-1.5 pt-4",
        label: "top-3"
      }
    },
    {
      variant: "filled",
      size: "default",
      class: {
        input: "px-2.5 pb-2.5 pt-5",
        label: "top-4"
      }
    },
    {
      variant: "outlined",
      size: "small",
      class: {
        input: "px-2.5 pb-1.5 pt-3",
        label: "top-1"
      }
    },
    {
      variant: "outlined",
      size: "default",
      class: {
        input: "px-2.5 pb-2.5 pt-4",
        label: "top-2"
      }
    },
    {
      variant: "standard",
      size: "small",
      class: {
        input: "py-2 px-0",
        label: "top-3"
      }
    },
    {
      variant: "standard",
      size: "default",
      class: {
        input: "py-2.5 px-0",
        label: "top-3"
      }
    },
    {
      variant: "filled",
      color: "primary",
      class: {
        input: "dark:focus:border-primary-500 focus:border-primary-600"
      }
    }
  ],
  defaultVariants: {
    variant: "standard",
    size: "default",
    color: "primary"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/floating-label/FloatingLabelInput.svelte
FloatingLabelInput[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/floating-label/FloatingLabelInput.svelte";
var root_160 = add_locations(from_html(`<div tabindex="-1" class="sr-only"></div>`), FloatingLabelInput[FILENAME], [[144, 2]]);
var on_click3 = (_, selectItem, item) => selectItem(get(item));
var root_426 = add_locations(from_html(`<button type="button"> </button>`), FloatingLabelInput[FILENAME], [[159, 8]]);
var root_326 = add_locations(from_html(`<div></div>`), FloatingLabelInput[FILENAME], [[157, 4]]);
var root100 = add_locations(from_html(`<!> <div><input/> <!> <label><!></label> <!></div>`, 1), FloatingLabelInput[FILENAME], [[147, 0, [[148, 2], [152, 2]]]]);
function FloatingLabelInput($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, FloatingLabelInput);
  var $$ownership_validator = create_ownership_validator($$props);
  let id = prop($$props, "id", 19, idGenerator), value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), variant = prop($$props, "variant", 3, "standard"), size2 = prop($$props, "size", 3, "default"), color = prop($$props, "color", 3, "default"), clearableColor = prop($$props, "clearableColor", 3, "none"), data = prop($$props, "data", 19, () => []), maxSuggestions = prop($$props, "maxSuggestions", 3, 5), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "id",
      "value",
      "elementRef",
      "variant",
      "size",
      "color",
      "class",
      "classes",
      "inputClass",
      "labelClass",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "data",
      "maxSuggestions",
      "onSelect",
      "comboClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "FloatingLabelInput",
    {
      inputClass: $$props.inputClass,
      labelClass: $$props.labelClass,
      clearableSvgClass: $$props.clearableSvgClass,
      clearableClass: $$props.clearableClass,
      comboClass: $$props.comboClass
    },
    {
      inputClass: "input",
      labelClass: "label",
      clearableSvgClass: "svg",
      clearableClass: "close",
      comboClass: "combo"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      input: $$props.inputClass,
      label: $$props.labelClass,
      svg: $$props.clearableSvgClass,
      close: $$props.clearableClass,
      combo: $$props.comboClass
    }),
    "styling"
  );
  const theme = getTheme("floatingLabelInput");
  const $$d = tag(user_derived(() => floatingLabelInput({ variant: variant(), size: size2(), color: color() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), input2 = tag(user_derived(() => get($$d).input), "input"), label2 = tag(user_derived(() => get($$d).label), "label"), close = tag(user_derived(() => get($$d).close), "close"), combo = tag(user_derived(() => get($$d).combo), "combo");
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 21, 6);
      value("");
      set(backspaceUsed, false);
      updateSuggestions();
      dummyFocusDiv?.focus();
      setTimeout(
        () => {
          elementRef()?.focus();
        },
        100
      );
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  const isCombobox = tag(user_derived(() => Array.isArray(data()) && data().length > 0), "isCombobox");
  let dummyFocusDiv;
  let isFocused = tag(state(false), "isFocused");
  let filteredSuggestions = tag(state(proxy([])), "filteredSuggestions");
  let selectedIndex = tag(state(-1), "selectedIndex");
  let backspaceUsed = tag(state(false), "backspaceUsed");
  function updateSuggestions() {
    if (!get(isCombobox) || !get(isFocused)) {
      set(filteredSuggestions, [], true);
      return;
    }
    const fullSearchTerm = (value() || "").toLowerCase();
    const lastSpaceIndex = fullSearchTerm.lastIndexOf(" ");
    const searchTerm = strict_equals(lastSpaceIndex, -1) ? fullSearchTerm : fullSearchTerm.substring(lastSpaceIndex + 1);
    if (strict_equals(searchTerm, "") && !get(backspaceUsed)) {
      set(filteredSuggestions, [], true);
    } else if (searchTerm) {
      set(filteredSuggestions, data().filter((item) => item.toLowerCase().includes(searchTerm)).slice(0, maxSuggestions()), true);
    } else if (get(backspaceUsed)) {
      set(filteredSuggestions, [...data()].slice(0, maxSuggestions()), true);
    }
    set(selectedIndex, -1);
  }
  user_effect(() => {
    if (get(isCombobox)) {
      updateSuggestions();
    }
  });
  function handleInput() {
    if (value().length > 0) {
      set(backspaceUsed, false);
    }
    updateSuggestions();
  }
  function handleFocus() {
    set(isFocused, true);
    updateSuggestions();
  }
  function handleBlur() {
    setTimeout(
      () => {
        set(isFocused, false);
        set(backspaceUsed, false);
        set(filteredSuggestions, [], true);
      },
      200
    );
  }
  function handleKeydown(event2) {
    if (!get(isCombobox)) return;
    if (strict_equals(event2.key, "Backspace") || strict_equals(event2.key, "Delete")) {
      const currentValue = value();
      if (currentValue.length <= 1) {
        set(backspaceUsed, true);
      }
    }
    if (!get(filteredSuggestions).length) return;
    switch (event2.key) {
      case "ArrowDown":
        event2.preventDefault();
        set(selectedIndex, (get(selectedIndex) + 1) % get(filteredSuggestions).length);
        break;
      case "ArrowUp":
        event2.preventDefault();
        set(
          selectedIndex,
          get(selectedIndex) <= 0 ? get(filteredSuggestions).length - 1 : get(selectedIndex) - 1,
          true
        );
        break;
      case "Enter":
        if (get(selectedIndex) >= 0) {
          event2.preventDefault();
          selectItem(get(filteredSuggestions)[get(selectedIndex)]);
        }
        break;
      case "Escape":
        event2.preventDefault();
        set(filteredSuggestions, [], true);
        break;
    }
  }
  function selectItem(item) {
    const currentValue = value() || "";
    const lastSpaceIndex = currentValue.lastIndexOf(" ");
    if (strict_equals(lastSpaceIndex, -1)) {
      value(
        item + " "
        // Replace the whole value if no space, add trailing space
      );
    } else {
      value(
        currentValue.substring(0, lastSpaceIndex + 1) + item + " "
        // Replace last word, add trailing space
      );
    }
    if ($$props.onSelect) $$props.onSelect(item);
    set(filteredSuggestions, [], true);
    set(selectedIndex, -1);
    elementRef()?.focus();
  }
  createDismissableContext(clearAll);
  var $$exports = { ...legacy_api() };
  var fragment = root100();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div = root_160();
      bind_this(div, ($$value) => dummyFocusDiv = $$value, () => dummyFocusDiv);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.clearable) $$render(consequent);
      }),
      "if",
      FloatingLabelInput,
      143,
      0
    );
  }
  var div_1 = sibling(node, 2);
  var input_1 = child(div_1);
  attribute_effect(
    input_1,
    ($0) => ({
      id: id(),
      placeholder: " ",
      ...restProps,
      class: $0,
      oninput: handleInput,
      onfocus: handleFocus,
      onblur: handleBlur,
      onkeydown: handleKeydown
    }),
    [
      () => get(input2)({ class: clsx_default(theme?.input, get(styling).input) })
    ],
    void 0,
    void 0,
    true
  );
  bind_this(input_1, ($$value) => elementRef($$value), () => elementRef());
  var node_1 = sibling(input_1, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      {
        let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
        let $1 = user_derived(() => clsx_default(get(styling).svg));
        add_svelte_meta(
          () => CloseButton_default(node_2, {
            get class() {
              return get($0);
            },
            get color() {
              return clearableColor();
            },
            "aria-label": "Clear search value",
            get svgClass() {
              return get($1);
            }
          }),
          "component",
          FloatingLabelInput,
          150,
          4,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_1);
      }),
      "if",
      FloatingLabelInput,
      149,
      2
    );
  }
  var label_1 = sibling(node_1, 2);
  var node_3 = child(label_1);
  add_svelte_meta(() => snippet(node_3, () => $$props.children), "render", FloatingLabelInput, 153, 4);
  reset(label_1);
  var node_4 = sibling(label_1, 2);
  {
    var consequent_2 = ($$anchor2) => {
      var div_2 = root_326();
      add_svelte_meta(
        () => each(div_2, 21, () => get(filteredSuggestions), index, ($$anchor3, item, i2) => {
          var button2 = root_426();
          button2.__click = [on_click3, selectItem, item];
          var text2 = child(button2, true);
          reset(button2);
          template_effect(() => {
            set_class(button2, 1, `w-full px-3 py-2 text-left ${strict_equals(i2, get(selectedIndex)) ? "bg-gray-100 dark:bg-gray-700" : "hover:bg-gray-50 dark:hover:bg-gray-700"} focus:outline-none`);
            set_text(text2, get(item));
          });
          event("mouseenter", button2, () => set(selectedIndex, i2, true));
          append($$anchor3, button2);
        }),
        "each",
        FloatingLabelInput,
        158,
        6
      );
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(get(combo)({ class: clsx_default(theme?.combo, get(styling).combo) }))
      ]);
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (get(isCombobox) && get(isFocused) && get(filteredSuggestions).length > 0) $$render(consequent_2);
      }),
      "if",
      FloatingLabelInput,
      156,
      2
    );
  }
  reset(div_1);
  template_effect(
    ($0, $1) => {
      set_class(div_1, 1, $0);
      set_attribute(label_1, "for", id());
      set_class(label_1, 1, $1);
    },
    [
      () => clsx2(get(base)({
        class: clsx_default(get(isCombobox) ? "relative" : "", theme?.base, $$props.class)
      })),
      () => clsx2(get(label2)({ class: clsx_default(theme?.label, get(styling).label) }))
    ]
  );
  bind_value(input_1, value);
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  FloatingLabelInput = hmr(FloatingLabelInput, () => FloatingLabelInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = FloatingLabelInput[HMR].source;
    set(FloatingLabelInput[HMR].source, module.default[HMR].original);
  });
}
var FloatingLabelInput_default = FloatingLabelInput;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/helper/theme.js
var helper = T({
  base: "text-xs font-normal text-gray-500 dark:text-gray-300",
  variants: {
    color: {
      disabled: "text-gray-400 dark:text-gray-500",
      primary: "text-primary-500 dark:text-primary-400",
      secondary: "text-secondary-500 dark:text-secondary-400",
      green: "text-green-500 dark:text-green-400",
      emerald: "text-emerald-500 dark:text-emerald-400",
      red: "text-red-500 dark:text-red-400",
      blue: "text-blue-500 dark:text-blue-400",
      yellow: "text-yellow-500 dark:text-yellow-400",
      orange: "text-orange-500 dark:text-orange-400",
      gray: "text-gray-500 dark:text-gray-400",
      teal: "text-teal-500 dark:text-teal-400",
      cyan: "text-cyan-500 dark:text-cyan-400",
      sky: "text-sky-500 dark:text-sky-400",
      indigo: "text-indigo-500 dark:text-indigo-400",
      lime: "text-lime-500 dark:text-lime-400",
      amber: "text-amber-500 dark:text-amber-400",
      violet: "text-violet-500 dark:text-violet-400",
      purple: "text-purple-500 dark:text-purple-400",
      fuchsia: "text-fuchsia-500 dark:text-fuchsia-400",
      pink: "text-pink-500 dark:text-pink-400",
      rose: "text-rose-500 dark:text-rose-400"
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/helper/Helper.svelte
Helper[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/helper/Helper.svelte";
var root101 = add_locations(from_html(`<p><!></p>`), Helper[FILENAME], [[14, 0]]);
function Helper($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Helper);
  let color = prop($$props, "color", 3, "gray"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "color"
    ],
    "restProps"
  );
  const theme = getTheme("helper");
  const base = tag(user_derived(() => helper({ color: color(), class: clsx_default(theme, $$props.class) })), "base");
  var $$exports = { ...legacy_api() };
  var p2 = root101();
  attribute_effect(p2, () => ({ ...restProps, class: get(base) }));
  var node = child(p2);
  add_svelte_meta(() => snippet(node, () => $$props.children ?? noop), "render", Helper, 15, 2);
  reset(p2);
  append($$anchor, p2);
  return pop($$exports);
}
if (import.meta.hot) {
  Helper = hmr(Helper, () => Helper[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Helper[HMR].source;
    set(Helper[HMR].source, module.default[HMR].original);
  });
}
var Helper_default = Helper;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-field/theme.js
var input = T({
  slots: {
    base: "relative w-full",
    input: "block w-full disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right focus:outline-hidden",
    left: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 pointer-events-none start-0 p-2.5",
    right: "flex absolute inset-y-0 items-center text-gray-500 dark:text-gray-400 end-0 p-2.5",
    close: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    combo: "absolute top-full right-0 left-0 z-20 mt-1 max-h-60 overflow-y-auto rounded-md border border-gray-200 bg-white shadow-lg dark:border-gray-700 dark:bg-gray-800",
    comboItem: "text-gray-900 dark:text-gray-50",
    div: "",
    svg: ""
  },
  variants: {
    size: {
      sm: { input: "text-xs px-2 py-1" },
      md: { input: "text-sm px-2.5 py-2.5" },
      lg: { input: "sm:text-base px-3 py-3" }
    },
    color: {
      default: {
        input: "border border-gray-300 dark:border-gray-600 focus:border-primary-500 focus:ring-primary-500 dark:focus:border-primary-500 dark:focus:ring-primary-500 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400 bg-gray-50 text-gray-900 dark:bg-gray-700 dark:text-white dark:placeholder-gray-400"
      },
      tinted: {
        input: "border border-gray-300 dark:border-gray-500 bg-gray-50 text-gray-900 dark:bg-gray-600 dark:text-white dark:placeholder-gray-400"
      },
      primary: {
        input: "border border-primary-200 dark:border-primary-400 focus:ring-primary-500 focus:border-primary-600 dark:focus:ring-primary-500 dark:focus:border-primary-500 bg-primary-50 text-primary-900 placeholder-primary-700 dark:text-primary-400 dark:placeholder-primary-500 dark:bg-gray-700"
      },
      secondary: {
        input: "border border-secondary-200 dark:border-secondary-400 focus:ring-secondary-500 focus:border-secondary-600 dark:focus:ring-secondary-500 dark:focus:border-secondary-500 bg-secondary-50 text-secondary-900 placeholder-secondary-700 dark:text-secondary-400 dark:placeholder-secondary-500 dark:bg-gray-700"
      },
      green: {
        input: "border border-green-200 dark:border-green-400 focus:ring-green-500 focus:border-green-600 dark:focus:ring-green-500 dark:focus:border-green-500 bg-green-50 text-green-900 placeholder-green-700 dark:text-green-400 dark:placeholder-green-500 dark:bg-gray-700"
      },
      emerald: {
        input: "border border-emerald-200 dark:border-emerald-400 focus:ring-emerald-500 focus:border-emerald-600 dark:focus:ring-emerald-500 dark:focus:border-emerald-500 bg-emerald-50 text-emerald-900 placeholder-emerald-700 dark:text-emerald-400 dark:placeholder-emerald-500 dark:bg-gray-700"
      },
      red: {
        input: "border border-red-200 dark:border-red-400 focus:ring-red-500 focus:border-red-600 dark:focus:ring-red-500 dark:focus:border-red-500 bg-red-50 text-red-900 placeholder-red-700 dark:text-red-400 dark:placeholder-red-500 dark:bg-gray-700"
      },
      blue: {
        input: "border border-blue-200 dark:border-blue-400 focus:ring-blue-500 focus:border-blue-600 dark:focus:ring-blue-500 dark:focus:border-blue-500 bg-blue-50 text-blue-900 placeholder-blue-700 dark:text-blue-400 dark:placeholder-blue-500 dark:bg-gray-700"
      },
      yellow: {
        input: "border border-yellow-200 dark:border-yellow-400 focus:ring-yellow-500 focus:border-yellow-600 dark:focus:ring-yellow-500 dark:focus:border-yellow-500 bg-yellow-50 text-yellow-900 placeholder-yellow-700 dark:text-yellow-400 dark:placeholder-yellow-500 dark:bg-gray-700"
      },
      orange: {
        input: "border border-orange-200 dark:border-orange-400 focus:ring-orange-500 focus:border-orange-600 dark:focus:ring-orange-500 dark:focus:border-orange-500 bg-orange-50 text-orange-900 placeholder-orange-700 dark:text-orange-400 dark:placeholder-orange-500 dark:bg-gray-700"
      },
      gray: {
        input: "border border-gray-200 dark:border-gray-400 focus:ring-gray-500 focus:border-gray-600 dark:focus:ring-gray-500 dark:focus:border-gray-500 bg-gray-50 text-gray-900 placeholder-gray-700 dark:text-gray-400 dark:placeholder-gray-500 dark:bg-gray-700"
      },
      teal: {
        input: "border border-teal-200 dark:border-teal-400 focus:ring-teal-500 focus:border-teal-600 dark:focus:ring-teal-500 dark:focus:border-teal-500 bg-teal-50 text-teal-900 placeholder-teal-700 dark:text-teal-400 dark:placeholder-teal-500 dark:bg-gray-700"
      },
      cyan: {
        input: "border border-cyan-200 dark:border-cyan-400 focus:ring-cyan-500 focus:border-cyan-600 dark:focus:ring-cyan-500 dark:focus:border-cyan-500 bg-cyan-50 text-cyan-900 placeholder-cyan-700 dark:text-cyan-400 dark:placeholder-cyan-500 dark:bg-gray-700"
      },
      sky: {
        input: "border border-sky-200 dark:border-sky-400 focus:ring-sky-500 focus:border-sky-600 dark:focus:ring-sky-500 dark:focus:border-sky-500 bg-sky-50 text-sky-900 placeholder-sky-700 dark:text-sky-400 dark:placeholder-sky-500 dark:bg-gray-700"
      },
      indigo: {
        input: "border border-indigo-200 dark:border-indigo-400 focus:ring-indigo-500 focus:border-indigo-600 dark:focus:ring-indigo-500 dark:focus:border-indigo-500 bg-indigo-50 text-indigo-900 placeholder-indigo-700 dark:text-indigo-400 dark:placeholder-indigo-500 dark:bg-gray-700"
      },
      lime: {
        input: "border border-lime-200 dark:border-lime-400 focus:ring-lime-500 focus:border-lime-600 dark:focus:ring-lime-500 dark:focus:border-lime-500 bg-lime-50 text-lime-900 placeholder-lime-700 dark:text-lime-400 dark:placeholder-lime-500 dark:bg-gray-700"
      },
      amber: {
        input: "border border-amber-200 dark:border-amber-400 focus:ring-amber-500 focus:border-amber-600 dark:focus:ring-amber-500 dark:focus:border-amber-500 bg-amber-50 text-amber-900 placeholder-amber-700 dark:text-amber-400 dark:placeholder-amber-500 dark:bg-gray-700"
      },
      violet: {
        input: "border border-violet-200 dark:border-violet-400 focus:ring-violet-500 focus:border-violet-600 dark:focus:ring-violet-500 dark:focus:border-violet-500 bg-violet-50 text-violet-900 placeholder-violet-700 dark:text-violet-400 dark:placeholder-violet-500 dark:bg-gray-700"
      },
      purple: {
        input: "border border-purple-200 dark:border-purple-400 focus:ring-purple-500 focus:border-purple-600 dark:focus:ring-purple-500 dark:focus:border-purple-500 bg-purple-50 text-purple-900 placeholder-purple-700 dark:text-purple-400 dark:placeholder-purple-500 dark:bg-gray-700"
      },
      fuchsia: {
        input: "border border-fuchsia-200 dark:border-fuchsia-400 focus:ring-fuchsia-500 focus:border-fuchsia-600 dark:focus:ring-fuchsia-500 dark:focus:border-fuchsia-500 bg-fuchsia-50 text-fuchsia-900 placeholder-fuchsia-700 dark:text-fuchsia-400 dark:placeholder-fuchsia-500 dark:bg-gray-700"
      },
      pink: {
        input: "border border-pink-200 dark:border-pink-400 focus:ring-pink-500 focus:border-pink-600 dark:focus:ring-pink-500 dark:focus:border-pink-500 bg-pink-50 text-pink-900 placeholder-pink-700 dark:text-pink-400 dark:placeholder-pink-500 dark:bg-gray-700"
      },
      rose: {
        input: "border border-rose-200 dark:border-rose-400 focus:ring-rose-500 focus:border-rose-600 dark:focus:ring-rose-500 dark:focus:border-rose-500 bg-rose-50 text-rose-900 placeholder-rose-700 dark:text-rose-400 dark:placeholder-rose-500 dark:bg-gray-700"
      }
    },
    grouped: {
      false: { input: "rounded-lg" },
      true: {
        input: "first:rounded-s-lg last:rounded-e-lg not-first:-ms-px"
      }
    }
  },
  defaultVariants: {
    size: "md",
    color: "default"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-field/Input.svelte
Input[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-field/Input.svelte";
var root_327 = add_locations(from_html(`<input/> <!>`, 1), Input[FILENAME], [[253, 4]]);
var root_512 = add_locations(from_html(`<div tabindex="-1" class="sr-only"></div>`), Input[FILENAME], [[218, 2]]);
var root_719 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[224, 6]]);
var root_811 = add_locations(from_html(`<div><!></div>`), Input[FILENAME], [[230, 6]]);
var on_click4 = (_, selectItem, item) => selectItem(item);
var root_105 = add_locations(from_html(`<button type="button"><p> </p></button>`), Input[FILENAME], [[238, 10, [[239, 12]]]]);
var root_97 = add_locations(from_html(`<div></div>`), Input[FILENAME], [[236, 6]]);
var root_610 = add_locations(from_html(`<div><!> <!> <!> <!></div>`), Input[FILENAME], [[222, 2]]);
var root102 = add_locations(from_html(`<!> <!>`, 1), Input[FILENAME], []);
function Input($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Input);
  const inputContent = wrap_snippet(Input, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        {
          let $0 = user_derived(() => ({ ...restProps, class: get(inputCls)() }));
          add_svelte_meta(() => snippet(node_1, () => $$props.children, () => get($0)), "render", Input, 251, 4);
        }
        append($$anchor3, fragment_1);
      };
      var alternate = ($$anchor3) => {
        var fragment_2 = root_327();
        var input_1 = first_child(fragment_2);
        attribute_effect(
          input_1,
          ($0) => ({
            ...restProps,
            oninput: handleInput,
            onfocus: handleFocus,
            onblur: handleBlur,
            onkeydown: handleKeydown,
            class: $0
          }),
          [
            () => get(inputCls)({ class: clsx_default(theme?.input, $$props.class) })
          ],
          void 0,
          void 0,
          true
        );
        bind_this(input_1, ($$value) => elementRef($$value), () => elementRef());
        var node_2 = sibling(input_1, 2);
        {
          var consequent_1 = ($$anchor4) => {
            var fragment_3 = comment();
            var node_3 = first_child(fragment_3);
            {
              let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
              let $1 = user_derived(() => clsx_default(get(styling).svg));
              add_svelte_meta(
                () => CloseButton_default(node_3, {
                  get class() {
                    return get($0);
                  },
                  get color() {
                    return clearableColor();
                  },
                  "aria-label": "Clear search value",
                  get svgClass() {
                    return get($1);
                  }
                }),
                "component",
                Input,
                255,
                6,
                { componentTag: "CloseButton" }
              );
            }
            append($$anchor4, fragment_3);
          };
          add_svelte_meta(
            () => if_block(node_2, ($$render) => {
              if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && clearable()) $$render(consequent_1);
            }),
            "if",
            Input,
            254,
            4
          );
        }
        bind_value(input_1, value);
        append($$anchor3, fragment_2);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.children) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        Input,
        250,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearable = prop($$props, "clearable", 3, false), color = prop($$props, "color", 3, "default"), clearableColor = prop($$props, "clearableColor", 3, "none"), data = prop($$props, "data", 19, () => []), maxSuggestions = prop($$props, "maxSuggestions", 3, 5), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "left",
      "right",
      "value",
      "elementRef",
      "clearable",
      "size",
      "color",
      "class",
      "classes",
      "wrapperClass",
      "leftClass",
      "rightClass",
      "divClass",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "data",
      "maxSuggestions",
      "onSelect",
      "comboClass",
      "comboItemClass",
      "onInput",
      "onFocus",
      "onBlur",
      "onKeydown",
      "oninput",
      "onfocus",
      "onblur",
      "onkeydown"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Input",
    {
      wrapperClass: $$props.wrapperClass,
      leftClass: $$props.leftClass,
      rightClass: $$props.rightClass,
      divClass: $$props.divClass,
      clearableSvgClass: $$props.clearableSvgClass,
      clearableClass: $$props.clearableClass,
      comboClass: $$props.comboClass
    },
    {
      wrapperClass: "wrapper",
      leftClass: "left",
      rightClass: "right",
      divClass: "div",
      clearableSvgClass: "svg",
      clearableClass: "close",
      comboClass: "comboItem"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      left: $$props.leftClass,
      right: $$props.rightClass,
      div: $$props.divClass,
      svg: $$props.clearableSvgClass,
      close: $$props.clearableClass,
      combo: $$props.comboClass,
      comboItem: $$props.comboItemClass
    }),
    "styling"
  );
  const theme = getTheme("input");
  const resolvedOnInput = tag(user_derived(() => $$props.oninput || $$props.onInput), "resolvedOnInput");
  const resolvedOnFocus = tag(user_derived(() => $$props.onfocus || $$props.onFocus), "resolvedOnFocus");
  const resolvedOnBlur = tag(user_derived(() => $$props.onblur || $$props.onBlur), "resolvedOnBlur");
  const resolvedOnKeydown = tag(user_derived(() => $$props.onkeydown || $$props.onKeydown), "resolvedOnKeydown");
  const isCombobox = tag(user_derived(() => Array.isArray(data()) && data().length > 0), "isCombobox");
  let background = getContext("background");
  let dummyFocusDiv;
  let group2 = getContext("group");
  let isGroup = !!group2;
  let _size = tag(user_derived(() => $$props.size || clampSize(group2?.size) || "md"), "_size");
  const _color = tag(user_derived(() => strict_equals(color(), "default") && background ? "tinted" : color()), "_color");
  const $$d = tag(user_derived(() => input({ size: get(_size), color: get(_color), grouped: isGroup })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), inputCls = tag(user_derived(() => get($$d).input), "inputCls"), leftCls = tag(user_derived(() => get($$d).left), "leftCls"), rightCls = tag(user_derived(() => get($$d).right), "rightCls"), close = tag(user_derived(() => get($$d).close), "close"), combo = tag(user_derived(() => get($$d).combo), "combo"), comboItem = tag(user_derived(() => get($$d).comboItem), "comboItem");
  const clearAll = () => {
    if (elementRef()) {
      const input2 = elementRef();
      input2.value = "";
      value("");
      set(backspaceUsed, false);
      updateSuggestions();
      dummyFocusDiv?.focus();
      setTimeout(
        () => {
          input2.focus();
        },
        100
      );
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  createDismissableContext(clearAll);
  let isFocused = tag(state(false), "isFocused");
  let filteredSuggestions = tag(state(proxy([])), "filteredSuggestions");
  let selectedIndex = tag(state(-1), "selectedIndex");
  let backspaceUsed = tag(state(
    false
    // Track if backspace was used to clear
  ), "backspaceUsed");
  function updateSuggestions() {
    if (!get(isCombobox) || !get(isFocused)) {
      set(filteredSuggestions, [], true);
      return;
    }
    const fullSearchTerm = (value() || "").toLowerCase();
    const lastSpaceIndex = fullSearchTerm.lastIndexOf(" ");
    const searchTerm = strict_equals(lastSpaceIndex, -1) ? fullSearchTerm : fullSearchTerm.substring(lastSpaceIndex + 1);
    if (strict_equals(searchTerm, "") && !get(backspaceUsed)) {
      set(filteredSuggestions, [], true);
    } else {
      if (searchTerm) {
        set(filteredSuggestions, data().filter((item) => item.toLowerCase().includes(searchTerm)).slice(0, maxSuggestions()), true);
      } else if (get(backspaceUsed)) {
        set(filteredSuggestions, [...data()].slice(0, maxSuggestions()), true);
      }
    }
    set(selectedIndex, -1);
  }
  user_effect(() => {
    if (get(isCombobox)) {
      updateSuggestions();
    }
  });
  function defaultHandleInput(event2) {
    const currentValueAsString = String(value() || "");
    if (currentValueAsString.length > 0) {
      set(backspaceUsed, false);
    }
    updateSuggestions();
  }
  function defaultHandleFocus(event2) {
    set(isFocused, true);
    updateSuggestions();
  }
  function defaultHandleBlur(event2) {
    setTimeout(
      () => {
        set(isFocused, false);
        set(
          backspaceUsed,
          false
          // Reset flag when focus is lost
        );
        set(filteredSuggestions, [], true);
      },
      200
    );
  }
  function defaultHandleKeydown(event2) {
    if (!get(isCombobox)) return;
    if (strict_equals(event2.key, "Backspace") || strict_equals(event2.key, "Delete")) {
      const currentValue = value();
      if (currentValue.length <= 1) {
        set(backspaceUsed, true);
      }
    }
    if (!get(filteredSuggestions).length) return;
    switch (event2.key) {
      case "ArrowDown":
        event2.preventDefault();
        set(selectedIndex, (get(selectedIndex) + 1) % get(filteredSuggestions).length);
        break;
      case "ArrowUp":
        event2.preventDefault();
        set(
          selectedIndex,
          get(selectedIndex) <= 0 ? get(filteredSuggestions).length - 1 : get(selectedIndex) - 1,
          true
        );
        break;
      case "Enter":
        if (get(selectedIndex) >= 0) {
          event2.preventDefault();
          selectItem(get(filteredSuggestions)[get(selectedIndex)]);
        }
        break;
      case "Escape":
        event2.preventDefault();
        set(filteredSuggestions, [], true);
        break;
    }
  }
  function handleInput(event2) {
    if (get(resolvedOnInput)) {
      get(resolvedOnInput)(event2);
    }
    defaultHandleInput(event2);
  }
  function handleFocus(event2) {
    if (get(resolvedOnFocus)) {
      get(resolvedOnFocus)(event2);
    }
    defaultHandleFocus(event2);
  }
  function handleBlur(event2) {
    if (get(resolvedOnBlur)) {
      get(resolvedOnBlur)(event2);
    }
    defaultHandleBlur(event2);
  }
  function handleKeydown(event2) {
    if (get(resolvedOnKeydown)) {
      get(resolvedOnKeydown)(event2);
    }
    defaultHandleKeydown(event2);
  }
  function selectItem(item) {
    const currentValue = value() || "";
    const lastSpaceIndex = currentValue.lastIndexOf(" ");
    if (strict_equals(lastSpaceIndex, -1)) {
      value(
        item + " "
        // Replace the whole value if no space, add trailing space
      );
    } else {
      value(
        currentValue.substring(0, lastSpaceIndex + 1) + item + " "
        // Replace last word, add trailing space
      );
    }
    if ($$props.onSelect) {
      $$props.onSelect(item);
    }
    set(filteredSuggestions, [], true);
    set(selectedIndex, -1);
    if (elementRef()) {
      elementRef().focus();
    }
  }
  var $$exports = { ...legacy_api() };
  var fragment_4 = root102();
  var node_4 = first_child(fragment_4);
  {
    var consequent_2 = ($$anchor2) => {
      var div = root_512();
      bind_this(div, ($$value) => dummyFocusDiv = $$value, () => dummyFocusDiv);
      append($$anchor2, div);
    };
    add_svelte_meta(
      () => if_block(node_4, ($$render) => {
        if (clearable()) $$render(consequent_2);
      }),
      "if",
      Input,
      217,
      0
    );
  }
  var node_5 = sibling(node_4, 2);
  {
    var consequent_6 = ($$anchor2) => {
      var div_1 = root_610();
      var node_6 = child(div_1);
      {
        var consequent_3 = ($$anchor3) => {
          var div_2 = root_719();
          var node_7 = child(div_2);
          add_svelte_meta(() => snippet(node_7, () => $$props.left), "render", Input, 225, 8);
          reset(div_2);
          template_effect(($0) => set_class(div_2, 1, $0), [
            () => clsx2(get(leftCls)({ class: clsx_default(theme?.left, get(styling).left) }))
          ]);
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_6, ($$render) => {
            if ($$props.left) $$render(consequent_3);
          }),
          "if",
          Input,
          223,
          4
        );
      }
      var node_8 = sibling(node_6, 2);
      add_svelte_meta(() => inputContent(node_8), "render", Input, 228, 4);
      var node_9 = sibling(node_8, 2);
      {
        var consequent_4 = ($$anchor3) => {
          var div_3 = root_811();
          var node_10 = child(div_3);
          add_svelte_meta(() => snippet(node_10, () => $$props.right), "render", Input, 231, 8);
          reset(div_3);
          template_effect(($0) => set_class(div_3, 1, $0), [
            () => clsx2(get(rightCls)({ class: clsx_default(theme?.right, get(styling).right) }))
          ]);
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_9, ($$render) => {
            if ($$props.right) $$render(consequent_4);
          }),
          "if",
          Input,
          229,
          4
        );
      }
      var node_11 = sibling(node_9, 2);
      {
        var consequent_5 = ($$anchor3) => {
          var div_4 = root_97();
          validate_each_keys(() => get(filteredSuggestions), (item) => item);
          add_svelte_meta(
            () => each(div_4, 22, () => get(filteredSuggestions), (item) => item, ($$anchor4, item, i2) => {
              var button2 = root_105();
              button2.__click = [on_click4, selectItem, item];
              var p2 = child(button2);
              var text2 = child(p2, true);
              reset(p2);
              reset(button2);
              template_effect(
                ($0) => {
                  set_class(button2, 1, `w-full px-3 py-2 text-left ${strict_equals(get(i2), get(selectedIndex)) ? "bg-gray-100 dark:bg-gray-700" : "hover:bg-gray-50 dark:hover:bg-gray-700"} focus:outline-none`);
                  set_class(p2, 1, $0);
                  set_text(text2, item);
                },
                [
                  () => clsx2(get(comboItem)({ class: clsx_default(theme?.comboItem, get(styling).comboItem) }))
                ]
              );
              event("mouseenter", button2, () => set(selectedIndex, get(i2), true));
              append($$anchor4, button2);
            }),
            "each",
            Input,
            237,
            8
          );
          reset(div_4);
          template_effect(($0) => set_class(div_4, 1, $0), [
            () => clsx2(get(combo)({ class: clsx_default(theme?.combo, get(styling).combo) }))
          ]);
          append($$anchor3, div_4);
        };
        add_svelte_meta(
          () => if_block(node_11, ($$render) => {
            if (get(isCombobox) && get(isFocused) && get(filteredSuggestions).length > 0) $$render(consequent_5);
          }),
          "if",
          Input,
          235,
          4
        );
      }
      reset(div_1);
      template_effect(($0) => set_class(div_1, 1, $0), [
        () => clsx2(get(base)({ class: clsx_default(theme?.base, get(styling).div) }))
      ]);
      append($$anchor2, div_1);
    };
    var alternate_1 = ($$anchor2) => {
      add_svelte_meta(() => inputContent($$anchor2), "render", Input, 246, 2);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if (get(isCombobox) || $$props.right || $$props.left || clearable()) $$render(consequent_6);
        else $$render(alternate_1, false);
      }),
      "if",
      Input,
      221,
      0
    );
  }
  append($$anchor, fragment_4);
  return pop($$exports);
}
if (import.meta.hot) {
  Input = hmr(Input, () => Input[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Input[HMR].source;
    set(Input[HMR].source, module.default[HMR].original);
  });
}
var Input_default = Input;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-field/index.js
function clampSize(s) {
  return s && s === "xs" ? "sm" : s === "xl" ? "lg" : s;
}

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-addon/InputAddon.svelte
InputAddon[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/input-addon/InputAddon.svelte";
var root103 = add_locations(from_html(`<div><!></div>`), InputAddon[FILENAME], [[37, 0]]);
function InputAddon($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, InputAddon);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "size"
    ],
    "restProps"
  );
  let background = getContext("background");
  let group2 = getContext("group");
  const borderClasses = {
    base: "border-gray-300 dark:border-gray-600",
    tinted: "border-gray-300 dark:border-gray-500"
  };
  const darkBgClasses = {
    base: "dark:bg-gray-600 dark:text-gray-400",
    tinted: "dark:bg-gray-500 dark:text-gray-300"
  };
  const divider = {
    base: "dark:border-e-gray-700 dark:last:border-e-gray-600",
    tinted: "dark:border-e-gray-600 dark:last:border-e-gray-500"
  };
  const textSizes = { sm: "sm:text-xs", md: "text-sm", lg: "sm:text-base" };
  const prefixPadding = { sm: "px-2", md: "px-3", lg: "px-4" };
  let _size = $$props.size || clampSize(group2?.size) || "md";
  let divClass = clsx_default(textSizes[_size], prefixPadding[_size], "text-gray-500 bg-gray-200", background ? darkBgClasses.tinted : darkBgClasses.base, background ? divider.tinted : divider.base, background ? borderClasses["tinted"] : borderClasses["base"], "inline-flex items-center border", group2 && "not-first:-ms-px", "first:rounded-s-lg last:rounded-e-lg", $$props.class);
  var $$exports = { ...legacy_api() };
  var div = root103();
  attribute_effect(div, () => ({ ...restProps, class: divClass }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", InputAddon, 38, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  InputAddon = hmr(InputAddon, () => InputAddon[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = InputAddon[HMR].source;
    set(InputAddon[HMR].source, module.default[HMR].original);
  });
}
var InputAddon_default = InputAddon;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/phoneinput/theme.js
var phoneInput = T({
  slots: {
    div: "absolute inset-y-0 start-0 top-0 flex items-center ps-3.5 pointer-events-none",
    svg: "w-4 h-4 text-gray-500 dark:text-gray-400",
    input: "bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-50",
    span: "absolute start-0 bottom-3 text-gray-500 dark:text-gray-400",
    floatingInput: "block py-2.5 ps-6 pe-0 w-full text-sm text-gray-900 bg-transparent border-0 border-b-2 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-primary-500 focus:outline-none focus:ring-0 focus:border-primary-600 peer disabled:cursor-not-allowed disabled:opacity-50",
    label: "absolute text-sm text-gray-500 dark:text-gray-400 duration-300 transform -translate-y-6 scale-75 top-3 origin-[0] peer-placeholder-shown:start-6 peer-focus:start-0 peer-focus:text-primary-600 peer-focus:dark:text-primary-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:translate-y-0 peer-focus:scale-75 peer-focus:-translate-y-6 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto"
  },
  variants: {
    phoneType: {
      default: {},
      floating: {
        svg: "w-4 h-4 rtl:rotate-[270deg]"
      },
      countryCode: {
        input: "rounded-none rounded-e-lg"
      },
      copy: {},
      advanced: {}
    },
    phoneIcon: {
      true: { input: "ps-10" },
      false: {}
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/phoneinput/PhoneInput.svelte
PhoneInput[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/phoneinput/PhoneInput.svelte";
var root_161 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 19 18"><path d="M18 13.446a3.02 3.02 0 0 0-.946-1.985l-1.4-1.4a3.054 3.054 0 0 0-4.218 0l-.7.7a.983.983 0 0 1-1.39 0l-2.1-2.1a.983.983 0 0 1 0-1.389l.7-.7a2.98 2.98 0 0 0 0-4.217l-1.4-1.4a2.824 2.824 0 0 0-4.218 0c-3.619 3.619-3 8.229 1.752 12.979C6.785 16.639 9.45 18 11.912 18a7.175 7.175 0 0 0 5.139-2.325A2.9 2.9 0 0 0 18 13.446Z"></path></svg>`), PhoneInput[FILENAME], [[15, 2, [[16, 4]]]]);
var root_328 = add_locations(from_html(`<div><!></div>`), PhoneInput[FILENAME], [[23, 6]]);
var root_233 = add_locations(from_html(`<div class="relative"><!> <input/></div>`), PhoneInput[FILENAME], [[21, 2, [[27, 4]]]]);
var root_611 = add_locations(from_html(`<span><!></span>`), PhoneInput[FILENAME], [[32, 6]]);
var root_513 = add_locations(from_html(`<div class="relative"><!> <input/> <label> </label></div>`), PhoneInput[FILENAME], [[30, 2, [[36, 4], [37, 4]]]]);
function PhoneInput($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, PhoneInput);
  const phoneIconSnippet = wrap_snippet(PhoneInput, function($$anchor2) {
    validate_snippet_args(...arguments);
    var svg_1 = root_161();
    template_effect(($0) => set_class(svg_1, 0, $0), [() => clsx2(get(svg)({ class: clsx_default(theme?.svg) }))]);
    append($$anchor2, svg_1);
  });
  let phoneIcon = prop($$props, "phoneIcon", 3, true), pattern = prop($$props, "pattern", 3, "[0-9]{3}-[0-9]{3}-[0-9]{4}"), phoneType = prop($$props, "phoneType", 3, "default"), floatingLabel = prop($$props, "floatingLabel", 3, "Phone number"), labelFor = prop($$props, "labelFor", 3, "floating-phone-number"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "phoneIcon",
      "pattern",
      "phoneType",
      "floatingLabel",
      "labelFor",
      "class",
      "classes"
    ],
    "restProps"
  );
  const theme = getTheme("phoneInput");
  const $$d = tag(user_derived(() => phoneInput({ phoneType: phoneType(), phoneIcon: phoneIcon() })), "[$derived object]"), div = tag(user_derived(() => get($$d).div), "div"), svg = tag(user_derived(() => get($$d).svg), "svg"), input2 = tag(user_derived(() => get($$d).input), "input"), span2 = tag(user_derived(() => get($$d).span), "span"), floatingInput = tag(user_derived(() => get($$d).floatingInput), "floatingInput"), label2 = tag(user_derived(() => get($$d).label), "label");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_1 = ($$anchor2) => {
      var div_1 = root_233();
      var node_1 = child(div_1);
      {
        var consequent = ($$anchor3) => {
          var div_2 = root_328();
          var node_2 = child(div_2);
          add_svelte_meta(() => phoneIconSnippet(node_2), "render", PhoneInput, 24, 8);
          reset(div_2);
          template_effect(($0) => set_class(div_2, 1, $0), [
            () => clsx2(get(div)({ class: clsx_default(theme?.div, $$props.classes?.div) }))
          ]);
          append($$anchor3, div_2);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if (phoneIcon()) $$render(consequent);
          }),
          "if",
          PhoneInput,
          22,
          4
        );
      }
      var input_1 = sibling(node_1, 2);
      attribute_effect(
        input_1,
        ($0) => ({ type: "tel", pattern: pattern(), ...restProps, class: $0 }),
        [
          () => get(input2)({ class: clsx_default(theme?.input, $$props.classes?.input) })
        ],
        void 0,
        void 0,
        true
      );
      reset(div_1);
      append($$anchor2, div_1);
    };
    var alternate = ($$anchor2) => {
      var fragment_1 = comment();
      var node_3 = first_child(fragment_1);
      {
        var consequent_3 = ($$anchor3) => {
          var div_3 = root_513();
          var node_4 = child(div_3);
          {
            var consequent_2 = ($$anchor4) => {
              var span_1 = root_611();
              var node_5 = child(span_1);
              add_svelte_meta(() => phoneIconSnippet(node_5), "render", PhoneInput, 33, 8);
              reset(span_1);
              template_effect(($0) => set_class(span_1, 1, $0), [
                () => clsx2(get(span2)({ class: clsx_default(theme?.span, $$props.classes?.span) }))
              ]);
              append($$anchor4, span_1);
            };
            add_svelte_meta(
              () => if_block(node_4, ($$render) => {
                if (phoneIcon()) $$render(consequent_2);
              }),
              "if",
              PhoneInput,
              31,
              4
            );
          }
          var input_2 = sibling(node_4, 2);
          attribute_effect(
            input_2,
            ($0) => ({ type: "tel", class: $0, pattern: pattern(), ...restProps }),
            [
              () => get(floatingInput)({
                class: clsx_default(theme?.floatingInput, $$props.classes?.floatingInput)
              })
            ],
            void 0,
            void 0,
            true
          );
          var label_1 = sibling(input_2, 2);
          var text2 = child(label_1, true);
          reset(label_1);
          reset(div_3);
          template_effect(
            ($0) => {
              set_attribute(label_1, "for", labelFor());
              set_class(label_1, 1, $0);
              set_text(text2, floatingLabel());
            },
            [
              () => clsx2(get(label2)({ class: clsx_default(theme?.label, $$props.classes?.label) }))
            ]
          );
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(
            node_3,
            ($$render) => {
              if (strict_equals(phoneType(), "floating")) $$render(consequent_3);
            },
            true
          ),
          "if",
          PhoneInput,
          29,
          0
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(phoneType(), "default") || strict_equals(phoneType(), "countryCode")) $$render(consequent_1);
        else $$render(alternate, false);
      }),
      "if",
      PhoneInput,
      20,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  PhoneInput = hmr(PhoneInput, () => PhoneInput[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = PhoneInput[HMR].source;
    set(PhoneInput[HMR].source, module.default[HMR].original);
  });
}
var PhoneInput_default = PhoneInput;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/select/theme.js
var select = T({
  slots: {
    base: "relative",
    select: "block w-full rtl:text-right",
    close: "absolute right-8 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    svg: ""
  },
  variants: {
    underline: {
      true: {
        select: "text-gray-500 bg-transparent border-0 border-b-2 border-gray-200 appearance-none dark:text-gray-400 dark:border-gray-700 focus:outline-hidden focus:ring-0 focus:border-gray-200 peer px-0!"
      },
      false: {
        select: "text-gray-900 bg-gray-50 border border-gray-300 rounded-lg focus:outline-hidden focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500"
      }
    },
    size: {
      sm: { select: "text-xs px-2.5 py-2.5" },
      md: { select: "text-sm px-2.5 py-2.5" },
      lg: { select: "text-base py-3 px-4" }
    },
    disabled: {
      true: {
        select: "cursor-not-allowed opacity-50"
      },
      false: {}
    }
  },
  defaultVariants: {
    underline: false,
    size: "md"
  }
});
var multiSelect = T({
  slots: {
    base: "relative border border-gray-300 flex items-center rounded-lg gap-2 dark:border-gray-600 ring-primary-500 dark:ring-primary-500 focus-visible:outline-hidden",
    select: "flex flex-wrap gap-2",
    dropdown: "absolute z-50 p-3 flex flex-col gap-1 max-h-64 bg-white border border-gray-300 dark:bg-gray-700 dark:border-gray-600 start-0 top-[calc(100%+1rem)] rounded-lg cursor-pointer overflow-y-scroll w-full",
    item: "py-2 px-3 rounded-lg text-gray-600 hover:text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:text-gray-300 dark:hover:bg-gray-600",
    close: "p-0 focus:ring-gray-400 dark:text-white",
    span: "",
    placeholder: "text-gray-400",
    svg: "ms-1 h-3 w-3 cursor-pointer text-gray-800 dark:text-white"
  },
  variants: {
    size: {
      sm: "px-2.5 py-2.5 min-h-[2.4rem] text-xs",
      md: "px-2.5 py-2.5 min-h-[2.7rem] text-sm",
      lg: "px-3 py-3 min-h-[3.2rem] sm:text-base"
    },
    disabled: {
      true: {
        base: "cursor-not-allowed opacity-50 pointer-events-none",
        item: "cursor-not-allowed opacity-50",
        close: "cursor-not-allowed"
      },
      false: { base: "focus-within:border-primary-500 dark:focus-within:border-primary-500 focus-within:ring-1" }
    },
    active: {
      true: {
        item: "bg-primary-100 text-primary-500 dark:bg-primary-500 dark:text-primary-100 hover:bg-primary-100 dark:hover:bg-primary-500 hover:text-primary-600 dark:hover:text-primary-100"
      }
    },
    selected: {
      true: {
        item: "bg-gray-100 text-black font-semibold hover:text-black dark:text-white dark:bg-gray-600 dark:hover:text-white"
      }
    }
  },
  // Add compoundVariants here
  compoundVariants: [
    {
      selected: true,
      active: true,
      class: {
        item: "bg-primary-200 dark:bg-primary-600 text-primary-700 dark:text-primary-100 font-semibold"
        // Adjust colors as needed
      }
    }
  ],
  defaultVariants: {
    underline: false,
    size: "md"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/select/Select.svelte
Select[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/select/Select.svelte";
var root_163 = add_locations(from_html(`<option disabled> </option>`), Select[FILENAME], [[41, 6]]);
var root_329 = add_locations(from_html(`<option> </option>`), Select[FILENAME], [[46, 8]]);
var root104 = add_locations(from_html(`<div><select><!><!><!></select> <!></div>`), Select[FILENAME], [[38, 0, [[39, 2]]]]);
function Select($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Select);
  var $$ownership_validator = create_ownership_validator($$props);
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), size2 = prop($$props, "size", 3, "md"), placeholder = prop($$props, "placeholder", 3, "Choose option ..."), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "value",
      "elementRef",
      "underline",
      "size",
      "disabled",
      "placeholder",
      "clearable",
      "clearableColor",
      "clearableOnClick",
      "onClear",
      "clearableSvgClass",
      "clearableClass",
      "selectClass",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Select",
    {
      selectClass: $$props.selectClass,
      clearableSvgClass: $$props.clearableSvgClass,
      clearableClass: $$props.clearableClass
    },
    {
      selectClass: "select",
      clearableSvgClass: "svg",
      clearableClass: "close"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      select: $$props.selectClass,
      svg: $$props.clearableSvgClass,
      close: $$props.clearableClass
    }),
    "styling"
  );
  const theme = getTheme("select");
  const $$d = tag(
    user_derived(() => select({
      underline: $$props.underline,
      size: size2(),
      disabled: $$props.disabled
    })),
    "[$derived object]"
  ), base = tag(user_derived(() => get($$d).base), "base"), select2 = tag(user_derived(() => get($$d).select), "select"), close = tag(user_derived(() => get($$d).close), "close");
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 22, 6);
      elementRef().dispatchEvent(new Event("change", { bubbles: true }));
    }
    value("");
    if ($$props.onClear) $$props.onClear();
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  createDismissableContext(clearAll);
  var $$exports = { ...legacy_api() };
  var div = root104();
  var select_1 = child(div);
  attribute_effect(select_1, ($0) => ({ disabled: $$props.disabled, ...restProps, class: $0 }), [
    () => get(select2)({ class: clsx_default(theme?.select, get(styling).select) })
  ]);
  var node = child(select_1);
  {
    var consequent = ($$anchor2) => {
      var option = root_163();
      var text2 = child(option, true);
      reset(option);
      option.value = option.__value = "";
      template_effect(() => {
        set_selected(option, strict_equals(value(), "") || strict_equals(value(), void 0));
        set_text(text2, placeholder());
      });
      append($$anchor2, option);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (placeholder()) $$render(consequent);
      }),
      "if",
      Select,
      40,
      4
    );
  }
  var node_1 = sibling(node);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_2 = first_child(fragment);
      add_svelte_meta(
        () => each(node_2, 17, () => $$props.items, index, ($$anchor3, item) => {
          var option_1 = root_329();
          var text_1 = child(option_1, true);
          reset(option_1);
          var option_1_value = {};
          template_effect(() => {
            option_1.disabled = get(item).disabled;
            set_text(text_1, get(item).name);
            if (option_1_value !== (option_1_value = get(item).value)) {
              option_1.value = (option_1.__value = get(item).value) ?? "";
            }
          });
          append($$anchor3, option_1);
        }),
        "each",
        Select,
        45,
        6
      );
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if ($$props.items) $$render(consequent_1);
      }),
      "if",
      Select,
      44,
      4
    );
  }
  var node_3 = sibling(node_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_4 = first_child(fragment_1);
      add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Select, 51, 6);
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_3, ($$render) => {
        if ($$props.children) $$render(consequent_2);
      }),
      "if",
      Select,
      50,
      4
    );
  }
  reset(select_1);
  bind_this(select_1, ($$value) => elementRef($$value), () => elementRef());
  var node_5 = sibling(select_1, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_2 = comment();
      var node_6 = first_child(fragment_2);
      {
        let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
        let $1 = user_derived(() => clsx_default(get(styling).svg));
        add_svelte_meta(
          () => CloseButton_default(node_6, {
            get class() {
              return get($0);
            },
            get color() {
              return clearableColor();
            },
            "aria-label": "Clear search value",
            get svgClass() {
              return get($1);
            },
            get disabled() {
              return $$props.disabled;
            }
          }),
          "component",
          Select,
          55,
          4,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment_2);
    };
    add_svelte_meta(
      () => if_block(node_5, ($$render) => {
        if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_3);
      }),
      "if",
      Select,
      54,
      2
    );
  }
  reset(div);
  template_effect(($0) => set_class(div, 1, $0), [
    () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) }))
  ]);
  bind_select_value(select_1, value);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Select = hmr(Select, () => Select[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Select[HMR].source;
    set(Select[HMR].source, module.default[HMR].original);
  });
}
var Select_default = Select;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/select/MultiSelect.svelte
MultiSelect[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/select/MultiSelect.svelte";
var root_164 = add_locations(from_html(`<option> </option>`), MultiSelect[FILENAME], [[201, 4]]);
var root_234 = add_locations(from_html(`<span> </span>`), MultiSelect[FILENAME], [[207, 4]]);
var on_click5 = (e, selectOption, item) => selectOption(get(item), e);
var root_106 = add_locations(from_html(`<div role="presentation"> </div>`), MultiSelect[FILENAME], [[235, 8]]);
var root_98 = add_locations(from_html(`<div role="presentation"></div>`), MultiSelect[FILENAME], [[233, 4]]);
var root105 = add_locations(from_html(`<select hidden="" multiple></select> <div><!> <span><!></span> <div class="ms-auto flex items-center gap-2"><!> <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 10 6"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2"></path></svg></div> <!></div>`, 1), MultiSelect[FILENAME], [
  [199, 0],
  [205, 0, [[209, 2], [222, 2, [[227, 4, [[228, 6]]]]]]]
]);
function MultiSelect($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, MultiSelect);
  let items = prop($$props, "items", 19, () => []), value = prop($$props, "value", 15), size2 = prop($$props, "size", 3, "md"), dropdownClass = prop($$props, "dropdownClass", 3, ""), placeholder = prop($$props, "placeholder", 3, ""), disabled = prop($$props, "disabled", 3, false), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "items",
      "value",
      "size",
      "dropdownClass",
      "placeholder",
      "disabled",
      "onchange",
      "onblur",
      "class",
      "classes",
      "name",
      "form",
      "required",
      "autocomplete"
    ],
    "restProps"
  );
  warnThemeDeprecation("MultiSelect", { dropdownClass: dropdownClass() }, { dropdownClass: "dropdown" });
  const styling = tag(user_derived(() => $$props.classes ?? { dropdown: dropdownClass() }), "styling");
  const theme = getTheme("multiSelect");
  let selectItems = tag(user_derived(() => items().filter((x2) => value().includes(x2.value))), "selectItems");
  let show = tag(state(false), "show");
  let activeIndex = tag(state(null), "activeIndex");
  let activeItem = tag(
    user_derived(() => strict_equals(get(activeIndex), null, false) ? items()[(get(activeIndex) % items().length + items().length) % items().length] : null),
    "activeItem"
  );
  let multiSelectContainer;
  const selectOption = (select3, event2) => {
    event2.stopPropagation();
    if (disabled()) return;
    if (select3.disabled) return;
    const oldValue = [...value()];
    if (value().includes(select3.value)) {
      clearThisOption(select3);
    } else if (!value().includes(select3.value)) {
      value([...value(), select3.value]);
    }
    if (strict_equals(JSON.stringify(oldValue), JSON.stringify(value()), false)) {
      triggerChange();
    }
  };
  const clearAll = (e) => {
    if (disabled()) return;
    e.stopPropagation();
    const oldValue = [...value()];
    value([]);
    if (oldValue.length > 0) {
      triggerChange();
    }
  };
  createDismissableContext(clearAll);
  const clearThisOption = (select3) => {
    if (disabled()) return;
    if (value().includes(select3.value)) {
      const oldValue = [...value()];
      value(value().filter((o) => strict_equals(o, select3.value, false)));
      if (strict_equals(oldValue.length, value().length, false)) {
        triggerChange();
      }
    }
  };
  const triggerChange = () => {
    if ($$props.onchange) {
      const changeEvent = new Event("change", { bubbles: true });
      Object.defineProperty(changeEvent, "target", { value: { value: value() }, enumerable: true });
      Object.defineProperty(changeEvent, "currentTarget", { value: { value: value() }, enumerable: true });
      $$props.onchange(changeEvent);
    }
  };
  const closeDropdown = () => !disabled() && set(show, false);
  const toggleDropdown = (event2) => {
    if (disabled()) return;
    if (multiSelectContainer && multiSelectContainer.contains(event2.target)) {
      set(show, !get(show));
    } else {
      set(
        show,
        false
        // Close if clicked outside
      );
    }
  };
  const handleBlur = (event2) => {
    if (event2.currentTarget && event2.currentTarget.contains && !event2.currentTarget.contains(event2.relatedTarget)) {
      closeDropdown();
    }
    if ($$props.onblur) {
      $$props.onblur(event2);
    }
  };
  function handleToggleActiveItem() {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(
        activeItem
        // Pass a dummy MouseEvent
      ), null, false)) selectOption(get(activeItem), new MouseEvent("click"));
    }
  }
  function handleArrowUpDown(offset3) {
    if (disabled()) return;
    if (!get(show)) {
      set(show, true);
      set(activeIndex, 0);
    } else {
      if (strict_equals(get(activeIndex), null, false)) {
        set(activeIndex, get(activeIndex) + offset3);
      } else {
        set(activeIndex, 0);
      }
    }
  }
  function handleKeyDown(event2) {
    if (disabled()) return;
    if (strict_equals(event2.key, "Tab", false)) {
      event2.preventDefault();
    }
    event2.stopPropagation();
    const actions = {
      Escape: closeDropdown,
      Enter: handleToggleActiveItem,
      " ": handleToggleActiveItem,
      ArrowDown: () => handleArrowUpDown(1),
      ArrowUp: () => handleArrowUpDown(-1)
    };
    if (event2.key in actions) {
      actions[event2.key]?.();
    }
  }
  onMount(() => {
    const handleClickOutside = (event2) => {
      if (multiSelectContainer && !multiSelectContainer.contains(event2.target)) {
        closeDropdown();
      }
    };
    document.addEventListener("click", handleClickOutside);
    return () => {
      document.removeEventListener("click", handleClickOutside);
    };
  });
  const {
    base,
    dropdown: dropdown2,
    item: dropdownItem2,
    close,
    select: select2,
    placeholder: placeholderSpan,
    svg
  } = multiSelect({ disabled: disabled() });
  var $$exports = { ...legacy_api() };
  var fragment = root105();
  var select_1 = first_child(fragment);
  select_1.__change = function(...$$args) {
    apply(() => $$props.onchange, this, $$args, MultiSelect, [199, 73]);
  };
  add_svelte_meta(
    () => each(select_1, 21, items, index, ($$anchor2, item) => {
      var option = root_164();
      var text2 = child(option, true);
      reset(option);
      var option_value = {};
      template_effect(() => {
        option.disabled = get(item).disabled;
        set_text(text2, get(item).name);
        if (option_value !== (option_value = get(item).value)) {
          option.value = (option.__value = get(item).value) ?? "";
        }
      });
      append($$anchor2, option);
    }),
    "each",
    MultiSelect,
    200,
    2
  );
  reset(select_1);
  var select_1_value;
  init_select(select_1);
  var div = sibling(select_1, 2);
  attribute_effect(
    div,
    ($0) => ({
      ...restProps,
      onclick: toggleDropdown,
      onblur: handleBlur,
      onkeydown: handleKeyDown,
      tabindex: "0",
      role: "listbox",
      class: $0
    }),
    [
      () => base({ size: size2(), class: clsx_default(theme?.base, $$props.class) })
    ]
  );
  var node = child(div);
  {
    var consequent = ($$anchor2) => {
      var span2 = root_234();
      var text_1 = child(span2, true);
      reset(span2);
      template_effect(
        ($0) => {
          set_class(span2, 1, $0);
          set_text(text_1, placeholder());
        },
        [
          () => clsx2(placeholderSpan({ class: clsx_default($$props.classes?.placeholder) }))
        ]
      );
      append($$anchor2, span2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(selectItems).length) $$render(consequent);
      }),
      "if",
      MultiSelect,
      206,
      2
    );
  }
  var span_1 = sibling(node, 2);
  var node_1 = child(span_1);
  {
    var consequent_2 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_2 = first_child(fragment_1);
      validate_each_keys(() => get(selectItems), (item) => item.name);
      add_svelte_meta(
        () => each(node_2, 17, () => get(selectItems), (item) => item.name, ($$anchor3, item) => {
          var fragment_2 = comment();
          var node_3 = first_child(fragment_2);
          {
            var consequent_1 = ($$anchor4) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              add_svelte_meta(() => snippet(node_4, () => $$props.children, () => ({ item: get(item), clear: () => clearThisOption(get(item)) })), "render", MultiSelect, 213, 10);
              append($$anchor4, fragment_3);
            };
            var alternate = ($$anchor4) => {
              var fragment_4 = comment();
              var node_5 = first_child(fragment_4);
              {
                let $0 = user_derived(() => strict_equals(size2(), "lg"));
                let $1 = user_derived(() => [disabled() && "pointer-events-none"]);
                add_svelte_meta(
                  () => Badge_default(node_5, {
                    color: "gray",
                    get large() {
                      return get($0);
                    },
                    dismissable: true,
                    params: { duration: 100 },
                    onclose: () => clearThisOption(get(item)),
                    get class() {
                      return get($1);
                    },
                    children: wrap_snippet(MultiSelect, ($$anchor5, $$slotProps) => {
                      next();
                      var text_2 = text();
                      template_effect(() => set_text(text_2, get(item).name));
                      append($$anchor5, text_2);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  MultiSelect,
                  215,
                  10,
                  { componentTag: "Badge" }
                );
              }
              append($$anchor4, fragment_4);
            };
            add_svelte_meta(
              () => if_block(node_3, ($$render) => {
                if ($$props.children) $$render(consequent_1);
                else $$render(alternate, false);
              }),
              "if",
              MultiSelect,
              212,
              8
            );
          }
          append($$anchor3, fragment_2);
        }),
        "each",
        MultiSelect,
        211,
        6
      );
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node_1, ($$render) => {
        if (get(selectItems).length) $$render(consequent_2);
      }),
      "if",
      MultiSelect,
      210,
      4
    );
  }
  reset(span_1);
  var div_1 = sibling(span_1, 2);
  var node_6 = child(div_1);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_6 = comment();
      var node_7 = first_child(fragment_6);
      {
        let $0 = user_derived(() => close({ class: clsx_default(theme?.close, $$props.classes?.close) }));
        add_svelte_meta(
          () => CloseButton_default(node_7, {
            get size() {
              return size2();
            },
            color: "none",
            get class() {
              return get($0);
            },
            get disabled() {
              return disabled();
            }
          }),
          "component",
          MultiSelect,
          224,
          6,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment_6);
    };
    add_svelte_meta(
      () => if_block(node_6, ($$render) => {
        if (get(selectItems).length) $$render(consequent_3);
      }),
      "if",
      MultiSelect,
      223,
      4
    );
  }
  var svg_1 = sibling(node_6, 2);
  var path = child(svg_1);
  reset(svg_1);
  reset(div_1);
  var node_8 = sibling(div_1, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var div_2 = root_98();
      validate_each_keys(items, (item) => item.name);
      add_svelte_meta(
        () => each(div_2, 21, items, (item) => item.name, ($$anchor3, item) => {
          var div_3 = root_106();
          div_3.__click = [on_click5, selectOption, item];
          var text_3 = child(div_3, true);
          reset(div_3);
          template_effect(
            ($0) => {
              set_class(div_3, 1, $0);
              set_text(text_3, get(item).name);
            },
            [
              () => clsx2(dropdownItem2({
                selected: get(selectItems).includes(get(item)),
                active: strict_equals(get(activeItem), get(item)),
                disabled: get(item).disabled,
                class: clsx_default($$props.classes?.item)
              }))
            ]
          );
          append($$anchor3, div_3);
        }),
        "each",
        MultiSelect,
        234,
        6
      );
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(dropdown2({ class: clsx_default(get(styling).dropdown) }))
      ]);
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node_8, ($$render) => {
        if (get(show)) $$render(consequent_4);
      }),
      "if",
      MultiSelect,
      232,
      2
    );
  }
  reset(div);
  bind_this(div, ($$value) => multiSelectContainer = $$value, () => multiSelectContainer);
  template_effect(
    ($0, $1) => {
      set_attribute(select_1, "name", $$props.name);
      set_attribute(select_1, "form", $$props.form);
      select_1.required = $$props.required;
      set_attribute(select_1, "autocomplete", $$props.autocomplete);
      if (select_1_value !== (select_1_value = value())) {
        select_1.value = (select_1.__value = value()) ?? "", select_option(select_1, value());
      }
      set_class(span_1, 1, $0);
      set_class(svg_1, 0, $1);
      set_attribute(path, "d", get(show) ? "m1 5 4-4 4 4" : "m9 1-4 4-4-4");
    },
    [
      () => clsx2(select2({ class: clsx_default(theme?.select, $$props.classes?.span) })),
      () => clsx2(clsx_default(svg(), disabled() && "cursor-not-allowed", $$props.classes?.svg))
    ]
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  MultiSelect = hmr(MultiSelect, () => MultiSelect[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = MultiSelect[HMR].source;
    set(MultiSelect[HMR].source, module.default[HMR].original);
  });
}
var MultiSelect_default = MultiSelect;
delegate(["change", "click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/radio/theme.js
var radio = T({
  slots: {
    input: "flex items-center w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 mr-2",
    label: "flex items-center"
  },
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        input: "text-primary-600 focus:ring-primary-500 dark:focus:ring-primary-600"
      },
      secondary: {
        input: "text-secondary-600 focus:ring-secondary-500 dark:focus:ring-secondary-600"
      },
      gray: {
        input: "text-gray-600 focus:ring-gray-500 dark:focus:ring-gray-600"
      },
      red: { input: "text-red-600 focus:ring-red-500 dark:focus:ring-red-600" },
      orange: {
        input: "text-orange-500 focus:ring-orange-500 dark:focus:ring-orange-600"
      },
      amber: {
        input: "text-amber-600 focus:ring-amber-500 dark:focus:ring-amber-600"
      },
      yellow: {
        input: "text-yellow-400 focus:ring-yellow-500 dark:focus:ring-yellow-600"
      },
      lime: {
        input: "text-lime-600 focus:ring-lime-500 dark:focus:ring-lime-600"
      },
      green: {
        input: "text-green-600 focus:ring-green-500 dark:focus:ring-green-600"
      },
      emerald: {
        input: "text-emerald-600 focus:ring-emerald-500 dark:focus:ring-emerald-600"
      },
      teal: {
        input: "text-teal-600 focus:ring-teal-500 dark:focus:ring-teal-600"
      },
      cyan: {
        input: "text-cyan-600 focus:ring-cyan-500 dark:focus:ring-cyan-600"
      },
      sky: { input: "text-sky-600 focus:ring-sky-500 dark:focus:ring-sky-600" },
      blue: {
        input: "text-blue-600 focus:ring-blue-500 dark:focus:ring-blue-600"
      },
      indigo: {
        input: "text-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600"
      },
      violet: {
        input: "text-violet-600 focus:ring-violet-500 dark:focus:ring-violet-600"
      },
      purple: {
        input: "text-purple-600 focus:ring-purple-500 dark:focus:ring-purple-600"
      },
      fuchsia: {
        input: "text-fuchsia-600 focus:ring-fuchsia-500 dark:focus:ring-fuchsia-600"
      },
      pink: {
        input: "text-pink-600 focus:ring-pink-500 dark:focus:ring-pink-600"
      },
      rose: {
        input: "text-rose-600 focus:ring-rose-500 dark:focus:ring-rose-600"
      }
    },
    tinted: {
      true: { input: "dark:bg-gray-600 dark:border-gray-500" },
      false: { input: "dark:bg-gray-700 dark:border-gray-600" }
    },
    custom: {
      true: { input: "sr-only peer" },
      false: { input: "relative" }
    },
    inline: {
      true: { label: "inline-flex" },
      false: { label: "flex" }
    }
  },
  defaultVariants: {
    color: "primary"
  }
});
var radioButton = T({
  base: "",
  variants: {
    inline: {
      true: "inline-flex",
      false: "flex"
    }
  },
  defaultVariants: {
    inline: true
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/radio/Radio.svelte
Radio[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/radio/Radio.svelte";
var root_165 = add_locations(from_html(`<input/> <!>`, 1), Radio[FILENAME], [[21, 2]]);
function Radio($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Radio);
  const binding_group = [];
  let inline2 = prop($$props, "inline", 3, false), color = prop($$props, "color", 3, "primary"), custom = prop($$props, "custom", 3, false), group2 = prop($$props, "group", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "aria-describedby",
      "inline",
      "labelClass",
      "color",
      "custom",
      "group",
      "value",
      "class",
      "inputClass",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Radio",
    {
      inputClass: $$props.inputClass,
      labelClass: $$props.labelClass
    },
    { inputClass: "class", labelClass: "label" }
  );
  const styling = tag(user_derived(() => $$props.classes ?? { label: $$props.labelClass }), "styling");
  const theme = getTheme("radio");
  const $$d = tag(
    user_derived(() => radio({
      color: color(),
      tinted: !!getContext("background"),
      custom: custom(),
      inline: inline2()
    })),
    "[$derived object]"
  ), input2 = tag(user_derived(() => get($$d).input), "input"), label2 = tag(user_derived(() => get($$d).label), "label");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => get(label2)({ class: clsx_default(theme?.label, get(styling).label) }));
    add_svelte_meta(
      () => Label_default(node, {
        get class() {
          return get($0);
        },
        children: wrap_snippet(Radio, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_165();
          var input_1 = first_child(fragment_1);
          attribute_effect(
            input_1,
            ($02) => ({
              type: "radio",
              value: $$props.value,
              "aria-describedby": $$props["aria-describedby"],
              ...restProps,
              class: $02
            }),
            [
              () => get(input2)({
                class: clsx_default(theme?.input, $$props.class ?? $$props.inputClass)
              })
            ],
            void 0,
            void 0,
            true
          );
          var node_1 = sibling(input_1, 2);
          add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", Radio, 22, 2);
          bind_group(
            binding_group,
            [],
            input_1,
            () => {
              $$props.value;
              return group2();
            },
            group2
          );
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }),
      "component",
      Radio,
      20,
      0,
      { componentTag: "Label" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Radio = hmr(Radio, () => Radio[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Radio[HMR].source;
    set(Radio[HMR].source, module.default[HMR].original);
  });
}
var Radio_default = Radio;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/radio/RadioButton.svelte
RadioButton[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/radio/RadioButton.svelte";
var root_166 = add_locations(from_html(`<input/> <!>`, 1), RadioButton[FILENAME], [[17, 2]]);
function RadioButton($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, RadioButton);
  const binding_group = [];
  let group2 = prop($$props, "group", 15), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "group",
      "value",
      "inline",
      "pill",
      "outline",
      "size",
      "color",
      "shadow",
      "checkedClass",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("radioButton");
  let isChecked = tag(user_derived(() => equals($$props.value, group2())), "isChecked");
  let base = tag(
    user_derived(() => radioButton({
      inline: $$props.inline,
      class: clsx_default(get(isChecked) && $$props.checkedClass, theme, $$props.class)
    })),
    "base"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  add_svelte_meta(
    () => Button_default(node, {
      tag: "label",
      get pill() {
        return $$props.pill;
      },
      get outline() {
        return $$props.outline;
      },
      get size() {
        return $$props.size;
      },
      get color() {
        return $$props.color;
      },
      get shadow() {
        return $$props.shadow;
      },
      get class() {
        return get(base);
      },
      children: wrap_snippet(RadioButton, ($$anchor2, $$slotProps) => {
        var fragment_1 = root_166();
        var input2 = first_child(fragment_1);
        attribute_effect(
          input2,
          () => ({
            type: "radio",
            class: "sr-only",
            value: $$props.value,
            ...restProps
          }),
          void 0,
          void 0,
          void 0,
          true
        );
        var node_1 = sibling(input2, 2);
        add_svelte_meta(() => snippet(node_1, () => $$props.children ?? noop), "render", RadioButton, 18, 2);
        bind_group(
          binding_group,
          [],
          input2,
          () => {
            $$props.value;
            return group2();
          },
          group2
        );
        append($$anchor2, fragment_1);
      }),
      $$slots: { default: true }
    }),
    "component",
    RadioButton,
    16,
    0,
    { componentTag: "Button" }
  );
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  RadioButton = hmr(RadioButton, () => RadioButton[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = RadioButton[HMR].source;
    set(RadioButton[HMR].source, module.default[HMR].original);
  });
}
var RadioButton_default = RadioButton;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/range/theme.js
var range = T({
  base: "w-full bg-gray-200 rounded-lg cursor-pointer dark:bg-gray-700",
  variants: {
    size: {
      sm: "h-1 range-sm",
      md: "h-2",
      lg: "h-3 range-lg"
    },
    color: {
      // other colors do not work
      gray: "",
      red: "",
      blue: "",
      indigo: "",
      violet: "",
      purple: "",
      fuchsia: "",
      pink: "",
      rose: ""
    },
    appearance: {
      auto: "range accent-red-500",
      none: "appearance-none"
    }
  },
  compoundVariants: [
    {
      appearance: "auto",
      color: "gray",
      class: "accent-gray-500"
    },
    {
      appearance: "auto",
      color: "red",
      class: "accent-red-500"
    },
    {
      appearance: "auto",
      color: "blue",
      class: "accent-blue-500"
    },
    {
      appearance: "auto",
      color: "indigo",
      class: "accent-indigo-500"
    },
    {
      appearance: "auto",
      color: "violet",
      class: "accent-violet-500"
    },
    {
      appearance: "auto",
      color: "purple",
      class: "accent-purple-500"
    },
    {
      appearance: "auto",
      color: "fuchsia",
      class: "accent-fuchsia-500"
    },
    {
      appearance: "auto",
      color: "pink",
      class: "accent-pink-500"
    },
    {
      appearance: "auto",
      color: "rose",
      class: "accent-rose-500"
    }
  ]
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/range/Range.svelte
Range[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/range/Range.svelte";
var root106 = add_locations(from_html(`<input/>`), Range[FILENAME], [[14, 0]]);
function Range($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Range);
  let value = prop($$props, "value", 15), appearance = prop($$props, "appearance", 3, "none"), color = prop($$props, "color", 3, "blue"), size2 = prop($$props, "size", 3, "md"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "appearance",
      "color",
      "size",
      "inputClass",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("range");
  const inputCls = tag(
    user_derived(() => range({
      appearance: appearance(),
      color: color(),
      size: size2(),
      class: clsx_default(theme, $$props.inputClass, $$props.class)
    })),
    "inputCls"
  );
  var $$exports = { ...legacy_api() };
  var input2 = root106();
  attribute_effect(input2, () => ({ type: "range", ...restProps, class: get(inputCls) }), void 0, void 0, void 0, true);
  bind_value(input2, value);
  append($$anchor, input2);
  return pop($$exports);
}
if (import.meta.hot) {
  Range = hmr(Range, () => Range[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Range[HMR].source;
    set(Range[HMR].source, module.default[HMR].original);
  });
}
var Range_default = Range;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/search/theme.js
var search = T({
  slots: {
    base: "relative w-full",
    left: "absolute inset-y-0 start-0 flex items-center ps-3 pointer-events-none",
    icon: "text-gray-500 dark:text-gray-400",
    content: "absolute inset-y-0 end-0 flex items-center text-gray-500 dark:text-gray-400",
    input: "block w-full text-gray-900 border border-gray-300 rounded-lg bg-gray-50 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-50",
    close: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-black",
    svg: ""
  },
  variants: {
    size: {
      sm: {
        input: "text-xs p-2 ps-9 pe-9 ",
        icon: "w-3 h-3"
        // leftDiv: 'ps-2.5',
      },
      md: {
        input: "text-sm p-2.5 ps-10 pe-10",
        icon: "w-4 h-4"
        // leftDiv: 'ps-10',
      },
      lg: {
        input: "sm:text-base p-3 ps-11 pe-11",
        icon: "w-6 h-6"
        // leftDiv: 'ps-11',
      }
    }
  },
  defaultVariants: {
    size: "lg"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/search/Search.svelte
Search[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/search/Search.svelte";
var root_167 = add_locations(from_html(`<div><!></div>`), Search[FILENAME], [[37, 4]]);
var root107 = add_locations(from_html(`<div><div><svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m19 19-4-4m0-7A7 7 0 1 1 1 8a7 7 0 0 1 14 0Z"></path></svg></div> <input/> <!> <!></div>`), Search[FILENAME], [[29, 0, [[30, 2, [[31, 4, [[32, 6]]]]], [35, 2]]]]);
function Search($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Search);
  var $$ownership_validator = create_ownership_validator($$props);
  let placeholder = prop($$props, "placeholder", 3, "Search"), value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearable = prop($$props, "clearable", 3, false), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "inputClass",
      "size",
      "placeholder",
      "value",
      "elementRef",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "class",
      "classes"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Search",
    {
      inputClass: $$props.inputClass,
      clearableSvgClass: $$props.clearableSvgClass,
      clearableClass: $$props.clearableClass
    },
    {
      inputClass: "input",
      clearableSvgClass: "svg",
      clearableClass: "close"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      input: $$props.inputClass,
      svg: $$props.clearableSvgClass,
      close: $$props.clearableClass
    }),
    "styling"
  );
  const theme = getTheme("search");
  const $$d = tag(user_derived(() => search({ size: $$props.size })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), content = tag(user_derived(() => get($$d).content), "content"), icon = tag(user_derived(() => get($$d).icon), "icon"), close = tag(user_derived(() => get($$d).close), "close"), inputCls = tag(user_derived(() => get($$d).input), "inputCls"), left = tag(user_derived(() => get($$d).left), "left");
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 20, 6);
      value(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  createDismissableContext(clearAll);
  var $$exports = { ...legacy_api() };
  var div = root107();
  var div_1 = child(div);
  var svg = child(div_1);
  reset(div_1);
  var input2 = sibling(div_1, 2);
  attribute_effect(
    input2,
    ($0) => ({
      type: "search",
      class: $0,
      placeholder: placeholder(),
      required: true,
      ...restProps
    }),
    [
      () => get(inputCls)({ class: clsx_default(theme?.input, get(styling).input) })
    ],
    void 0,
    void 0,
    true
  );
  bind_this(input2, ($$value) => elementRef($$value), () => elementRef());
  var node = sibling(input2, 2);
  {
    var consequent = ($$anchor2) => {
      var div_2 = root_167();
      var node_1 = child(div_2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Search, 38, 6);
      reset(div_2);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(get(content)({ class: clsx_default(theme?.content, $$props.classes?.content) }))
      ]);
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Search,
      36,
      2
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_1 = ($$anchor2) => {
      var fragment = comment();
      var node_3 = first_child(fragment);
      {
        let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
        let $1 = user_derived(() => clsx_default(get(styling).svg));
        add_svelte_meta(
          () => CloseButton_default(node_3, {
            get class() {
              return get($0);
            },
            get color() {
              return clearableColor();
            },
            "aria-label": "Clear search value",
            get svgClass() {
              return get($1);
            }
          }),
          "component",
          Search,
          42,
          4,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && clearable()) $$render(consequent_1);
      }),
      "if",
      Search,
      41,
      2
    );
  }
  reset(div);
  template_effect(
    ($0, $1, $2) => {
      set_class(div, 1, $0);
      set_class(div_1, 1, $1);
      set_class(svg, 0, $2);
    },
    [
      () => clsx2(get(base)({ class: clsx_default(theme?.base, $$props.class) })),
      () => clsx2(get(left)({ class: clsx_default(theme?.left, $$props.classes?.left) })),
      () => clsx2(get(icon)({ class: clsx_default(theme?.icon, $$props.classes?.icon) }))
    ]
  );
  bind_value(input2, value);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Search = hmr(Search, () => Search[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Search[HMR].source;
    set(Search[HMR].source, module.default[HMR].original);
  });
}
var Search_default = Search;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/paragraph/theme.js
var paragraph = T({
  base: "text-gray-900 dark:text-white",
  variants: {
    size: {
      xs: "text-xs",
      sm: "text-sm",
      base: "text-base",
      lg: "text-lg",
      xl: "text-xl",
      "2xl": "text-2xl",
      "3xl": "text-3xl",
      "4xl": "text-4xl",
      "5xl": "text-5xl",
      "6xl": "text-6xl",
      "7xl": "text-7xl",
      "8xl": "text-8xl",
      "9xl": "text-9xl"
    },
    weight: {
      thin: "font-thin",
      extralight: "font-extralight",
      light: "font-light",
      normal: "font-normal",
      medium: "font-medium",
      semibold: "font-semibold",
      bold: "font-bold",
      extrabold: "font-extrabold",
      black: "font-black"
    },
    space: {
      tighter: "tracking-tighter",
      tight: "tracking-tight",
      normal: "tracking-normal",
      wide: "tracking-wide",
      wider: "tracking-wider",
      widest: "tracking-widest"
    },
    height: {
      none: "leading-none",
      tight: "leading-tight",
      snug: "leading-snug",
      normal: "leading-normal",
      relaxed: "leading-relaxed",
      loose: "leading-loose",
      "3": "leading-3",
      "4": "leading-4",
      "5": "leading-5",
      "6": "leading-6",
      "7": "leading-7",
      "8": "leading-8",
      "9": "leading-9",
      "10": "leading-10"
    },
    align: {
      left: "text-left",
      center: "text-center",
      right: "text-right"
    },
    whitespace: {
      normal: "whitespace-normal",
      nowrap: "whitespace-nowrap",
      pre: "whitespace-pre",
      preline: "whitespace-pre-line",
      prewrap: "whitespace-pre-wrap"
    },
    italic: {
      true: "italic"
    },
    firstUpper: {
      true: "first-line:uppercase first-line:tracking-widest first-letter:text-7xl first-letter:font-bold first-letter:text-gray-900 dark:first-letter:text-gray-100 first-letter:me-3 first-letter:float-left",
      false: ""
    },
    justify: {
      true: "text-justify",
      false: ""
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/paragraph/P.svelte
P[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/paragraph/P.svelte";
var root108 = add_locations(from_html(`<p><!></p>`), P[FILENAME], [[14, 0]]);
function P($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, P);
  let className = prop($$props, "class", 3, "text-gray-900 dark:text-white"), height = prop($$props, "height", 3, "normal"), align = prop($$props, "align", 3, "left"), justify = prop($$props, "justify", 3, false), firstUpper = prop($$props, "firstUpper", 3, false), whitespace = prop($$props, "whitespace", 3, "normal"), size2 = prop($$props, "size", 3, "base"), space = prop($$props, "space", 3, "normal"), weight = prop($$props, "weight", 3, "normal"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "height",
      "align",
      "justify",
      "italic",
      "firstUpper",
      "whitespace",
      "size",
      "space",
      "weight"
    ],
    "restProps"
  );
  const theme = getTheme("paragraph");
  let classP = tag(
    user_derived(() => paragraph({
      height: height(),
      size: size2(),
      weight: weight(),
      space: space(),
      align: align(),
      justify: justify(),
      italic: $$props.italic,
      firstUpper: firstUpper(),
      whitespace: whitespace(),
      class: clsx_default(theme, className())
    })),
    "classP"
  );
  var $$exports = { ...legacy_api() };
  var p2 = root108();
  attribute_effect(p2, () => ({ ...restProps, class: get(classP) }));
  var node = child(p2);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", P, 15, 2);
  reset(p2);
  append($$anchor, p2);
  return pop($$exports);
}
if (import.meta.hot) {
  P = hmr(P, () => P[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = P[HMR].source;
    set(P[HMR].source, module.default[HMR].original);
  });
}
var P_default = P;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/tags/theme.js
var tags = T({
  slots: {
    base: "border border-gray-300 dark:border-gray-600 rounded-lg flex focus-within:ring-primary-500 focus-within:ring-1 focus-within:border-primary-500 scrollbar-hidden bg-gray-50 dark:bg-gray-700",
    tag: "flex items-center rounded-lg bg-gray-100 text-gray-900 border border-gray-300 my-1 ml-1 px-2 text-sm max-w-full min-w-fit",
    span: "items-center",
    close: "my-auto ml-1",
    input: "block text-sm m-2.5 p-0 bg-transparent border-none outline-none text-gray-900 h-min w-full min-w-fit focus:ring-0 placeholder-gray-400 dark:text-white disabled:cursor-not-allowed disabled:opacity-50",
    info: "mt-1 text-sm text-blue-500 dark:text-blue-400",
    warning: "mt-1 text-sm text-yellow-400 dark:text-yellow-300",
    error: "mt-1 text-sm text-red-500 dark:text-red-400"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/tags/Tags.svelte
Tags[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/tags/Tags.svelte";
var root_99 = add_locations(from_html(`<div><span> </span> <!></div>`), Tags[FILENAME], [[159, 4, [[160, 6]]]]);
var root_1210 = add_locations(from_html(`<li><button type="button" class="block w-full cursor-pointer px-3 py-2 text-left hover:bg-gray-100"> </button></li>`), Tags[FILENAME], [[173, 12, [[174, 14]]]]);
var root_1114 = add_locations(from_html(`<ul class="z-10 max-h-48 w-full overflow-auto rounded border border-gray-300 bg-white shadow" style="position: absolute;"></ul>`), Tags[FILENAME], [[171, 8]]);
var root109 = add_locations(from_html(`<!> <!> <div><!> <div class="relative w-full"><input/> <!></div></div>`, 1), Tags[FILENAME], [[152, 0, [[166, 2, [[167, 4]]]]]]);
function Tags($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Tags);
  let value = prop($$props, "value", 31, () => tag_proxy(proxy([]), "value")), placeholder = prop($$props, "placeholder", 3, "Enter tags"), closeBtnSize = prop($$props, "closeBtnSize", 3, "xs"), unique = prop($$props, "unique", 3, false), availableTags = prop($$props, "availableTags", 19, () => []), showHelper = prop($$props, "showHelper", 3, false), showAvailableTags = prop($$props, "showAvailableTags", 3, false), allowNewTags = prop($$props, "allowNewTags", 3, true), inputProps = prop($$props, "inputProps", 19, () => ({})), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "value",
      "placeholder",
      "class",
      "classes",
      "itemClass",
      "spanClass",
      "closeClass",
      "inputClass",
      "closeBtnSize",
      "unique",
      "availableTags",
      "showHelper",
      "showAvailableTags",
      "allowNewTags",
      "inputProps",
      "disabled"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Tags",
    {
      itemClass: $$props.itemClass,
      spanClass: $$props.spanClass,
      closeClass: $$props.closeClass,
      inputClass: $$props.inputClass
    },
    {
      itemClass: "tag",
      spanClass: "span",
      closeClass: "close",
      inputClass: "input"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      tag: $$props.itemClass,
      span: $$props.spanClass,
      close: $$props.closeClass,
      input: $$props.inputClass
    }),
    "styling"
  );
  const theme = getTheme("tags");
  const $$d = tag(user_derived(tags), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), tagCls = tag(user_derived(() => get($$d).tag), "tagCls"), spanCls = tag(user_derived(() => get($$d).span), "spanCls"), close = tag(user_derived(() => get($$d).close), "close"), inputCls = tag(user_derived(() => get($$d).input), "inputCls"), info = tag(user_derived(() => get($$d).info), "info"), warning = tag(user_derived(() => get($$d).warning), "warning"), error = tag(user_derived(() => get($$d).error), "error");
  let contents = tag(state(""), "contents");
  let errorMessage = tag(state(""), "errorMessage");
  let inputElement;
  let inputContainer;
  let dropdownElement = null;
  let cleanupFloating;
  function updateDropdownPosition() {
    if (!inputContainer || !dropdownElement) return;
    cleanupFloating?.();
    cleanupFloating = autoUpdate(inputContainer, dropdownElement, async () => {
      const { x: x2, y: y2 } = (await track_reactivity_loss(computePosition2(inputContainer, dropdownElement, {
        placement: "bottom-start",
        middleware: [offset2(4), flip2(), shift2()]
      })))();
      Object.assign(dropdownElement.style, { position: "absolute", left: `${x2}px`, top: `${y2}px` });
    });
  }
  const checkDropdownPosition = () => {
    if (!inputContainer) return;
  };
  const handleKeys = (event2) => {
    if (strict_equals(event2.key, "Enter")) {
      event2.preventDefault();
      const newTag = get(contents).trim();
      if (strict_equals(newTag.length, 0)) return;
      if (!allowNewTags() && strict_equals(availableTags().length, 0)) {
        set(errorMessage, "No available tags provided. Please add available tags or enable allowNewTags.");
        return;
      }
      const isInAvailable = strict_equals(availableTags().length, 0) || availableTags().some((tag2) => strict_equals(tag2.toLowerCase(), newTag.toLowerCase()));
      const alreadyExists = value().some((tag2) => strict_equals(tag2.toLowerCase(), newTag.toLowerCase()));
      if (!allowNewTags() && !isInAvailable) {
        set(errorMessage, `"${newTag}" is not in the available tags.`);
        return;
      }
      if (unique() && alreadyExists) {
        set(errorMessage, `"${newTag}" is already added.`);
        return;
      }
      value([...value(), newTag]);
      set(contents, "");
      if (inputElement) {
        inputElement.value = "";
      }
      set(errorMessage, "");
    }
    if (strict_equals(event2.key, "Backspace") && strict_equals(get(contents).length, 0)) {
      event2.preventDefault();
      const lastTag = value()[value().length - 1] ?? "";
      value(value().slice(0, -1));
      set(contents, lastTag, true);
      if (inputElement) {
        inputElement.value = lastTag;
      }
      set(errorMessage, "");
    }
  };
  const handleInput = () => {
    checkDropdownPosition();
  };
  const deleteField = (index2) => {
    value(value().filter((_, i2) => strict_equals(i2, index2, false)));
    set(errorMessage, "");
  };
  user_effect(() => {
    const trimmed = get(contents).trim();
    const shouldShow = availableTags().length > 0 && strict_equals(trimmed, "", false) && inputContainer && dropdownElement;
    if (!shouldShow) {
      cleanupFloating?.();
      return;
    }
    const filtered = availableTags().filter((tag2) => tag2.toLowerCase().includes(trimmed.toLowerCase()) && (!unique() || !value().some((t) => strict_equals(t.toLowerCase(), tag2.toLowerCase()))));
    if (filtered.length > 0) {
      updateDropdownPosition();
    } else {
      cleanupFloating?.();
    }
  });
  onDestroy(() => {
    cleanupFloating?.();
  });
  var $$exports = { ...legacy_api() };
  var fragment = root109();
  event("scroll", $window, checkDropdownPosition);
  event("resize", $window, checkDropdownPosition);
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        let $0 = user_derived(() => clsx_default(get(info)(), $$props.classes?.info));
        add_svelte_meta(
          () => P_default(node_1, {
            get class() {
              return get($0);
            },
            children: wrap_snippet(Tags, ($$anchor3, $$slotProps) => {
              next();
              var text2 = text();
              template_effect(($02) => set_text(text2, `Available tags: ${$02 ?? ""}`), [() => availableTags().join(", ")]);
              append($$anchor3, text2);
            }),
            $$slots: { default: true }
          }),
          "component",
          Tags,
          141,
          2,
          { componentTag: "P" }
        );
      }
      append($$anchor2, fragment_1);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (showAvailableTags() && availableTags().length > 0) $$render(consequent);
      }),
      "if",
      Tags,
      140,
      0
    );
  }
  var node_2 = sibling(node, 2);
  {
    var consequent_3 = ($$anchor2) => {
      var fragment_3 = comment();
      var node_3 = first_child(fragment_3);
      {
        var consequent_1 = ($$anchor3) => {
          var fragment_4 = comment();
          var node_4 = first_child(fragment_4);
          {
            let $0 = user_derived(() => clsx_default(get(warning)(), $$props.classes?.warning));
            add_svelte_meta(
              () => P_default(node_4, {
                get class() {
                  return get($0);
                },
                children: wrap_snippet(Tags, ($$anchor4, $$slotProps) => {
                  next();
                  var text_1 = text();
                  template_effect(($02) => set_text(text_1, `"${$02 ?? ""}" is already added.`), [() => get(contents).trim()]);
                  append($$anchor4, text_1);
                }),
                $$slots: { default: true }
              }),
              "component",
              Tags,
              146,
              4,
              { componentTag: "P" }
            );
          }
          append($$anchor3, fragment_4);
        };
        var alternate = ($$anchor3) => {
          var fragment_6 = comment();
          var node_5 = first_child(fragment_6);
          {
            var consequent_2 = ($$anchor4) => {
              var fragment_7 = comment();
              var node_6 = first_child(fragment_7);
              {
                let $0 = user_derived(() => clsx_default(get(error)(), $$props.classes?.error));
                add_svelte_meta(
                  () => P_default(node_6, {
                    get class() {
                      return get($0);
                    },
                    children: wrap_snippet(Tags, ($$anchor5, $$slotProps) => {
                      next();
                      var text_2 = text();
                      template_effect(($02) => set_text(text_2, `"${$02 ?? ""}" is not in the available tags.`), [() => get(contents).trim()]);
                      append($$anchor5, text_2);
                    }),
                    $$slots: { default: true }
                  }),
                  "component",
                  Tags,
                  148,
                  4,
                  { componentTag: "P" }
                );
              }
              append($$anchor4, fragment_7);
            };
            add_svelte_meta(
              () => if_block(
                node_5,
                ($$render) => {
                  if (availableTags().length > 0 && !allowNewTags() && !availableTags().some((tag2) => strict_equals(tag2.toLowerCase(), get(contents).trim().toLowerCase()))) $$render(consequent_2);
                },
                true
              ),
              "if",
              Tags,
              147,
              2
            );
          }
          append($$anchor3, fragment_6);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if (unique() && value().some((tag2) => strict_equals(tag2.toLowerCase(), get(contents).trim().toLowerCase()))) $$render(consequent_1);
            else $$render(alternate, false);
          }),
          "if",
          Tags,
          145,
          2
        );
      }
      append($$anchor2, fragment_3);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if (showHelper() && get(contents).trim().length > 0) $$render(consequent_3);
      }),
      "if",
      Tags,
      144,
      0
    );
  }
  var div = sibling(node_2, 2);
  attribute_effect(div, ($0) => ({ ...restProps, class: $0 }), [
    () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
  ]);
  var node_7 = child(div);
  add_svelte_meta(
    () => each(node_7, 17, value, index, ($$anchor2, tag2, index2) => {
      var div_1 = root_99();
      var span2 = child(div_1);
      var text_3 = child(span2, true);
      reset(span2);
      var node_8 = sibling(span2, 2);
      {
        let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
        add_svelte_meta(
          () => CloseButton_default(node_8, {
            get disabled() {
              return $$props.disabled;
            },
            get size() {
              return closeBtnSize();
            },
            get class() {
              return get($0);
            },
            onclick: () => deleteField(index2)
          }),
          "component",
          Tags,
          163,
          6,
          { componentTag: "CloseButton" }
        );
      }
      reset(div_1);
      template_effect(
        ($0, $1) => {
          set_class(div_1, 1, $0);
          set_class(span2, 1, $1);
          set_text(text_3, get(tag2));
        },
        [
          () => clsx2(get(tagCls)({ class: clsx_default(theme?.tag, get(styling).tag) })),
          () => clsx2(get(spanCls)({ class: clsx_default(theme?.span, get(styling).span) }))
        ]
      );
      append($$anchor2, div_1);
    }),
    "each",
    Tags,
    158,
    2
  );
  var div_2 = sibling(node_7, 2);
  var input2 = child(div_2);
  attribute_effect(
    input2,
    ($0) => ({
      ...inputProps(),
      disabled: $$props.disabled,
      onkeydown: handleKeys,
      oninput: handleInput,
      placeholder: strict_equals(value().length, 0) ? placeholder() : "",
      type: "text",
      autocomplete: "off",
      class: $0
    }),
    [() => get(inputCls)({ class: clsx_default(get(styling).input) })],
    void 0,
    void 0,
    true
  );
  bind_this(input2, ($$value) => inputElement = $$value, () => inputElement);
  var node_9 = sibling(input2, 2);
  {
    var consequent_5 = ($$anchor2) => {
      const filteredSuggestions = tag(user_derived(() => availableTags().filter((tag2) => tag2.toLowerCase().includes(get(contents).trim().toLowerCase()) && (!unique() || !value().some((t) => strict_equals(t.toLowerCase(), tag2.toLowerCase()))))), "filteredSuggestions");
      get(filteredSuggestions);
      var fragment_9 = comment();
      var node_10 = first_child(fragment_9);
      {
        var consequent_4 = ($$anchor3) => {
          var ul = root_1114();
          add_svelte_meta(
            () => each(ul, 21, () => get(filteredSuggestions), index, ($$anchor4, suggestion) => {
              var li = root_1210();
              var button2 = child(li);
              button2.__click = () => {
                value([...value(), get(suggestion)]);
                set(contents, "");
                if (inputElement) {
                  inputElement.value = "";
                }
              };
              var text_4 = child(button2, true);
              reset(button2);
              reset(li);
              template_effect(() => set_text(text_4, get(suggestion)));
              append($$anchor4, li);
            }),
            "each",
            Tags,
            172,
            10
          );
          reset(ul);
          bind_this(ul, ($$value) => dropdownElement = $$value, () => dropdownElement);
          append($$anchor3, ul);
        };
        add_svelte_meta(
          () => if_block(node_10, ($$render) => {
            if (get(filteredSuggestions).length > 0) $$render(consequent_4);
          }),
          "if",
          Tags,
          170,
          6
        );
      }
      append($$anchor2, fragment_9);
    };
    add_svelte_meta(
      () => if_block(node_9, ($$render) => {
        if (availableTags().length > 0 && strict_equals(get(contents).trim(), "", false)) $$render(consequent_5);
      }),
      "if",
      Tags,
      168,
      4
    );
  }
  reset(div_2);
  bind_this(div_2, ($$value) => inputContainer = $$value, () => inputContainer);
  reset(div);
  bind_value(input2, () => get(contents), ($$value) => set(contents, $$value));
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Tags = hmr(Tags, () => Tags[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Tags[HMR].source;
    set(Tags[HMR].source, module.default[HMR].original);
  });
}
var Tags_default = Tags;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/textarea/theme.js
var textarea = T({
  slots: {
    div: "relative",
    base: "block w-full text-sm border-0 px-0 bg-inherit dark:bg-inherit focus:outline-hidden focus:ring-0 disabled:cursor-not-allowed disabled:opacity-50",
    wrapper: "text-sm rounded-lg bg-gray-50 dark:bg-gray-600 text-gray-900 dark:placeholder-gray-400 dark:text-white border border-gray-200 dark:border-gray-500 disabled:cursor-not-allowed disabled:opacity-50",
    inner: "py-2 px-4 bg-white dark:bg-gray-800",
    header: "py-2 px-3 border-gray-200 dark:border-gray-500",
    footer: "py-2 px-3 border-gray-200 dark:border-gray-500",
    addon: "absolute top-2 right-2 z-10",
    close: "absolute right-2 top-5 -translate-y-1/2 text-gray-400 hover:text-black",
    svg: ""
  },
  variants: {
    wrapped: {
      false: { wrapper: "p-2.5 text-sm focus:outline-hidden focus:ring-primary-500 border-gray-300 focus:border-primary-500 dark:focus:ring-primary-500 dark:focus:border-primary-500 disabled:cursor-not-allowed disabled:opacity-50" }
    },
    hasHeader: {
      true: {
        header: "border-b"
      },
      false: {
        inner: "rounded-t-lg"
      }
    },
    hasFooter: {
      true: {
        footer: "border-t"
      },
      false: {
        inner: "rounded-b-lg"
      }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/textarea/Textarea.svelte
Textarea[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/textarea/Textarea.svelte";
var root_168 = add_locations(from_html(`<textarea></textarea>`), Textarea[FILENAME], [[47, 4]]);
var root_330 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[51, 8]]);
var root_427 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[57, 10]]);
var root_514 = add_locations(from_html(`<div><!></div>`), Textarea[FILENAME], [[64, 8]]);
var root_235 = add_locations(from_html(`<div><!> <div><!> <textarea></textarea></div> <!></div>`), Textarea[FILENAME], [[49, 4, [[55, 6, [[61, 8]]]]]]);
var root110 = add_locations(from_html(`<div><!> <!></div>`), Textarea[FILENAME], [[45, 0]]);
function Textarea($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Textarea);
  var $$ownership_validator = create_ownership_validator($$props);
  let value = prop($$props, "value", 15), elementRef = prop($$props, "elementRef", 15), clearableColor = prop($$props, "clearableColor", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "header",
      "footer",
      "addon",
      "value",
      "elementRef",
      "divClass",
      "innerClass",
      "headerClass",
      "footerClass",
      "addonClass",
      "disabled",
      "class",
      "classes",
      "clearable",
      "clearableSvgClass",
      "clearableColor",
      "clearableClass",
      "clearableOnClick",
      "textareaClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Textarea",
    {
      divClass: $$props.divClass,
      innerClass: $$props.innerClass,
      headerClass: $$props.headerClass,
      footerClass: $$props.footerClass,
      addonClass: $$props.addonClass,
      textareaClass: $$props.textareaClass,
      clearableClass: $$props.clearableClass,
      clearableSvgClass: $$props.clearableSvgClass
    },
    {
      divClass: "div",
      innerClass: "inner",
      headerClass: "header",
      footerClass: "footer",
      addonClass: "addon",
      textareaClass: "class",
      clearableClass: "close",
      clearableSvgClass: "svg"
    }
  );
  const styling = tag(
    user_derived(() => $$props.classes ?? {
      div: $$props.divClass,
      inner: $$props.innerClass,
      header: $$props.headerClass,
      footer: $$props.footerClass,
      addon: $$props.addonClass,
      textarea: $$props.textareaClass,
      close: $$props.clearableClass,
      svg: $$props.clearableSvgClass
    }),
    "styling"
  );
  const theme = getTheme("textarea");
  let hasHeader = tag(user_derived(() => !!$$props.header), "hasHeader");
  let hasFooter = tag(user_derived(() => !!$$props.footer), "hasFooter");
  let hasAddon = tag(user_derived(() => !!$$props.addon), "hasAddon");
  let wrapped = tag(user_derived(() => get(hasHeader) || get(hasFooter) || get(hasAddon)), "wrapped");
  const $$d = tag(
    user_derived(() => textarea({
      wrapped: get(wrapped),
      hasHeader: get(hasHeader),
      hasFooter: get(hasFooter)
    })),
    "[$derived object]"
  ), div = tag(user_derived(() => get($$d).div), "div"), base = tag(user_derived(() => get($$d).base), "base"), wrapper = tag(user_derived(() => get($$d).wrapper), "wrapper"), inner = tag(user_derived(() => get($$d).inner), "inner"), headerCls = tag(user_derived(() => get($$d).header), "headerCls"), footerCls = tag(user_derived(() => get($$d).footer), "footerCls"), addonCls = tag(user_derived(() => get($$d).addon), "addonCls"), close = tag(user_derived(() => get($$d).close), "close");
  const clearAll = () => {
    if (elementRef()) {
      $$ownership_validator.mutation("elementRef", ["elementRef", "value"], elementRef(elementRef().value = "", true), 36, 6);
      value(void 0);
    }
    if ($$props.clearableOnClick) $$props.clearableOnClick();
  };
  createDismissableContext(clearAll);
  var $$exports = { ...legacy_api() };
  var div_1 = root110();
  var node = child(div_1);
  {
    var consequent = ($$anchor2) => {
      var textarea_1 = root_168();
      remove_textarea_child(textarea_1);
      attribute_effect(textarea_1, ($0) => ({ disabled: $$props.disabled, ...restProps, class: $0 }), [
        () => get(wrapper)({ class: clsx_default($$props.class, $$props.classes?.wrapper) })
      ]);
      bind_this(textarea_1, ($$value) => elementRef($$value), () => elementRef());
      bind_value(textarea_1, value);
      append($$anchor2, textarea_1);
    };
    var alternate = ($$anchor2) => {
      var div_2 = root_235();
      var node_1 = child(div_2);
      {
        var consequent_1 = ($$anchor3) => {
          var div_3 = root_330();
          var node_2 = child(div_3);
          add_svelte_meta(() => snippet(node_2, () => $$props.header), "render", Textarea, 52, 10);
          reset(div_3);
          template_effect(($0) => set_class(div_3, 1, $0), [
            () => clsx2(get(headerCls)({ class: clsx_default(theme?.header, get(styling).header) }))
          ]);
          append($$anchor3, div_3);
        };
        add_svelte_meta(
          () => if_block(node_1, ($$render) => {
            if ($$props.header) $$render(consequent_1);
          }),
          "if",
          Textarea,
          50,
          6
        );
      }
      var div_4 = sibling(node_1, 2);
      var node_3 = child(div_4);
      {
        var consequent_2 = ($$anchor3) => {
          var div_5 = root_427();
          var node_4 = child(div_5);
          add_svelte_meta(() => snippet(node_4, () => $$props.addon), "render", Textarea, 58, 12);
          reset(div_5);
          template_effect(($0) => set_class(div_5, 1, $0), [
            () => clsx2(get(addonCls)({ class: clsx_default(theme?.addon, get(styling).addon) }))
          ]);
          append($$anchor3, div_5);
        };
        add_svelte_meta(
          () => if_block(node_3, ($$render) => {
            if ($$props.addon) $$render(consequent_2);
          }),
          "if",
          Textarea,
          56,
          8
        );
      }
      var textarea_2 = sibling(node_3, 2);
      remove_textarea_child(textarea_2);
      attribute_effect(textarea_2, ($0) => ({ disabled: $$props.disabled, ...restProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
      ]);
      bind_this(textarea_2, ($$value) => elementRef($$value), () => elementRef());
      reset(div_4);
      var node_5 = sibling(div_4, 2);
      {
        var consequent_3 = ($$anchor3) => {
          var div_6 = root_514();
          var node_6 = child(div_6);
          add_svelte_meta(() => snippet(node_6, () => $$props.footer), "render", Textarea, 65, 10);
          reset(div_6);
          template_effect(($0) => set_class(div_6, 1, $0), [
            () => clsx2(get(footerCls)({ class: clsx_default(theme?.footer, get(styling).footer) }))
          ]);
          append($$anchor3, div_6);
        };
        add_svelte_meta(
          () => if_block(node_5, ($$render) => {
            if ($$props.footer) $$render(consequent_3);
          }),
          "if",
          Textarea,
          63,
          6
        );
      }
      reset(div_2);
      template_effect(
        ($0, $1) => {
          set_class(div_2, 1, $0);
          set_class(div_4, 1, $1);
        },
        [
          () => clsx2(get(wrapper)({ class: clsx_default(theme?.wrapper, $$props.classes?.wrapper) })),
          () => clsx2(get(inner)({ class: clsx_default(theme?.inner, get(styling).inner) }))
        ]
      );
      bind_value(textarea_2, value);
      append($$anchor2, div_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (!get(wrapped)) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Textarea,
      46,
      2
    );
  }
  var node_7 = sibling(node, 2);
  {
    var consequent_4 = ($$anchor2) => {
      var fragment = comment();
      var node_8 = first_child(fragment);
      {
        let $0 = user_derived(() => get(close)({ class: clsx_default(theme?.close, get(styling).close) }));
        let $1 = user_derived(() => clsx_default(get(styling).svg));
        add_svelte_meta(
          () => CloseButton_default(node_8, {
            get class() {
              return get($0);
            },
            get color() {
              return clearableColor();
            },
            "aria-label": "Clear search value",
            get svgClass() {
              return get($1);
            }
          }),
          "component",
          Textarea,
          71,
          4,
          { componentTag: "CloseButton" }
        );
      }
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node_7, ($$render) => {
        if (strict_equals(value(), void 0, false) && strict_equals(value(), "", false) && $$props.clearable) $$render(consequent_4);
      }),
      "if",
      Textarea,
      70,
      2
    );
  }
  reset(div_1);
  template_effect(($0) => set_class(div_1, 1, $0), [
    () => clsx2(get(div)({ class: clsx_default(theme?.div, get(styling).div) }))
  ]);
  append($$anchor, div_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Textarea = hmr(Textarea, () => Textarea[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Textarea[HMR].source;
    set(Textarea[HMR].source, module.default[HMR].original);
  });
}
var Textarea_default = Textarea;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/toggle/theme.js
var toggle = T({
  slots: {
    span: "me-3 shrink-0 bg-gray-200 rounded-full peer-focus:ring-4 peer-checked:after:translate-x-full peer-checked:rtl:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:bg-white after:border-gray-300 after:border after:rounded-full after:transition-all dark:bg-gray-600 dark:border-gray-500 relative ",
    label: "flex items-center",
    input: "w-4 h-4 bg-gray-100 border-gray-300 dark:ring-offset-gray-800 focus:ring-2 rounded-sm dark:bg-gray-700 dark:border-gray-600 sr-only peer"
  },
  variants: {
    disabled: {
      true: { label: "cursor-not-allowed opacity-50" }
    },
    checked: {
      true: "",
      false: ""
    },
    off_state_label: {
      true: { span: "ms-3" }
    },
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: {
        span: "peer-focus:ring-primary-300 dark:peer-focus:ring-primary-800 peer-checked:bg-primary-600"
      },
      secondary: {
        span: "peer-focus:ring-secondary-300 dark:peer-focus:ring-secondary-800 peer-checked:bg-secondary-600"
      },
      gray: {
        span: "peer-focus:ring-gray-300 dark:peer-focus:ring-gray-800 peer-checked:bg-gray-500"
      },
      red: {
        span: "peer-focus:ring-red-300 dark:peer-focus:ring-red-800 peer-checked:bg-red-600"
      },
      orange: {
        span: "peer-focus:ring-orange-300 dark:peer-focus:ring-orange-800 peer-checked:bg-orange-500"
      },
      amber: {
        span: "peer-focus:ring-amber-300 dark:peer-focus:ring-amber-800 peer-checked:bg-amber-600"
      },
      yellow: {
        span: "peer-focus:ring-yellow-300 dark:peer-focus:ring-yellow-800 peer-checked:bg-yellow-400"
      },
      lime: {
        span: "peer-focus:ring-lime-300 dark:peer-focus:ring-lime-800 peer-checked:bg-lime-500"
      },
      green: {
        span: "peer-focus:ring-green-300 dark:peer-focus:ring-green-800 peer-checked:bg-green-600"
      },
      emerald: {
        span: "peer-focus:ring-emerald-300 dark:peer-focus:ring-emerald-800 peer-checked:bg-emerald-600"
      },
      teal: {
        span: "peer-focus:ring-teal-300 dark:peer-focus:ring-teal-800 peer-checked:bg-teal-600"
      },
      cyan: {
        span: "peer-focus:ring-cyan-300 dark:peer-focus:ring-cyan-800 peer-checked:bg-cyan-600"
      },
      sky: {
        span: "peer-focus:ring-sky-300 dark:peer-focus:ring-sky-800 peer-checked:bg-sky-600"
      },
      blue: {
        span: "peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:bg-blue-600"
      },
      indigo: {
        span: "peer-focus:ring-indigo-300 dark:peer-focus:ring-indigo-800 peer-checked:bg-indigo-600"
      },
      violet: {
        span: "peer-focus:ring-violet-300 dark:peer-focus:ring-violet-800 peer-checked:bg-violet-600"
      },
      purple: {
        span: "peer-focus:ring-purple-300 dark:peer-focus:ring-purple-800 peer-checked:bg-purple-600"
      },
      fuchsia: {
        span: "peer-focus:ring-fuchsia-300 dark:peer-focus:ring-fuchsia-800 peer-checked:bg-fuchsia-600"
      },
      pink: {
        span: "peer-focus:ring-pink-300 dark:peer-focus:ring-pink-800 peer-checked:bg-pink-600"
      },
      rose: {
        span: "peer-focus:ring-rose-300 dark:peer-focus:ring-rose-800 peer-checked:bg-rose-600"
      }
    },
    size: {
      small: {
        span: "w-9 h-5 after:top-[2px] after:start-[2px] after:h-4 after:w-4"
      },
      default: {
        span: "w-11 h-6 after:top-0.5 after:start-[2px] after:h-5 after:w-5"
      },
      large: {
        span: "w-14 h-7 after:top-0.5 after:start-[4px]  after:h-6 after:w-6"
      }
    }
  },
  defaultVariants: {
    color: "primary"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/toggle/Toggle.svelte
Toggle[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/toggle/Toggle.svelte";
var root_169 = add_locations(from_html(`<!> <input/> <span></span> <!>`, 1), Toggle[FILENAME], [[22, 2], [23, 2]]);
function Toggle($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Toggle);
  let size2 = prop($$props, "size", 3, "default"), checked = prop($$props, "checked", 15), color = prop($$props, "color", 3, "primary"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "size",
      "value",
      "checked",
      "disabled",
      "color",
      "class",
      "classes",
      "inputClass",
      "spanClass",
      "offLabel"
    ],
    "restProps"
  );
  warnThemeDeprecation("Toggle", { inputClass: $$props.inputClass, spanClass: $$props.spanClass }, { inputClass: "input", spanClass: "span" });
  const styling = tag(user_derived(() => $$props.classes ?? { input: $$props.inputClass, span: $$props.spanClass }), "styling");
  const theme = getTheme("toggle");
  const $$d = tag(
    user_derived(() => toggle({
      color: color(),
      checked: checked(),
      size: size2(),
      disabled: $$props.disabled,
      off_state_label: !!$$props.offLabel
    })),
    "[$derived object]"
  ), input2 = tag(user_derived(() => get($$d).input), "input"), label2 = tag(user_derived(() => get($$d).label), "label"), span2 = tag(user_derived(() => get($$d).span), "span");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    let $0 = user_derived(() => get(label2)({ class: clsx_default(theme?.label, $$props.class) }));
    add_svelte_meta(
      () => Label_default(node, {
        get class() {
          return get($0);
        },
        children: wrap_snippet(Toggle, ($$anchor2, $$slotProps) => {
          var fragment_1 = root_169();
          var node_1 = first_child(fragment_1);
          {
            var consequent = ($$anchor3) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              add_svelte_meta(() => snippet(node_2, () => $$props.offLabel), "render", Toggle, 20, 4);
              append($$anchor3, fragment_2);
            };
            add_svelte_meta(
              () => if_block(node_1, ($$render) => {
                if ($$props.offLabel) $$render(consequent);
              }),
              "if",
              Toggle,
              19,
              2
            );
          }
          var input_1 = sibling(node_1, 2);
          attribute_effect(
            input_1,
            ($02) => ({
              type: "checkbox",
              value: $$props.value,
              ...restProps,
              disabled: $$props.disabled,
              class: $02
            }),
            [
              () => get(input2)({ class: clsx_default(theme?.input, get(styling).input) })
            ],
            void 0,
            void 0,
            true
          );
          var span_1 = sibling(input_1, 2);
          var node_3 = sibling(span_1, 2);
          {
            var consequent_1 = ($$anchor3) => {
              var fragment_3 = comment();
              var node_4 = first_child(fragment_3);
              add_svelte_meta(() => snippet(node_4, () => $$props.children), "render", Toggle, 25, 4);
              append($$anchor3, fragment_3);
            };
            add_svelte_meta(
              () => if_block(node_3, ($$render) => {
                if ($$props.children) $$render(consequent_1);
              }),
              "if",
              Toggle,
              24,
              2
            );
          }
          template_effect(($02) => set_class(span_1, 1, $02), [
            () => clsx2(get(span2)({ class: clsx_default(theme?.span, get(styling).span) }))
          ]);
          bind_checked(input_1, checked);
          append($$anchor2, fragment_1);
        }),
        $$slots: { default: true }
      }),
      "component",
      Toggle,
      18,
      0,
      { componentTag: "Label" }
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Toggle = hmr(Toggle, () => Toggle[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Toggle[HMR].source;
    set(Toggle[HMR].source, module.default[HMR].original);
  });
}
var Toggle_default = Toggle;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/timepicker/theme.js
var timepicker = T({
  slots: {
    buttonGroup: "inline-flex rounded-lg shadow-sm",
    input: "block disabled:cursor-not-allowed disabled:opacity-50 rtl:text-right focus:ring-0 focus:outline-none",
    inputWithIcon: "relative px-2 pr-8",
    iconWrapper: "pointer-events-none absolute inset-y-0 end-0 top-0 flex items-center pe-3.5",
    icon: "h-4 w-4 text-gray-500 dark:text-gray-400",
    select: "text-gray-900 disabled:text-gray-400 bg-gray-50 border border-gray-300 focus:ring-0 focus:outline-none block w-full border-l-1 focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:disabled:text-gray-500 dark:focus:ring-primary-500 dark:focus:border-primary-500",
    button: "!rounded-r-lg",
    buttonIcon: "ml-2 h-4 w-4",
    rangeSeparator: "flex items-center justify-center px-2 text-gray-500 dark:text-gray-400",
    rangeInputWrapper: "relative",
    rangeInput: "relative pr-8",
    rangeButton: "pointer-events-none absolute inset-y-0 top-0 right-0 flex items-center border-0 bg-transparent pe-3.5",
    dropdownContent: "p-4 last:rounded-r-lg",
    dropdownInner: "flex flex-col space-y-4",
    dropdownTimeRow: "flex space-x-4",
    dropdownTimeCol: "flex flex-col",
    dropdownTimeInput: "w-24 rounded-l-lg !border-r px-2",
    dropdownButton: "w-full !rounded-l-lg",
    toggleWrapper: "flex w-full flex-col space-y-2",
    toggleRow: "flex items-center justify-between",
    toggleTimeRow: "flex space-x-4 p-2.5",
    toggleTimeCol: "flex flex-col",
    toggleTimeInput: "w-24 rounded-lg !border-r px-2",
    inlineGrid: "grid w-full gap-2",
    inlineButton: "rounded-lg"
  },
  variants: {
    type: {
      default: {
        input: "rounded-e-lg"
      },
      select: {
        input: "w-1/3 rounded-l-lg rounded-e-none",
        select: "rounded-r-lg rounded-l-none"
      },
      dropdown: {
        input: "rounded-l-lg rounded-e-none"
      },
      range: {},
      "timerange-dropdown": {},
      "timerange-toggle": {},
      "inline-buttons": {}
    },
    columns: {
      1: {
        inlineGrid: "grid-cols-1"
      },
      2: {
        inlineGrid: "grid-cols-2"
      },
      3: {
        inlineGrid: "grid-cols-3"
      },
      4: {
        inlineGrid: "grid-cols-4"
      }
    },
    disabled: {
      true: {
        input: "disabled:cursor-not-allowed disabled:opacity-50"
      }
    }
  },
  defaultVariants: {
    type: "default",
    columns: 2,
    disabled: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/timepicker/Timepicker.svelte
Timepicker[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/forms/timepicker/Timepicker.svelte";
var root_515 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[173, 10, [[174, 12]]]]);
var root_331 = add_locations(from_html(`<!> <div><!></div>`, 1), Timepicker[FILENAME], [[169, 6]]);
var root_720 = add_locations(from_html(`<!> <!>`, 1), Timepicker[FILENAME], []);
var root_107 = add_locations(from_svg(` <svg aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>`, 1), Timepicker[FILENAME], [[185, 8, [[186, 10]]]]);
var root_910 = add_locations(from_html(`<!> <!> <!>`, 1), Timepicker[FILENAME], []);
var on_click6 = (_, id) => document.getElementById(id())?.click();
var root_172 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[203, 12, [[204, 14]]]]);
var on_click_1 = (__1, endId) => document.getElementById(endId())?.click();
var root_192 = add_locations(from_svg(`<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 20 20"><path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6v4l3.276 3.276M19 10a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z"></path></svg>`), Timepicker[FILENAME], [[216, 12, [[217, 14]]]]);
var root_1510 = add_locations(from_html(`<div><!> <button type="button" aria-label="Open time picker"><!></button></div> <span>-</span> <div><!> <button type="button" aria-label="Open end time picker"><!></button></div>`, 1), Timepicker[FILENAME], [[197, 6, [[199, 8]]], [209, 6], [210, 6, [[212, 8]]]]);
var root_2210 = add_locations(from_svg(` <svg aria-hidden="true" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>`, 1), Timepicker[FILENAME], [[225, 8, [[226, 10]]]]);
var root_236 = add_locations(from_html(`<div><div><div><!> <!></div> <div><!> <!></div></div> <!></div>`), Timepicker[FILENAME], [[230, 8, [[231, 10, [[232, 12], [236, 12]]]]]]);
var root_21 = add_locations(from_html(`<!> <!>`, 1), Timepicker[FILENAME], []);
var root_292 = add_locations(from_html(`<div><div><!> <!></div> <div><!> <!></div></div>`), Timepicker[FILENAME], [[252, 10, [[253, 12], [257, 12]]]]);
var root_282 = add_locations(from_html(`<div><div><!></div> <!></div>`), Timepicker[FILENAME], [[247, 6, [[248, 8]]]]);
var root_3210 = add_locations(from_html(`<div></div>`), Timepicker[FILENAME], [[267, 2]]);
function Timepicker($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Timepicker);
  var $$ownership_validator = create_ownership_validator($$props);
  let id = prop($$props, "id", 3, "time"), endId = prop($$props, "endId", 3, "end-time"), value = prop($$props, "value", 15, "00:00"), endValue = prop($$props, "endValue", 15, "00:00"), min3 = prop($$props, "min", 3, ""), max3 = prop($$props, "max", 3, ""), required = prop($$props, "required", 3, true), disabled = prop($$props, "disabled", 3, false), buttonColor = prop($$props, "buttonColor", 3, "primary"), iconClass = prop($$props, "iconClass", 3, "h-5 w-5 text-gray-500 dark:text-gray-400"), type = prop($$props, "type", 3, "default"), optionLabel = prop($$props, "optionLabel", 3, "Options"), options = prop($$props, "options", 19, () => []), size2 = prop($$props, "size", 3, "md"), timerangeLabel = prop($$props, "timerangeLabel", 3, "Choose time range"), timerangeButtonLabel = prop($$props, "timerangeButtonLabel", 3, "Save time"), timeIntervals = prop($$props, "timeIntervals", 19, () => []), columns = prop($$props, "columns", 3, 2);
  const theme = getTheme("timepicker");
  const styles = timepicker({ type: type(), columns: columns(), disabled: disabled() });
  let selectedOption = tag(state(""), "selectedOption");
  let dropdownOpen = tag(state(false), "dropdownOpen");
  let showTimerange = tag(state(false), "showTimerange");
  function parseTime(time) {
    if (!time) return null;
    const parsed = parse(time, "HH:mm", /* @__PURE__ */ new Date());
    return isValid(parsed) ? parsed : null;
  }
  function timeToMinutes(time) {
    const date = parseTime(time);
    return date ? date.getHours() * 60 + date.getMinutes() : 0;
  }
  function isValidTimeFormat(time) {
    return strict_equals(parseTime(time), null, false);
  }
  function isTimeInRange(time, minTime2, maxTime2) {
    const timeDate = parseTime(time);
    if (!timeDate) return false;
    if (minTime2) {
      const minDate = parseTime(minTime2);
      if (minDate && isBefore(timeDate, minDate)) return false;
    }
    if (maxTime2) {
      const maxDate = parseTime(maxTime2);
      if (maxDate && isAfter(timeDate, maxDate)) return false;
    }
    return true;
  }
  function handleTimeChange(event2, isEndTime = false) {
    const target = event2.target;
    const newValue = target.value;
    if (!isValidTimeFormat(newValue)) {
      target.value = isEndTime ? endValue() : value();
      return;
    }
    if (!isTimeInRange(newValue, min3(), max3())) {
      target.value = isEndTime ? endValue() : value();
      return;
    }
    const newValueMinutes = timeToMinutes(newValue);
    const valueMinutes = timeToMinutes(value());
    const endValueMinutes = timeToMinutes(endValue());
    if (isEndTime) {
      if (newValueMinutes < valueMinutes) {
        if (isTimeInRange(newValue, min3(), max3())) {
          value(newValue);
        } else {
          target.value = endValue();
          return;
        }
      } else {
        endValue(newValue);
      }
    } else {
      if (newValueMinutes > endValueMinutes) {
        if (isTimeInRange(newValue, min3(), max3())) {
          endValue(newValue);
        } else {
          target.value = value();
          return;
        }
      } else {
        value(newValue);
      }
    }
    if (strict_equals(type(), "timerange-dropdown", false)) {
      notifyChange();
    }
  }
  function handleOptionSelect(event2) {
    const target = event2.target;
    set(selectedOption, target.value, true);
    notifyChange();
  }
  function handleDropdownSelect(option) {
    set(dropdownOpen, false);
    set(selectedOption, option.value, true);
    notifyChange();
  }
  function notifyChange() {
    if ($$props.onselect) {
      $$props.onselect({
        time: value(),
        endTime: endValue(),
        [optionLabel() ? optionLabel().toLowerCase() : "options"]: get(selectedOption) || options()[0]?.value || ""
      });
    }
  }
  function applyTimerange() {
    set(dropdownOpen, false);
    notifyChange();
  }
  function toggleTimerange() {
    set(showTimerange, !get(showTimerange));
    if (!get(showTimerange)) {
      notifyChange();
    }
  }
  function handleInlineButtonSelect(time) {
    if (isValidTimeFormat(time) && isTimeInRange(time, min3(), max3())) {
      value(time);
      notifyChange();
    }
  }
  user_effect(() => {
    if (!isValidTimeFormat(value())) {
      value("00:00");
    }
    if (!isValidTimeFormat(endValue())) {
      endValue("00:00");
    }
  });
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent_10 = ($$anchor2) => {
      var fragment_1 = comment();
      var node_1 = first_child(fragment_1);
      {
        let $0 = user_derived(() => styles.buttonGroup({ class: clsx_default(theme?.buttonGroup, $$props.divClass) }));
        add_svelte_meta(
          () => ButtonGroup_default(node_1, {
            get size() {
              return size2();
            },
            get class() {
              return get($0);
            },
            children: wrap_snippet(Timepicker, ($$anchor3, $$slotProps) => {
              var fragment_2 = comment();
              var node_2 = first_child(fragment_2);
              {
                var consequent_1 = ($$anchor4) => {
                  var fragment_3 = root_331();
                  var node_3 = first_child(fragment_3);
                  {
                    let $02 = user_derived(() => styles.input({
                      class: clsx_default(styles.inputWithIcon(), theme?.input, $$props.inputClass)
                    }));
                    $$ownership_validator.binding("value", Input_default, value);
                    add_svelte_meta(
                      () => Input_default(node_3, {
                        get id() {
                          return id();
                        },
                        get color() {
                          return $$props.inputColor;
                        },
                        type: "time",
                        get min() {
                          return min3();
                        },
                        get max() {
                          return max3();
                        },
                        get required() {
                          return required();
                        },
                        get disabled() {
                          return disabled();
                        },
                        get class() {
                          return get($02);
                        },
                        oninput: (e) => handleTimeChange(e),
                        onchange: (e) => handleTimeChange(e),
                        get value() {
                          return value();
                        },
                        set value($$value) {
                          value($$value);
                        }
                      }),
                      "component",
                      Timepicker,
                      168,
                      6,
                      { componentTag: "Input" }
                    );
                  }
                  var div = sibling(node_3, 2);
                  var node_4 = child(div);
                  {
                    var consequent = ($$anchor5) => {
                      var fragment_4 = comment();
                      var node_5 = first_child(fragment_4);
                      add_svelte_meta(
                        () => component(node_5, () => $$props.Icon, ($$anchor6, Icon_1) => {
                          Icon_1($$anchor6, {
                            get class() {
                              return iconClass();
                            }
                          });
                        }),
                        "component",
                        Timepicker,
                        171,
                        10,
                        { componentTag: "Icon" }
                      );
                      append($$anchor5, fragment_4);
                    };
                    var alternate = ($$anchor5) => {
                      var svg = root_515();
                      template_effect(($02) => set_class(svg, 0, $02), [() => clsx2(styles.icon())]);
                      append($$anchor5, svg);
                    };
                    add_svelte_meta(
                      () => if_block(node_4, ($$render) => {
                        if ($$props.Icon) $$render(consequent);
                        else $$render(alternate, false);
                      }),
                      "if",
                      Timepicker,
                      170,
                      8
                    );
                  }
                  reset(div);
                  template_effect(($02) => set_class(div, 1, $02), [
                    () => clsx2(styles.iconWrapper({ class: clsx_default(theme?.iconWrapper) }))
                  ]);
                  append($$anchor4, fragment_3);
                };
                var alternate_7 = ($$anchor4) => {
                  var fragment_5 = comment();
                  var node_6 = first_child(fragment_5);
                  {
                    var consequent_2 = ($$anchor5) => {
                      var fragment_6 = root_720();
                      var node_7 = first_child(fragment_6);
                      {
                        let $02 = user_derived(() => styles.input({ class: clsx_default(theme?.input, $$props.inputClass) }));
                        $$ownership_validator.binding("value", Input_default, value);
                        add_svelte_meta(
                          () => Input_default(node_7, {
                            get id() {
                              return id();
                            },
                            get color() {
                              return $$props.inputColor;
                            },
                            type: "time",
                            get min() {
                              return min3();
                            },
                            get max() {
                              return max3();
                            },
                            get required() {
                              return required();
                            },
                            get disabled() {
                              return disabled();
                            },
                            get class() {
                              return get($02);
                            },
                            oninput: (e) => handleTimeChange(e),
                            onchange: (e) => handleTimeChange(e),
                            get value() {
                              return value();
                            },
                            set value($$value) {
                              value($$value);
                            }
                          }),
                          "component",
                          Timepicker,
                          179,
                          6,
                          { componentTag: "Input" }
                        );
                      }
                      var node_8 = sibling(node_7, 2);
                      {
                        let $02 = user_derived(() => styles.select({ class: clsx_default(theme?.select, $$props.selectClass) }));
                        add_svelte_meta(
                          () => Select_default(node_8, {
                            get selectClass() {
                              return get($02);
                            },
                            onchange: handleOptionSelect,
                            get items() {
                              return options();
                            },
                            get value() {
                              return get(selectedOption);
                            }
                          }),
                          "component",
                          Timepicker,
                          180,
                          6,
                          { componentTag: "Select" }
                        );
                      }
                      append($$anchor5, fragment_6);
                    };
                    var alternate_6 = ($$anchor5) => {
                      var fragment_7 = comment();
                      var node_9 = first_child(fragment_7);
                      {
                        var consequent_3 = ($$anchor6) => {
                          var fragment_8 = root_910();
                          var node_10 = first_child(fragment_8);
                          {
                            let $02 = user_derived(() => styles.input({ class: clsx_default(theme?.input, $$props.inputClass) }));
                            $$ownership_validator.binding("value", Input_default, value);
                            add_svelte_meta(
                              () => Input_default(node_10, {
                                get id() {
                                  return id();
                                },
                                get color() {
                                  return $$props.inputColor;
                                },
                                type: "time",
                                get min() {
                                  return min3();
                                },
                                get max() {
                                  return max3();
                                },
                                get required() {
                                  return required();
                                },
                                get disabled() {
                                  return disabled();
                                },
                                get class() {
                                  return get($02);
                                },
                                oninput: (e) => handleTimeChange(e),
                                onchange: (e) => handleTimeChange(e),
                                get value() {
                                  return value();
                                },
                                set value($$value) {
                                  value($$value);
                                }
                              }),
                              "component",
                              Timepicker,
                              182,
                              6,
                              { componentTag: "Input" }
                            );
                          }
                          var node_11 = sibling(node_10, 2);
                          {
                            let $02 = user_derived(() => styles.button({ class: clsx_default(theme?.button) }));
                            add_svelte_meta(
                              () => Button_default(node_11, {
                                get color() {
                                  return buttonColor();
                                },
                                get class() {
                                  return get($02);
                                },
                                children: wrap_snippet(Timepicker, ($$anchor7, $$slotProps2) => {
                                  next();
                                  var fragment_9 = root_107();
                                  var text2 = first_child(fragment_9, true);
                                  var svg_1 = sibling(text2);
                                  template_effect(
                                    ($03) => {
                                      set_text(text2, optionLabel());
                                      set_class(svg_1, 0, $03);
                                    },
                                    [
                                      () => clsx2(styles.buttonIcon({ class: clsx_default(theme?.buttonIcon) }))
                                    ]
                                  );
                                  append($$anchor7, fragment_9);
                                }),
                                $$slots: { default: true }
                              }),
                              "component",
                              Timepicker,
                              183,
                              6,
                              { componentTag: "Button" }
                            );
                          }
                          var node_12 = sibling(node_11, 2);
                          add_svelte_meta(
                            () => Dropdown_default(node_12, {
                              simple: true,
                              children: wrap_snippet(Timepicker, ($$anchor7, $$slotProps2) => {
                                var fragment_10 = comment();
                                var node_13 = first_child(fragment_10);
                                add_svelte_meta(
                                  () => each(node_13, 17, options, index, ($$anchor8, option) => {
                                    var fragment_11 = comment();
                                    var node_14 = first_child(fragment_11);
                                    add_svelte_meta(
                                      () => DropdownItem_default(node_14, {
                                        onclick: () => handleDropdownSelect(get(option)),
                                        children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps3) => {
                                          next();
                                          var text_1 = text();
                                          template_effect(() => set_text(text_1, get(option).name));
                                          append($$anchor9, text_1);
                                        }),
                                        $$slots: { default: true }
                                      }),
                                      "component",
                                      Timepicker,
                                      191,
                                      10,
                                      { componentTag: "DropdownItem" }
                                    );
                                    append($$anchor8, fragment_11);
                                  }),
                                  "each",
                                  Timepicker,
                                  190,
                                  8
                                );
                                append($$anchor7, fragment_10);
                              }),
                              $$slots: { default: true }
                            }),
                            "component",
                            Timepicker,
                            189,
                            6,
                            { componentTag: "Dropdown" }
                          );
                          append($$anchor6, fragment_8);
                        };
                        var alternate_5 = ($$anchor6) => {
                          var fragment_13 = comment();
                          var node_15 = first_child(fragment_13);
                          {
                            var consequent_6 = ($$anchor7) => {
                              var fragment_14 = root_1510();
                              var div_1 = first_child(fragment_14);
                              var node_16 = child(div_1);
                              {
                                let $02 = user_derived(() => styles.input({
                                  class: clsx_default(theme?.rangeInput, styles.rangeInput(), $$props.inputClass)
                                }));
                                $$ownership_validator.binding("value", Input_default, value);
                                add_svelte_meta(
                                  () => Input_default(node_16, {
                                    get id() {
                                      return id();
                                    },
                                    get color() {
                                      return $$props.inputColor;
                                    },
                                    type: "time",
                                    get min() {
                                      return min3();
                                    },
                                    get max() {
                                      return max3();
                                    },
                                    get required() {
                                      return required();
                                    },
                                    get disabled() {
                                      return disabled();
                                    },
                                    get class() {
                                      return get($02);
                                    },
                                    oninput: (e) => handleTimeChange(e),
                                    onchange: (e) => handleTimeChange(e),
                                    get value() {
                                      return value();
                                    },
                                    set value($$value) {
                                      value($$value);
                                    }
                                  }),
                                  "component",
                                  Timepicker,
                                  198,
                                  8,
                                  { componentTag: "Input" }
                                );
                              }
                              var button2 = sibling(node_16, 2);
                              button2.__click = [on_click6, id];
                              var node_17 = child(button2);
                              {
                                var consequent_4 = ($$anchor8) => {
                                  var fragment_15 = comment();
                                  var node_18 = first_child(fragment_15);
                                  add_svelte_meta(
                                    () => component(node_18, () => $$props.Icon, ($$anchor9, Icon_2) => {
                                      Icon_2($$anchor9, {
                                        get class() {
                                          return iconClass();
                                        }
                                      });
                                    }),
                                    "component",
                                    Timepicker,
                                    201,
                                    12,
                                    { componentTag: "Icon" }
                                  );
                                  append($$anchor8, fragment_15);
                                };
                                var alternate_1 = ($$anchor8) => {
                                  var svg_2 = root_172();
                                  template_effect(($02) => set_class(svg_2, 0, $02), [() => clsx2(styles.icon({ class: clsx_default(theme?.icon) }))]);
                                  append($$anchor8, svg_2);
                                };
                                add_svelte_meta(
                                  () => if_block(node_17, ($$render) => {
                                    if ($$props.Icon) $$render(consequent_4);
                                    else $$render(alternate_1, false);
                                  }),
                                  "if",
                                  Timepicker,
                                  200,
                                  10
                                );
                              }
                              reset(button2);
                              reset(div_1);
                              var span2 = sibling(div_1, 2);
                              var div_2 = sibling(span2, 2);
                              var node_19 = child(div_2);
                              {
                                let $02 = user_derived(() => styles.input({
                                  class: clsx_default(styles.rangeInput(), theme?.rangeInput, $$props.inputClass)
                                }));
                                $$ownership_validator.binding("endValue", Input_default, endValue);
                                add_svelte_meta(
                                  () => Input_default(node_19, {
                                    get id() {
                                      return endId();
                                    },
                                    get color() {
                                      return $$props.inputColor;
                                    },
                                    type: "time",
                                    get min() {
                                      return min3();
                                    },
                                    get max() {
                                      return max3();
                                    },
                                    get required() {
                                      return required();
                                    },
                                    get disabled() {
                                      return disabled();
                                    },
                                    get class() {
                                      return get($02);
                                    },
                                    oninput: (e) => handleTimeChange(e, true),
                                    onchange: (e) => handleTimeChange(e, true),
                                    get value() {
                                      return endValue();
                                    },
                                    set value($$value) {
                                      endValue($$value);
                                    }
                                  }),
                                  "component",
                                  Timepicker,
                                  211,
                                  8,
                                  { componentTag: "Input" }
                                );
                              }
                              var button_1 = sibling(node_19, 2);
                              button_1.__click = [on_click_1, endId];
                              var node_20 = child(button_1);
                              {
                                var consequent_5 = ($$anchor8) => {
                                  var fragment_16 = comment();
                                  var node_21 = first_child(fragment_16);
                                  add_svelte_meta(
                                    () => component(node_21, () => $$props.Icon, ($$anchor9, Icon_3) => {
                                      Icon_3($$anchor9, {
                                        get class() {
                                          return iconClass();
                                        }
                                      });
                                    }),
                                    "component",
                                    Timepicker,
                                    214,
                                    12,
                                    { componentTag: "Icon" }
                                  );
                                  append($$anchor8, fragment_16);
                                };
                                var alternate_2 = ($$anchor8) => {
                                  var svg_3 = root_192();
                                  template_effect(($02) => set_class(svg_3, 0, $02), [() => clsx2(styles.icon({ class: clsx_default(theme?.icon) }))]);
                                  append($$anchor8, svg_3);
                                };
                                add_svelte_meta(
                                  () => if_block(node_20, ($$render) => {
                                    if ($$props.Icon) $$render(consequent_5);
                                    else $$render(alternate_2, false);
                                  }),
                                  "if",
                                  Timepicker,
                                  213,
                                  10
                                );
                              }
                              reset(button_1);
                              reset(div_2);
                              template_effect(
                                ($02, $1, $2, $3, $4) => {
                                  set_class(div_1, 1, $02);
                                  set_class(button2, 1, $1);
                                  set_class(span2, 1, $2);
                                  set_class(div_2, 1, $3);
                                  set_class(button_1, 1, $4);
                                },
                                [
                                  () => clsx2(styles.rangeInputWrapper({ class: clsx_default(theme?.rangeInputWrapper) })),
                                  () => clsx2(styles.rangeButton({ class: clsx_default(theme?.rangeButton) })),
                                  () => clsx2(styles.rangeSeparator({ class: clsx_default(theme?.rangeSeparator) })),
                                  () => clsx2(styles.rangeInputWrapper({ class: clsx_default(theme?.rangeInputWrapper) })),
                                  () => clsx2(styles.rangeButton({ class: clsx_default(theme?.rangeButton) }))
                                ]
                              );
                              append($$anchor7, fragment_14);
                            };
                            var alternate_4 = ($$anchor7) => {
                              var fragment_17 = comment();
                              var node_22 = first_child(fragment_17);
                              {
                                var consequent_7 = ($$anchor8) => {
                                  var fragment_18 = root_21();
                                  var node_23 = first_child(fragment_18);
                                  {
                                    let $02 = user_derived(() => styles.button({ class: clsx_default(theme?.button) }));
                                    add_svelte_meta(
                                      () => Button_default(node_23, {
                                        get color() {
                                          return buttonColor();
                                        },
                                        get size() {
                                          return size2();
                                        },
                                        get class() {
                                          return get($02);
                                        },
                                        children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps2) => {
                                          next();
                                          var fragment_19 = root_2210();
                                          var text_2 = first_child(fragment_19, true);
                                          var svg_4 = sibling(text_2);
                                          template_effect(
                                            ($03) => {
                                              set_text(text_2, timerangeLabel());
                                              set_class(svg_4, 0, $03);
                                            },
                                            [
                                              () => clsx2(styles.buttonIcon({ class: clsx_default(theme?.buttonIcon) }))
                                            ]
                                          );
                                          append($$anchor9, fragment_19);
                                        }),
                                        $$slots: { default: true }
                                      }),
                                      "component",
                                      Timepicker,
                                      223,
                                      6,
                                      { componentTag: "Button" }
                                    );
                                  }
                                  var node_24 = sibling(node_23, 2);
                                  {
                                    let $02 = user_derived(() => styles.dropdownContent({ class: clsx_default(theme?.dropdownContent) }));
                                    add_svelte_meta(
                                      () => Dropdown_default(node_24, {
                                        simple: true,
                                        get class() {
                                          return get($02);
                                        },
                                        children: wrap_snippet(Timepicker, ($$anchor9, $$slotProps2) => {
                                          var div_3 = root_236();
                                          var div_4 = child(div_3);
                                          var div_5 = child(div_4);
                                          var node_25 = child(div_5);
                                          add_svelte_meta(
                                            () => Label_default(node_25, {
                                              get for() {
                                                return id();
                                              },
                                              children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                                next();
                                                var text_3 = text("Start time:");
                                                append($$anchor10, text_3);
                                              }),
                                              $$slots: { default: true }
                                            }),
                                            "component",
                                            Timepicker,
                                            233,
                                            14,
                                            { componentTag: "Label" }
                                          );
                                          var node_26 = sibling(node_25, 2);
                                          {
                                            let $03 = user_derived(() => styles.dropdownTimeInput({ class: clsx_default(theme?.dropdownTimeInput, $$props.inputClass) }));
                                            $$ownership_validator.binding("value", Input_default, value);
                                            add_svelte_meta(
                                              () => Input_default(node_26, {
                                                get id() {
                                                  return id();
                                                },
                                                get color() {
                                                  return $$props.inputColor;
                                                },
                                                type: "time",
                                                get min() {
                                                  return min3();
                                                },
                                                get max() {
                                                  return max3();
                                                },
                                                get required() {
                                                  return required();
                                                },
                                                get disabled() {
                                                  return disabled();
                                                },
                                                get class() {
                                                  return get($03);
                                                },
                                                oninput: (e) => handleTimeChange(e),
                                                onchange: (e) => handleTimeChange(e),
                                                get value() {
                                                  return value();
                                                },
                                                set value($$value) {
                                                  value($$value);
                                                }
                                              }),
                                              "component",
                                              Timepicker,
                                              234,
                                              14,
                                              { componentTag: "Input" }
                                            );
                                          }
                                          reset(div_5);
                                          var div_6 = sibling(div_5, 2);
                                          var node_27 = child(div_6);
                                          add_svelte_meta(
                                            () => Label_default(node_27, {
                                              get for() {
                                                return endId();
                                              },
                                              children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                                next();
                                                var text_4 = text("End time:");
                                                append($$anchor10, text_4);
                                              }),
                                              $$slots: { default: true }
                                            }),
                                            "component",
                                            Timepicker,
                                            237,
                                            14,
                                            { componentTag: "Label" }
                                          );
                                          var node_28 = sibling(node_27, 2);
                                          {
                                            let $03 = user_derived(() => styles.dropdownTimeInput({ class: clsx_default(theme?.dropdownTimeInput, $$props.inputClass) }));
                                            $$ownership_validator.binding("endValue", Input_default, endValue);
                                            add_svelte_meta(
                                              () => Input_default(node_28, {
                                                get id() {
                                                  return endId();
                                                },
                                                get color() {
                                                  return $$props.inputColor;
                                                },
                                                type: "time",
                                                get min() {
                                                  return min3();
                                                },
                                                get max() {
                                                  return max3();
                                                },
                                                get required() {
                                                  return required();
                                                },
                                                get disabled() {
                                                  return disabled();
                                                },
                                                get class() {
                                                  return get($03);
                                                },
                                                oninput: (e) => handleTimeChange(e, true),
                                                onchange: (e) => handleTimeChange(e, true),
                                                get value() {
                                                  return endValue();
                                                },
                                                set value($$value) {
                                                  endValue($$value);
                                                }
                                              }),
                                              "component",
                                              Timepicker,
                                              238,
                                              14,
                                              { componentTag: "Input" }
                                            );
                                          }
                                          reset(div_6);
                                          reset(div_4);
                                          var node_29 = sibling(div_4, 2);
                                          {
                                            let $03 = user_derived(() => styles.dropdownButton({ class: clsx_default(theme?.dropdownButton) }));
                                            add_svelte_meta(
                                              () => Button_default(node_29, {
                                                get color() {
                                                  return buttonColor();
                                                },
                                                get class() {
                                                  return get($03);
                                                },
                                                onclick: applyTimerange,
                                                children: wrap_snippet(Timepicker, ($$anchor10, $$slotProps3) => {
                                                  next();
                                                  var text_5 = text();
                                                  template_effect(() => set_text(text_5, timerangeButtonLabel()));
                                                  append($$anchor10, text_5);
                                                }),
                                                $$slots: { default: true }
                                              }),
                                              "component",
                                              Timepicker,
                                              241,
                                              10,
                                              { componentTag: "Button" }
                                            );
                                          }
                                          reset(div_3);
                                          template_effect(
                                            ($03, $1, $2, $3) => {
                                              set_class(div_3, 1, $03);
                                              set_class(div_4, 1, $1);
                                              set_class(div_5, 1, $2);
                                              set_class(div_6, 1, $3);
                                            },
                                            [
                                              () => clsx2(styles.dropdownInner({ class: clsx_default(theme?.dropdownInner) })),
                                              () => clsx2(styles.dropdownTimeRow({ class: clsx_default(theme?.dropdownTimeRow) })),
                                              () => clsx2(styles.dropdownTimeCol({ class: clsx_default(theme?.dropdownTimeCol) })),
                                              () => clsx2(styles.dropdownTimeCol({ class: clsx_default(theme?.dropdownTimeCol) }))
                                            ]
                                          );
                                          append($$anchor9, div_3);
                                        }),
                                        $$slots: { default: true }
                                      }),
                                      "component",
                                      Timepicker,
                                      229,
                                      6,
                                      { componentTag: "Dropdown" }
                                    );
                                  }
                                  append($$anchor8, fragment_18);
                                };
                                var alternate_3 = ($$anchor8) => {
                                  var fragment_21 = comment();
                                  var node_30 = first_child(fragment_21);
                                  {
                                    var consequent_9 = ($$anchor9) => {
                                      var div_7 = root_282();
                                      var div_8 = child(div_7);
                                      var node_31 = child(div_8);
                                      {
                                        let $02 = user_derived(() => `${id()}-timerange-toggle`);
                                        add_svelte_meta(
                                          () => Toggle_default(node_31, {
                                            get id() {
                                              return get($02);
                                            },
                                            get checked() {
                                              return get(showTimerange);
                                            },
                                            onchange: toggleTimerange,
                                            spanClass: "me-0 rounded-lg"
                                          }),
                                          "component",
                                          Timepicker,
                                          249,
                                          10,
                                          { componentTag: "Toggle" }
                                        );
                                      }
                                      reset(div_8);
                                      var node_32 = sibling(div_8, 2);
                                      {
                                        var consequent_8 = ($$anchor10) => {
                                          var div_9 = root_292();
                                          var div_10 = child(div_9);
                                          var node_33 = child(div_10);
                                          add_svelte_meta(
                                            () => Label_default(node_33, {
                                              get for() {
                                                return id();
                                              },
                                              children: wrap_snippet(Timepicker, ($$anchor11, $$slotProps2) => {
                                                next();
                                                var text_6 = text("Start time:");
                                                append($$anchor11, text_6);
                                              }),
                                              $$slots: { default: true }
                                            }),
                                            "component",
                                            Timepicker,
                                            254,
                                            14,
                                            { componentTag: "Label" }
                                          );
                                          var node_34 = sibling(node_33, 2);
                                          {
                                            let $02 = user_derived(() => styles.toggleTimeInput({ class: clsx_default(theme?.toggleTimeInput, $$props.inputClass) }));
                                            $$ownership_validator.binding("value", Input_default, value);
                                            add_svelte_meta(
                                              () => Input_default(node_34, {
                                                get id() {
                                                  return id();
                                                },
                                                get color() {
                                                  return $$props.inputColor;
                                                },
                                                type: "time",
                                                get min() {
                                                  return min3();
                                                },
                                                get max() {
                                                  return max3();
                                                },
                                                get required() {
                                                  return required();
                                                },
                                                get disabled() {
                                                  return disabled();
                                                },
                                                get class() {
                                                  return get($02);
                                                },
                                                oninput: (e) => handleTimeChange(e),
                                                onchange: (e) => handleTimeChange(e),
                                                get value() {
                                                  return value();
                                                },
                                                set value($$value) {
                                                  value($$value);
                                                }
                                              }),
                                              "component",
                                              Timepicker,
                                              255,
                                              14,
                                              { componentTag: "Input" }
                                            );
                                          }
                                          reset(div_10);
                                          var div_11 = sibling(div_10, 2);
                                          var node_35 = child(div_11);
                                          add_svelte_meta(
                                            () => Label_default(node_35, {
                                              get for() {
                                                return endId();
                                              },
                                              children: wrap_snippet(Timepicker, ($$anchor11, $$slotProps2) => {
                                                next();
                                                var text_7 = text("End time:");
                                                append($$anchor11, text_7);
                                              }),
                                              $$slots: { default: true }
                                            }),
                                            "component",
                                            Timepicker,
                                            258,
                                            14,
                                            { componentTag: "Label" }
                                          );
                                          var node_36 = sibling(node_35, 2);
                                          {
                                            let $02 = user_derived(() => styles.toggleTimeInput({ class: clsx_default(theme?.toggleTimeInput, $$props.inputClass) }));
                                            $$ownership_validator.binding("endValue", Input_default, endValue);
                                            add_svelte_meta(
                                              () => Input_default(node_36, {
                                                get id() {
                                                  return endId();
                                                },
                                                get color() {
                                                  return $$props.inputColor;
                                                },
                                                type: "time",
                                                get min() {
                                                  return min3();
                                                },
                                                get max() {
                                                  return max3();
                                                },
                                                get required() {
                                                  return required();
                                                },
                                                get disabled() {
                                                  return disabled();
                                                },
                                                get class() {
                                                  return get($02);
                                                },
                                                oninput: (e) => handleTimeChange(e, true),
                                                onchange: (e) => handleTimeChange(e, true),
                                                get value() {
                                                  return endValue();
                                                },
                                                set value($$value) {
                                                  endValue($$value);
                                                }
                                              }),
                                              "component",
                                              Timepicker,
                                              259,
                                              14,
                                              { componentTag: "Input" }
                                            );
                                          }
                                          reset(div_11);
                                          reset(div_9);
                                          template_effect(
                                            ($02, $1, $2) => {
                                              set_class(div_9, 1, $02);
                                              set_class(div_10, 1, $1);
                                              set_class(div_11, 1, $2);
                                            },
                                            [
                                              () => clsx2(styles.toggleTimeRow({ class: clsx_default(theme?.toggleTimeRow) })),
                                              () => clsx2(styles.toggleTimeCol({ class: clsx_default(theme?.toggleTimeCol) })),
                                              () => clsx2(styles.toggleTimeCol({ class: clsx_default(theme?.toggleTimeCol) }))
                                            ]
                                          );
                                          append($$anchor10, div_9);
                                        };
                                        add_svelte_meta(
                                          () => if_block(node_32, ($$render) => {
                                            if (get(showTimerange)) $$render(consequent_8);
                                          }),
                                          "if",
                                          Timepicker,
                                          251,
                                          8
                                        );
                                      }
                                      reset(div_7);
                                      template_effect(
                                        ($02, $1) => {
                                          set_class(div_7, 1, $02);
                                          set_class(div_8, 1, $1);
                                        },
                                        [
                                          () => clsx2(styles.toggleWrapper({ class: clsx_default(theme?.toggleWrapper) })),
                                          () => clsx2(styles.toggleRow({ class: clsx_default(theme?.toggleRow) }))
                                        ]
                                      );
                                      append($$anchor9, div_7);
                                    };
                                    add_svelte_meta(
                                      () => if_block(
                                        node_30,
                                        ($$render) => {
                                          if (strict_equals(type(), "timerange-toggle")) $$render(consequent_9);
                                        },
                                        true
                                      ),
                                      "if",
                                      Timepicker,
                                      246,
                                      4
                                    );
                                  }
                                  append($$anchor8, fragment_21);
                                };
                                add_svelte_meta(
                                  () => if_block(
                                    node_22,
                                    ($$render) => {
                                      if (strict_equals(type(), "timerange-dropdown")) $$render(consequent_7);
                                      else $$render(alternate_3, false);
                                    },
                                    true
                                  ),
                                  "if",
                                  Timepicker,
                                  222,
                                  4
                                );
                              }
                              append($$anchor7, fragment_17);
                            };
                            add_svelte_meta(
                              () => if_block(
                                node_15,
                                ($$render) => {
                                  if (strict_equals(type(), "range")) $$render(consequent_6);
                                  else $$render(alternate_4, false);
                                },
                                true
                              ),
                              "if",
                              Timepicker,
                              196,
                              4
                            );
                          }
                          append($$anchor6, fragment_13);
                        };
                        add_svelte_meta(
                          () => if_block(
                            node_9,
                            ($$render) => {
                              if (strict_equals(type(), "dropdown")) $$render(consequent_3);
                              else $$render(alternate_5, false);
                            },
                            true
                          ),
                          "if",
                          Timepicker,
                          181,
                          4
                        );
                      }
                      append($$anchor5, fragment_7);
                    };
                    add_svelte_meta(
                      () => if_block(
                        node_6,
                        ($$render) => {
                          if (strict_equals(type(), "select")) $$render(consequent_2);
                          else $$render(alternate_6, false);
                        },
                        true
                      ),
                      "if",
                      Timepicker,
                      178,
                      4
                    );
                  }
                  append($$anchor4, fragment_5);
                };
                add_svelte_meta(
                  () => if_block(node_2, ($$render) => {
                    if (strict_equals(type(), "default")) $$render(consequent_1);
                    else $$render(alternate_7, false);
                  }),
                  "if",
                  Timepicker,
                  167,
                  4
                );
              }
              append($$anchor3, fragment_2);
            }),
            $$slots: { default: true }
          }),
          "component",
          Timepicker,
          166,
          2,
          { componentTag: "ButtonGroup" }
        );
      }
      append($$anchor2, fragment_1);
    };
    var alternate_8 = ($$anchor2) => {
      var div_12 = root_3210();
      add_svelte_meta(
        () => each(div_12, 21, timeIntervals, index, ($$anchor3, time) => {
          var fragment_22 = comment();
          var node_37 = first_child(fragment_22);
          {
            let $0 = user_derived(() => strict_equals(value(), get(time)) ? buttonColor() : "light");
            let $1 = user_derived(() => styles.inlineButton({ class: clsx_default(theme?.inlineButton) }));
            add_svelte_meta(
              () => Button_default(node_37, {
                get size() {
                  return size2();
                },
                get color() {
                  return get($0);
                },
                get class() {
                  return get($1);
                },
                onclick: () => handleInlineButtonSelect(get(time)),
                children: wrap_snippet(Timepicker, ($$anchor4, $$slotProps) => {
                  next();
                  var text_8 = text();
                  template_effect(() => set_text(text_8, get(time)));
                  append($$anchor4, text_8);
                }),
                $$slots: { default: true }
              }),
              "component",
              Timepicker,
              269,
              6,
              { componentTag: "Button" }
            );
          }
          append($$anchor3, fragment_22);
        }),
        "each",
        Timepicker,
        268,
        4
      );
      reset(div_12);
      template_effect(($0) => set_class(div_12, 1, $0), [
        () => clsx2(styles.inlineGrid({ class: clsx_default(theme?.inlineGrid) }))
      ]);
      append($$anchor2, div_12);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (strict_equals(type(), "inline-buttons", false)) $$render(consequent_10);
        else $$render(alternate_8, false);
      }),
      "if",
      Timepicker,
      165,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Timepicker = hmr(Timepicker, () => Timepicker[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Timepicker[HMR].source;
    set(Timepicker[HMR].source, module.default[HMR].original);
  });
}
var Timepicker_default = Timepicker;
delegate(["click"]);

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/a/theme.js
var anchor = T({
  base: "inline-flex items-center hover:underline",
  variants: {
    color: {
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "text-primary-600 dark:text-primary-500",
      secondary: "text-secondary-600 dark:text-secondary-500",
      gray: "text-gray-600 dark:text-gray-500",
      red: "text-red-600 dark:text-red-500",
      orange: "text-orange-600 dark:text-orange-500",
      amber: "text-amber-600 dark:text-amber-500",
      yellow: "text-yellow-600 dark:text-yellow-500",
      lime: "text-lime-600 dark:text-lime-500",
      green: "text-green-600 dark:text-green-500",
      emerald: "text-emerald-600 dark:text-emerald-500",
      teal: "text-teal-600 dark:text-teal-500",
      cyan: "text-cyan-600 dark:text-cyan-500",
      sky: "text-sky-600 dark:text-sky-500",
      blue: "text-blue-600 dark:text-blue-500",
      indigo: "text-indigo-600 dark:text-indigo-500",
      violet: "text-violet-600 dark:text-violet-500",
      purple: "text-purple-600 dark:text-purple-500",
      fuchsia: "text-fuchsia-600 dark:text-fuchsia-500",
      pink: "text-pink-600 dark:text-pink-500",
      rose: "text-rose-600 dark:text-rose-500"
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/a/A.svelte
A[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/a/A.svelte";
var root_170 = add_locations(from_html(`<button><!></button>`), A[FILENAME], [[32, 2]]);
var root_237 = add_locations(from_html(`<a><!></a>`), A[FILENAME], [[37, 2]]);
function A($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, A);
  let color = prop($$props, "color", 3, "primary"), asButton = prop($$props, "asButton", 3, false), href = prop($$props, "href", 3, "#"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "color",
      "asButton",
      "onclick",
      "href",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("anchor");
  let linkCls = tag(user_derived(() => anchor({ color: color(), class: clsx_default(theme, $$props.class) })), "linkCls");
  function handleClick(event2) {
    if (asButton()) {
      event2.preventDefault();
    }
    if ($$props.onclick) {
      $$props.onclick(event2);
    }
  }
  let buttonProps = tag(
    user_derived(() => () => {
      const { href: href2, target, rel, download, ...filtered } = restProps;
      return filtered;
    }),
    "buttonProps"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var button2 = root_170();
      attribute_effect(button2, () => ({
        type: "button",
        class: get(linkCls),
        onclick: handleClick,
        ...get(buttonProps)
      }));
      var node_1 = child(button2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", A, 33, 4);
      reset(button2);
      append($$anchor2, button2);
    };
    var alternate = ($$anchor2) => {
      var a2 = root_237();
      attribute_effect(a2, () => ({
        href: href(),
        class: get(linkCls),
        onclick: handleClick,
        ...restProps
      }));
      var node_2 = child(a2);
      add_svelte_meta(() => snippet(node_2, () => $$props.children), "render", A, 38, 4);
      reset(a2);
      append($$anchor2, a2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if (asButton()) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      A,
      30,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  A = hmr(A, () => A[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = A[HMR].source;
    set(A[HMR].source, module.default[HMR].original);
  });
}
var A_default = A;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/blockquote/theme.js
var blockquote = T({
  base: "font-semibold text-gray-900 dark:text-white",
  variants: {
    border: {
      true: "border-s-4 border-gray-300 dark:border-gray-500",
      false: ""
    },
    italic: {
      true: "italic",
      false: ""
    },
    bg: {
      true: "bg-gray-50 dark:bg-gray-800",
      false: ""
    },
    alignment: {
      left: "text-left",
      center: "text-center",
      right: "text-right"
    },
    size: {
      xs: "text-xs",
      sm: "text-sm",
      base: "text-base",
      lg: "text-lg",
      xl: "text-xl",
      "2xl": "text-2xl",
      "3xl": "text-3xl",
      "4xl": "text-4xl",
      "5xl": "text-5xl",
      "6xl": "text-6xl",
      "7xl": "text-7xl",
      "8xl": "text-8xl",
      "9xl": "text-9xl"
    }
  },
  defaultVariants: {
    border: false,
    italic: true,
    bg: false,
    alignment: "left",
    size: "lg"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/blockquote/Blockquote.svelte
Blockquote[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/blockquote/Blockquote.svelte";
var root111 = add_locations(from_html(`<blockquote><!></blockquote>`), Blockquote[FILENAME], [[23, 0]]);
function Blockquote($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Blockquote);
  let italic = prop($$props, "italic", 3, true), alignment = prop($$props, "alignment", 3, "left"), size2 = prop($$props, "size", 3, "lg"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "border",
      "italic",
      "bg",
      "alignment",
      "size"
    ],
    "restProps"
  );
  const theme = getTheme("blockquote");
  let blockquoteCls = tag(
    user_derived(() => blockquote({
      border: $$props.border,
      italic: italic(),
      bg: $$props.bg,
      alignment: alignment(),
      size: size2(),
      class: clsx_default(theme, $$props.class)
    })),
    "blockquoteCls"
  );
  var $$exports = { ...legacy_api() };
  var blockquote_1 = root111();
  attribute_effect(blockquote_1, () => ({ ...restProps, class: get(blockquoteCls) }));
  var node = child(blockquote_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Blockquote, 24, 2);
  reset(blockquote_1);
  append($$anchor, blockquote_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Blockquote = hmr(Blockquote, () => Blockquote[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Blockquote[HMR].source;
    set(Blockquote[HMR].source, module.default[HMR].original);
  });
}
var Blockquote_default = Blockquote;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/descriptionlist/theme.js
var descriptionList = T({
  variants: {
    tag: {
      dt: "text-gray-500 md:text-lg dark:text-gray-400",
      dd: "text-lg font-semibold"
    }
  },
  defaultVariants: {
    tag: "dt"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/descriptionlist/DescriptionList.svelte
DescriptionList[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/descriptionlist/DescriptionList.svelte";
function DescriptionList($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, DescriptionList);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("descriptionList");
  let descCls = tag(user_derived(() => descriptionList({ tag: $$props.tag, class: clsx_default(theme, $$props.class) })), "descCls");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(() => $$props.tag);
    validate_dynamic_element_tag(() => $$props.tag);
    element(
      node,
      () => $$props.tag,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({ ...restProps, class: get(descCls) }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", DescriptionList, 20, 2);
        append($$anchor2, fragment_1);
      },
      void 0,
      [19, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  DescriptionList = hmr(DescriptionList, () => DescriptionList[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = DescriptionList[HMR].source;
    set(DescriptionList[HMR].source, module.default[HMR].original);
  });
}
var DescriptionList_default = DescriptionList;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/heading/theme.js
var heading = T({
  base: "font-bold text-gray-900 dark:text-white",
  variants: {
    tag: {
      h1: "text-5xl font-extrabold",
      h2: "text-4xl",
      h3: "text-3xl",
      h4: "text-2xl",
      h5: "text-xl",
      h6: "text-lg"
    }
  },
  defaultVariants: {
    tag: "h1"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/heading/Heading.svelte
Heading[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/heading/Heading.svelte";
function Heading($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Heading);
  let tag2 = prop($$props, "tag", 3, "h1"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("heading");
  let headingCls = tag(user_derived(() => heading({ tag: tag2(), class: clsx_default(theme, $$props.class) })), "headingCls");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node,
      tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({ ...restProps, class: get(headingCls) }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Heading, 15, 2);
        append($$anchor2, fragment_1);
      },
      void 0,
      [14, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Heading = hmr(Heading, () => Heading[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Heading[HMR].source;
    set(Heading[HMR].source, module.default[HMR].original);
  });
}
var Heading_default = Heading;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/hr/theme.js
var hr = T({
  slots: {
    base: "h-px my-8 border-0",
    div: "inline-flex items-center justify-center w-full",
    content: "absolute px-4 -translate-x-1/2 rtl:translate-x-1/2 bg-white start-1/2 dark:bg-gray-900",
    bg: ""
  },
  variants: {
    withChildren: {
      true: {
        base: "w-full",
        div: "relative"
      }
    }
  },
  defaultVariants: {
    withChildren: false
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/hr/Hr.svelte
Hr[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/hr/Hr.svelte";
var root_171 = add_locations(from_html(`<div><hr/> <div><!></div></div>`), Hr[FILENAME], [[34, 2, [[35, 4], [36, 4]]]]);
var root_238 = add_locations(from_html(`<hr/>`), Hr[FILENAME], [[41, 2]]);
function Hr($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Hr);
  let divProps = prop($$props, "divProps", 19, () => ({})), hrProps = prop($$props, "hrProps", 19, () => ({})), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "divClass",
      "innerDivClass",
      "class",
      "classes",
      "divProps",
      "hrProps"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Hr",
    {
      divClass: $$props.divClass,
      innerDivClass: $$props.innerDivClass
    },
    { divClass: "div", innerDivClass: "content" }
  );
  const styling = tag(user_derived(() => ({ div: $$props.divClass, content: $$props.innerDivClass })), "styling");
  const theme = getTheme("hr");
  const bg = $$props.classes?.bg ?? "bg-gray-200 dark:bg-gray-700";
  const mergedDivProps = { ...restProps, ...divProps() };
  const mergedHrProps = { ...restProps, ...hrProps() };
  let $$d = tag(user_derived(() => hr({ withChildren: !!$$props.children })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), div = tag(user_derived(() => get($$d).div), "div"), content = tag(user_derived(() => get($$d).content), "content");
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    var consequent = ($$anchor2) => {
      var div_1 = root_171();
      attribute_effect(div_1, ($0) => ({ ...mergedDivProps, class: $0 }), [
        () => get(div)({ class: clsx_default(theme?.div, $$props.divClass) })
      ]);
      var hr_1 = child(div_1);
      attribute_effect(hr_1, ($0) => ({ ...mergedHrProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class, bg) })
      ]);
      var div_2 = sibling(hr_1, 2);
      var node_1 = child(div_2);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Hr, 37, 6);
      reset(div_2);
      reset(div_1);
      template_effect(($0) => set_class(div_2, 1, $0), [
        () => clsx2(get(content)({ class: clsx_default(theme?.content, get(styling).content) }))
      ]);
      append($$anchor2, div_1);
    };
    var alternate = ($$anchor2) => {
      var hr_2 = root_238();
      attribute_effect(hr_2, ($0) => ({ ...mergedHrProps, class: $0 }), [
        () => get(base)({ class: clsx_default(theme?.base, $$props.class, bg) })
      ]);
      append($$anchor2, hr_2);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
        else $$render(alternate, false);
      }),
      "if",
      Hr,
      33,
      0
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  Hr = hmr(Hr, () => Hr[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Hr[HMR].source;
    set(Hr[HMR].source, module.default[HMR].original);
  });
}
var Hr_default = Hr;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/img/theme.js
var img = T({
  slots: {
    base: "max-w-full h-auto",
    figure: "",
    caption: "mt-2 text-sm text-center text-gray-500 dark:text-gray-400"
  },
  variants: {
    size: {
      xs: { base: "max-w-xs", figure: "max-w-xs" },
      sm: { base: "max-w-sm", figure: "max-w-sm" },
      md: { base: "max-w-md", figure: "max-w-md" },
      lg: { base: "max-w-lg", figure: "max-w-lg" },
      xl: { base: "max-w-xl", figure: "max-w-xl" },
      "2xl": { base: "max-w-2xl", figure: "max-w-2xl" },
      full: { base: "max-w-full", figure: "max-w-full" },
      none: { base: "", figure: "" }
    },
    effect: {
      grayscale: {
        base: "cursor-pointer rounded-lg grayscale filter transition-all duration-300 hover:grayscale-0"
      },
      blur: { base: "blur-xs transition-all duration-300 hover:blur-none" },
      invert: {
        base: "invert filter transition-all duration-300 hover:invert-0"
      },
      sepia: {
        base: "sepia filter transition-all duration-300 hover:sepia-0"
      },
      saturate: {
        base: "saturate-50 filter transition-all duration-300 hover:saturate-100"
      },
      "hue-rotate": {
        base: "hue-rotate-60 filter transition-all duration-300 hover:hue-rotate-0"
      },
      none: {
        base: "transition-all duration-300"
      }
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/img/Img.svelte
Img[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/img/Img.svelte";
var root_239 = add_locations(from_html(`<figure><img/> <figcaption><!></figcaption></figure>`), Img[FILENAME], [[29, 4, [[30, 6], [31, 6]]]]);
var root_332 = add_locations(from_html(`<img/>`), Img[FILENAME], [[36, 4]]);
var root_428 = add_locations(from_html(`<a><!></a>`), Img[FILENAME], [[41, 2]]);
function Img($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Img);
  const imageSlot = wrap_snippet(Img, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var figure_1 = root_239();
        var img_1 = child(figure_1);
        attribute_effect(img_1, ($0) => ({ ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
        ]);
        var figcaption = sibling(img_1, 2);
        var node_1 = child(figcaption);
        html(node_1, () => $$props.caption);
        reset(figcaption);
        reset(figure_1);
        template_effect(
          ($0, $1) => {
            set_class(figure_1, 1, $0);
            set_class(figcaption, 1, $1);
          },
          [
            () => clsx2(get(figure)({ class: clsx_default(theme?.figure, get(styling).fig) })),
            () => clsx2(get(figureCaption)({ class: clsx_default(theme?.caption, get(styling).caption) }))
          ]
        );
        replay_events(img_1);
        append($$anchor3, figure_1);
      };
      var alternate = ($$anchor3) => {
        var img_2 = root_332();
        attribute_effect(img_2, ($0) => ({ ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
        ]);
        replay_events(img_2);
        append($$anchor3, img_2);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.caption) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        Img,
        28,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let size2 = prop($$props, "size", 3, "none"), effect = prop($$props, "effect", 3, "none"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "size",
      "effect",
      "caption",
      "class",
      "classes",
      "figClass",
      "captionClass",
      "href"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "Img",
    {
      figClass: $$props.figClass,
      captionClass: $$props.captionClass
    },
    { figClass: "fig", captionClass: "caption" }
  );
  const styling = tag(user_derived(() => ({ fig: $$props.figClass, caption: $$props.captionClass })), "styling");
  const theme = getTheme("img");
  let $$d = tag(user_derived(() => img({ size: size2(), effect: effect() })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), figure = tag(user_derived(() => get($$d).figure), "figure"), figureCaption = tag(user_derived(() => get($$d).caption), "figureCaption");
  var $$exports = { ...legacy_api() };
  var fragment_1 = comment();
  var node_2 = first_child(fragment_1);
  {
    var consequent_1 = ($$anchor2) => {
      var a2 = root_428();
      var node_3 = child(a2);
      add_svelte_meta(() => imageSlot(node_3), "render", Img, 42, 4);
      reset(a2);
      template_effect(() => set_attribute(a2, "href", $$props.href));
      append($$anchor2, a2);
    };
    var alternate_1 = ($$anchor2) => {
      add_svelte_meta(() => imageSlot($$anchor2), "render", Img, 45, 2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.href) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      Img,
      40,
      0
    );
  }
  append($$anchor, fragment_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Img = hmr(Img, () => Img[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Img[HMR].source;
    set(Img[HMR].source, module.default[HMR].original);
  });
}
var Img_default = Img;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/img/EnhancedImg.svelte
EnhancedImg[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/img/EnhancedImg.svelte";
var root_240 = add_locations(from_html(`<figure><enhanced:img></enhanced:img> <figcaption><!></figcaption></figure>`), EnhancedImg[FILENAME], [[29, 4, [[30, 6], [31, 6]]]]);
var root_333 = add_locations(from_html(`<enhanced:img></enhanced:img>`), EnhancedImg[FILENAME], [[36, 4]]);
var root_429 = add_locations(from_html(`<a><!></a>`), EnhancedImg[FILENAME], [[41, 2]]);
function EnhancedImg($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, EnhancedImg);
  const imageSlot = wrap_snippet(EnhancedImg, function($$anchor2) {
    validate_snippet_args(...arguments);
    var fragment = comment();
    var node = first_child(fragment);
    {
      var consequent = ($$anchor3) => {
        var figure_1 = root_240();
        var enhanced_img = child(figure_1);
        attribute_effect(enhanced_img, ($0) => ({ src: $$props.src, ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
        ]);
        var figcaption = sibling(enhanced_img, 2);
        var node_1 = child(figcaption);
        html(node_1, () => $$props.caption);
        reset(figcaption);
        reset(figure_1);
        template_effect(
          ($0, $1) => {
            set_class(figure_1, 1, $0);
            set_class(figcaption, 1, $1);
          },
          [
            () => clsx2(get(figure)({ class: clsx_default(theme?.figure, get(styling).fig) })),
            () => clsx2(get(figureCaption)({ class: clsx_default(theme?.caption, get(styling).caption) }))
          ]
        );
        append($$anchor3, figure_1);
      };
      var alternate = ($$anchor3) => {
        var enhanced_img_1 = root_333();
        attribute_effect(enhanced_img_1, ($0) => ({ src: $$props.src, ...restProps, class: $0 }), [
          () => get(base)({ class: clsx_default(theme?.base, $$props.class) })
        ]);
        append($$anchor3, enhanced_img_1);
      };
      add_svelte_meta(
        () => if_block(node, ($$render) => {
          if ($$props.caption) $$render(consequent);
          else $$render(alternate, false);
        }),
        "if",
        EnhancedImg,
        28,
        2
      );
    }
    append($$anchor2, fragment);
  });
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "src",
      "href",
      "caption",
      "size",
      "figClass",
      "class",
      "classes",
      "captionClass"
    ],
    "restProps"
  );
  warnThemeDeprecation(
    "EnhancedImg",
    {
      figClass: $$props.figClass,
      captionClass: $$props.captionClass
    },
    { figClass: "fig", captionClass: "caption" }
  );
  const styling = tag(user_derived(() => ({ fig: $$props.figClass, caption: $$props.captionClass })), "styling");
  const theme = getTheme("img");
  let $$d = tag(user_derived(() => img({ size: $$props.size })), "[$derived object]"), base = tag(user_derived(() => get($$d).base), "base"), figure = tag(user_derived(() => get($$d).figure), "figure"), figureCaption = tag(user_derived(() => get($$d).caption), "figureCaption");
  var $$exports = { ...legacy_api() };
  var fragment_1 = comment();
  var node_2 = first_child(fragment_1);
  {
    var consequent_1 = ($$anchor2) => {
      var a2 = root_429();
      var node_3 = child(a2);
      add_svelte_meta(() => imageSlot(node_3), "render", EnhancedImg, 42, 4);
      reset(a2);
      template_effect(() => set_attribute(a2, "href", $$props.href));
      append($$anchor2, a2);
    };
    var alternate_1 = ($$anchor2) => {
      add_svelte_meta(() => imageSlot($$anchor2), "render", EnhancedImg, 45, 2);
    };
    add_svelte_meta(
      () => if_block(node_2, ($$render) => {
        if ($$props.href) $$render(consequent_1);
        else $$render(alternate_1, false);
      }),
      "if",
      EnhancedImg,
      40,
      0
    );
  }
  append($$anchor, fragment_1);
  return pop($$exports);
}
if (import.meta.hot) {
  EnhancedImg = hmr(EnhancedImg, () => EnhancedImg[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = EnhancedImg[HMR].source;
    set(EnhancedImg[HMR].source, module.default[HMR].original);
  });
}
var EnhancedImg_default = EnhancedImg;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/layout/theme.js
var layout = T({
  base: "grid grid-cols-1 sm:grid-cols-2"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/layout/Layout.svelte
Layout[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/layout/Layout.svelte";
var root112 = add_locations(from_html(`<div><!></div>`), Layout[FILENAME], [[14, 0]]);
function Layout($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Layout);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("layout");
  let divCls = tag(user_derived(() => layout({ class: clsx_default(theme, $$props.class) })), "divCls");
  var $$exports = { ...legacy_api() };
  var div = root112();
  attribute_effect(div, () => ({ ...restProps, class: get(divCls) }));
  var node = child(div);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Layout, 15, 2);
  reset(div);
  append($$anchor, div);
  return pop($$exports);
}
if (import.meta.hot) {
  Layout = hmr(Layout, () => Layout[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Layout[HMR].source;
    set(Layout[HMR].source, module.default[HMR].original);
  });
}
var Layout_default = Layout;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/list/theme.js
var list = T({
  base: "",
  variants: {
    tag: {
      ul: "list-disc",
      dl: "list-none",
      ol: "list-decimal"
    },
    position: {
      inside: "list-inside",
      outside: "list-outside"
    }
  },
  defaultVariants: {
    position: "inside",
    tag: "ul"
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/list/List.svelte
List[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/list/List.svelte";
function List($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, List);
  let tag2 = prop($$props, "tag", 3, "ul"), isContenteditable = prop($$props, "isContenteditable", 3, false), position = prop($$props, "position", 3, "inside"), restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "tag",
      "isContenteditable",
      "position",
      "ctxClass",
      "class"
    ],
    "restProps"
  );
  const theme = getTheme("list");
  let contextClass = tag(state(proxy($$props.ctxClass || "")), "contextClass");
  setContext("ctxClass", () => get(contextClass));
  user_effect(() => {
    set(contextClass, $$props.ctxClass || "", true);
  });
  let classList = tag(
    user_derived(() => list({
      position: position(),
      tag: tag2(),
      class: clsx_default(theme, $$props.class)
    })),
    "classList"
  );
  var $$exports = { ...legacy_api() };
  var fragment = comment();
  var node = first_child(fragment);
  {
    validate_void_dynamic_element(tag2);
    validate_dynamic_element_tag(tag2);
    element(
      node,
      tag2,
      false,
      ($$element, $$anchor2) => {
        attribute_effect($$element, () => ({
          ...restProps,
          class: get(classList),
          contenteditable: isContenteditable()
        }));
        var fragment_1 = comment();
        var node_1 = first_child(fragment_1);
        add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", List, 24, 2);
        append($$anchor2, fragment_1);
      },
      void 0,
      [23, 0]
    );
  }
  append($$anchor, fragment);
  return pop($$exports);
}
if (import.meta.hot) {
  List = hmr(List, () => List[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = List[HMR].source;
    set(List[HMR].source, module.default[HMR].original);
  });
}
var List_default = List;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/list/Li.svelte
Li[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/list/Li.svelte";
var root113 = add_locations(from_html(`<li><!></li>`), Li[FILENAME], [[13, 0]]);
function Li($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Li);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "icon",
      "class"
    ],
    "restProps"
  );
  const getCtxClass = getContext("ctxClass");
  let liCls = tag(user_derived(() => clsx_default(getCtxClass(), $$props.icon && "flex items-center", $$props.class)), "liCls");
  var $$exports = { ...legacy_api() };
  var li = root113();
  attribute_effect(li, () => ({ ...restProps, class: get(liCls) }));
  var node = child(li);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Li, 14, 2);
  reset(li);
  append($$anchor, li);
  return pop($$exports);
}
if (import.meta.hot) {
  Li = hmr(Li, () => Li[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Li[HMR].source;
    set(Li[HMR].source, module.default[HMR].original);
  });
}
var Li_default = Li;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/mark/theme.js
var mark = T({
  base: "text-white dark:bg-blue-500 bg-blue-600 px-2 rounded-sm"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/mark/Mark.svelte
Mark[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/mark/Mark.svelte";
var root114 = add_locations(from_html(`<mark><!></mark>`), Mark[FILENAME], [[12, 0]]);
function Mark($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Mark);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("mark");
  var $$exports = { ...legacy_api() };
  var mark_1 = root114();
  attribute_effect(mark_1, ($0) => ({ ...restProps, class: $0 }), [() => mark({ class: clsx_default(theme, $$props.class) })]);
  var node = child(mark_1);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Mark, 13, 2);
  reset(mark_1);
  append($$anchor, mark_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Mark = hmr(Mark, () => Mark[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Mark[HMR].source;
    set(Mark[HMR].source, module.default[HMR].original);
  });
}
var Mark_default = Mark;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/secondary/theme.js
var secondary = T({
  base: "text-gray-500 dark:text-gray-400 font-semibold"
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/secondary/Secondary.svelte
Secondary[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/secondary/Secondary.svelte";
var root115 = add_locations(from_html(`<small><!></small>`), Secondary[FILENAME], [[12, 0]]);
function Secondary($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Secondary);
  let restProps = rest_props($$props, ["$$slots", "$$events", "$$legacy", "children", "class"], "restProps");
  const theme = getTheme("secondary");
  var $$exports = { ...legacy_api() };
  var small = root115();
  attribute_effect(small, ($0) => ({ ...restProps, class: $0 }), [() => secondary({ class: clsx_default(theme, $$props.class) })]);
  var node = child(small);
  add_svelte_meta(() => snippet(node, () => $$props.children), "render", Secondary, 13, 2);
  reset(small);
  append($$anchor, small);
  return pop($$exports);
}
if (import.meta.hot) {
  Secondary = hmr(Secondary, () => Secondary[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Secondary[HMR].source;
    set(Secondary[HMR].source, module.default[HMR].original);
  });
}
var Secondary_default = Secondary;

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/span/theme.js
var span = T({
  variants: {
    italic: {
      true: "italic"
    },
    underline: {
      true: "underline decoration-2 decoration-blue-400 dark:decoration-blue-600"
    },
    linethrough: {
      true: "line-through"
    },
    uppercase: {
      true: "uppercase"
    },
    gradient: {
      skyToEmerald: "text-transparent bg-clip-text bg-linear-to-r to-emerald-600 from-sky-400",
      purpleToBlue: "text-transparent bg-clip-text bg-linear-to-r from-purple-500 to-blue-500",
      pinkToOrange: "text-transparent bg-clip-text bg-linear-to-r from-pink-500 to-orange-400",
      tealToLime: "text-transparent bg-clip-text bg-linear-to-r from-teal-400 to-lime-300",
      redToYellow: "text-transparent bg-clip-text bg-linear-to-r from-red-600 to-yellow-500",
      indigoToCyan: "text-transparent bg-clip-text bg-linear-to-r from-indigo-600 to-cyan-400",
      fuchsiaToRose: "text-transparent bg-clip-text bg-linear-to-r from-fuchsia-500 to-rose-500",
      amberToEmerald: "text-transparent bg-clip-text bg-linear-to-r from-amber-400 to-emerald-500",
      violetToRed: "text-transparent bg-clip-text bg-linear-to-r from-violet-600 to-red-500",
      blueToGreen: "text-transparent bg-clip-text bg-linear-to-r from-blue-400 via-teal-500 to-green-400",
      orangeToPurple: "text-transparent bg-clip-text bg-linear-to-r from-orange-400 via-pink-500 to-purple-500",
      yellowToRed: "text-transparent bg-clip-text bg-linear-to-r from-yellow-200 via-indigo-400 to-red-600",
      none: ""
    },
    highlight: {
      blue: "text-blue-600 dark:text-blue-500",
      green: "text-green-600 dark:text-green-500",
      red: "text-red-600 dark:text-red-500",
      yellow: "text-yellow-600 dark:text-yellow-500",
      purple: "text-purple-600 dark:text-purple-500",
      pink: "text-pink-600 dark:text-pink-500",
      indigo: "text-indigo-600 dark:text-indigo-500",
      teal: "text-teal-600 dark:text-teal-500",
      orange: "text-orange-600 dark:text-orange-500",
      cyan: "text-cyan-600 dark:text-cyan-500",
      fuchsia: "text-fuchsia-600 dark:text-fuchsia-500",
      amber: "text-amber-600 dark:text-amber-500",
      lime: "text-lime-600 dark:text-lime-500",
      none: ""
    },
    decoration: {
      solid: "underline decoratio-solid",
      double: "underline decoration-double",
      dotted: "underline decoration-dotted",
      dashed: "underline decoration-dashed",
      wavy: "underline decoration-wavy",
      none: "decoration-none"
    },
    decorationColor: {
      // blue, green, red, yellow, purple, pink, indigo, teal, orange, cyan, fuchsia, amber, lime, none
      // radio
      // primary, secondary, gray, red, orange, amber, yellow, lime, green, emerald, teal, cyan, sky, blue, indigo, violet, purple, fuchsia, pink, rose
      primary: "underline decoration-primary-400 dark:decoration-primary-600",
      secondary: "underline decoration-secondary-400 dark:decoration-secondary-600",
      gray: "underline decoration-gray-400 dark:decoration-gray-600",
      orange: "underline decoration-orange-400 dark:decoration-orange-600",
      red: "underline decoration-red-400 dark:decoration-red-600",
      yellow: "underline decoration-yellow-400 dark:decoration-yellow-600",
      lime: "underline decoration-lime-400 dark:decoration-lime-600",
      green: "underline decoration-green-400 dark:decoration-green-600",
      emerald: "underline decoration-emerald-400 dark:decoration-emerald-600",
      teal: "underline decoration-teal-400 dark:decoration-teal-600",
      cyan: "underline decoration-cyan-400 dark:decoration-cyan-600",
      sky: "underline decoration-sky-400 dark:decoration-sky-600",
      blue: "underline decoration-blue-400 dark:decoration-blue-600",
      indigo: "underline decoration-indigo-400 dark:decoration-indigo-600",
      violet: "underline decoration-violet-400 dark:decoration-violet-600",
      purple: "underline decoration-purple-400 dark:decoration-purple-600",
      fuchsia: "underline decoration-fuchsia-400 dark:decoration-fuchsia-600",
      pink: "underline decoration-pink-400 dark:decoration-pink-600",
      rose: "underline decoration-rose-400 dark:decoration-rose-600",
      none: "decoration-none"
    },
    decorationThickness: {
      "1": "underline decoration-1",
      "2": "underline decoration-2",
      "4": "underline decoration-4",
      "8": "underline decoration-8",
      "0": "decoration-0"
    }
  }
});

// node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/span/Span.svelte
Span[FILENAME] = "node_modules/.pnpm/flowbite-svelte@1.16.0_rollup@4.52.3_svelte@5.39.6_tailwindcss@4.1.13/node_modules/flowbite-svelte/dist/typography/span/Span.svelte";
var root116 = add_locations(from_html(`<span><!></span>`), Span[FILENAME], [[27, 0]]);
function Span($$anchor, $$props) {
  check_target(new.target);
  push($$props, true, Span);
  let restProps = rest_props(
    $$props,
    [
      "$$slots",
      "$$events",
      "$$legacy",
      "children",
      "class",
      "italic",
      "underline",
      "linethrough",
      "uppercase",
      "gradient",
      "highlight",
      "decoration",
      "decorationColor",
      "decorationThickness"
    ],
    "restProps"
  );
  const theme = getTheme("span");
  let classSpan = tag(
    user_derived(() => span({
      italic: $$props.italic,
      underline: $$props.underline,
      linethrough: $$props.linethrough,
      uppercase: $$props.uppercase,
      gradient: $$props.gradient,
      highlight: $$props.highlight,
      decoration: $$props.decoration,
      decorationColor: $$props.decorationColor,
      decorationThickness: $$props.decorationThickness,
      class: clsx_default(theme, $$props.class)
    })),
    "classSpan"
  );
  var $$exports = { ...legacy_api() };
  var span_1 = root116();
  attribute_effect(span_1, () => ({ ...restProps, class: get(classSpan) }));
  var node = child(span_1);
  {
    var consequent = ($$anchor2) => {
      var fragment = comment();
      var node_1 = first_child(fragment);
      add_svelte_meta(() => snippet(node_1, () => $$props.children), "render", Span, 29, 4);
      append($$anchor2, fragment);
    };
    add_svelte_meta(
      () => if_block(node, ($$render) => {
        if ($$props.children) $$render(consequent);
      }),
      "if",
      Span,
      28,
      2
    );
  }
  reset(span_1);
  append($$anchor, span_1);
  return pop($$exports);
}
if (import.meta.hot) {
  Span = hmr(Span, () => Span[HMR].source);
  import.meta.hot.accept((module) => {
    module.default[HMR].source = Span[HMR].source;
    set(Span[HMR].source, module.default[HMR].original);
  });
}
var Span_default = Span;
export {
  A_default as A,
  Accordion_default as Accordion,
  AccordionItem_default as AccordionItem,
  Activity_default as Activity,
  ActivityItem_default as ActivityItem,
  AdvancedRating_default as AdvancedRating,
  Alert_default as Alert,
  Android_default as Android,
  Avatar_default as Avatar,
  BREAKPOINTS,
  Badge_default as Badge,
  Banner_default as Banner,
  Blockquote_default as Blockquote,
  BottomNav_default as BottomNav,
  BottomNavHeader_default as BottomNavHeader,
  BottomNavHeaderItem_default as BottomNavHeaderItem,
  BottomNavItem_default as BottomNavItem,
  Breadcrumb_default as Breadcrumb,
  BreadcrumbItem_default as BreadcrumbItem,
  BreadcrumbStepper_default as BreadcrumbStepper,
  Button_default as Button,
  ButtonGroup_default as ButtonGroup,
  ButtonToggle_default as ButtonToggle,
  ButtonToggleGroup_default as ButtonToggleGroup,
  Card_default as Card,
  CardPlaceholder_default as CardPlaceholder,
  Carousel_default as Carousel,
  CarouselIndicators_default as CarouselIndicators,
  CheckIcon_default as CheckIcon,
  Checkbox_default as Checkbox,
  CheckboxButton_default as CheckboxButton,
  Clipboard_default as Clipboard,
  CloseButton_default as CloseButton,
  ControlButton_default as ControlButton,
  Controls_default as Controls,
  CustomIcon_default as CustomIcon,
  DarkMode_default as DarkMode,
  Datepicker_default as Datepicker,
  DefaultMockup_default as DefaultMockup,
  DescriptionList_default as DescriptionList,
  Desktop_default as Desktop,
  DetailedStepper_default as DetailedStepper,
  DeviceMockup_default as DeviceMockup,
  Dialog_default as Dialog,
  Drawer_default as Drawer,
  DrawerHandle_default as DrawerHandle,
  Drawerhead_default as Drawerhead,
  Dropdown_default as Dropdown,
  DropdownDivider_default as DropdownDivider,
  DropdownGroup_default as DropdownGroup,
  DropdownHeader_default as DropdownHeader,
  DropdownItem_default as DropdownItem,
  Dropzone_default as Dropzone,
  EnhancedImg_default as EnhancedImg,
  Fileupload_default as Fileupload,
  FloatingLabelInput_default as FloatingLabelInput,
  Footer_default as Footer,
  FooterBrand_default as FooterBrand,
  FooterCopyright_default as FooterCopyright,
  FooterIcon_default as FooterIcon,
  FooterLink_default as FooterLink,
  FooterLinkGroup_default as FooterLinkGroup,
  Gallery_default as Gallery,
  GradientButton_default as GradientButton,
  Group_default as Group,
  GroupItem_default as GroupItem,
  Heading_default as Heading,
  Heart_default as Heart,
  Helper_default as Helper,
  Hr_default as Hr,
  ImagePlaceholder_default as ImagePlaceholder,
  Img_default as Img,
  Indicator_default as Indicator,
  Input_default as Input,
  InputAddon_default as InputAddon,
  Ios_default as Ios,
  Kbd_default as Kbd,
  Label_default as Label,
  Laptop_default as Laptop,
  Layout_default as Layout,
  Li_default as Li,
  List_default as List,
  ListPlaceholder_default as ListPlaceholder,
  Listgroup_default as Listgroup,
  ListgroupItem_default as ListgroupItem,
  Mark_default as Mark,
  MegaMenu_default as MegaMenu,
  Modal_default as Modal,
  MultiSelect_default as MultiSelect,
  NavBrand_default as NavBrand,
  NavContainer_default as NavContainer,
  NavHamburger_default as NavHamburger,
  NavLi_default as NavLi,
  NavUl_default as NavUl,
  Navbar_default as Navbar,
  P_default as P,
  Pagination_default as Pagination,
  PaginationButton_default as PaginationButton,
  PaginationItem_default as PaginationItem,
  PaginationNav_default as PaginationNav,
  PhoneInput_default as PhoneInput,
  Popover_default as Popover,
  Popper_default as Popper,
  ProgressStepper_default as ProgressStepper,
  Progressbar_default as Progressbar,
  Progressradial_default as Progressradial,
  Radio_default as Radio,
  RadioButton_default as RadioButton,
  Range_default as Range,
  Rating_default as Rating,
  RatingComment_default as RatingComment,
  Review_default as Review,
  ScoreRating_default as ScoreRating,
  Search_default as Search,
  Secondary_default as Secondary,
  Select_default as Select,
  Sidebar_default as Sidebar,
  SidebarBrand_default as SidebarBrand,
  SidebarButton_default as SidebarButton,
  SidebarCta_default as SidebarCta,
  SidebarItem_default as SidebarDropdownItem,
  SidebarDropdownWrapper_default as SidebarDropdownWrapper,
  SidebarGroup_default as SidebarGroup,
  SidebarItem_default as SidebarItem,
  SidebarWrapper_default as SidebarWrapper,
  Skeleton_default as Skeleton,
  Slide_default as Slide,
  Smartwatch_default as Smartwatch,
  Span_default as Span,
  SpeedDial_default as SpeedDial,
  SpeedDialButton_default as SpeedDialButton,
  SpeedDialTrigger_default as SpeedDialTrigger,
  Spinner_default as Spinner,
  Star_default as Star,
  StepIndicator_default as StepIndicator,
  Stepper_default as Stepper,
  TabItem_default as TabItem,
  Table_default as Table,
  TableBody_default as TableBody,
  TableBodyCell_default as TableBodyCell,
  TableBodyRow_default as TableBodyRow,
  TableHead_default as TableHead,
  TableHeadCell_default as TableHeadCell,
  TableSearch_default as TableSearch,
  Tablet_default as Tablet,
  Tabs_default as Tabs,
  Tags_default as Tags,
  TestimonialPlaceholder_default as TestimonialPlaceholder,
  TextPlaceholder_default as TextPlaceholder,
  Textarea_default as Textarea,
  ThemeProvider_default as ThemeProvider,
  Thumbnail_default as Thumbnail,
  Thumbnails_default as Thumbnails,
  Thumbup_default as Thumbup,
  Timeline_default as Timeline,
  TimelineItem_default as TimelineItem,
  TimelineStepper_default as TimelineStepper,
  Timepicker_default as Timepicker,
  Toast_default as Toast,
  Toggle_default as Toggle,
  Toolbar_default as Toolbar,
  ToolbarButton_default as ToolbarButton,
  ToolbarGroup_default as ToolbarGroup,
  Tooltip_default as Tooltip,
  VerticalStepper_default as VerticalStepper,
  Video_default as Video,
  VideoPlaceholder_default as VideoPlaceholder,
  WidgetPlaceholder_default as WidgetPlaceholder,
  accordion,
  accordionItem,
  activity,
  activityItem,
  advancedRating,
  alert,
  anchor,
  android,
  avatar,
  badge,
  banner,
  blockquote,
  bottomNav,
  bottomNavHeader,
  bottomNavHeaderItem,
  bottomNavItem,
  breadcrumb,
  breadcrumbItem,
  breadcrumbStepper,
  button,
  buttonGroup,
  buttonToggle,
  buttonToggleGroup,
  card,
  cardPlaceholder,
  carousel,
  carouselIndicators,
  checkbox,
  checkboxButton,
  clampSize,
  clickOutside,
  clipboard,
  closeButton,
  cn,
  controlButton,
  darkmode,
  datepicker,
  defaultMockup,
  descriptionList,
  desktop,
  detailedStepper,
  dialog,
  drawer,
  drawerhandle,
  drawerhead,
  dropdown,
  dropdownDivider,
  dropdownGroup,
  dropdownHeader,
  dropdownItem,
  dropzone,
  fileupload,
  floatingLabelInput,
  footer,
  footerBrand,
  footerCopyright,
  footerIcon,
  footerLink,
  footerLinkGroup,
  gallery,
  getStepStateClasses,
  getTheme,
  gradientButton,
  group,
  groupItem,
  heading,
  helper,
  hr,
  idGenerator,
  imagePlaceholder,
  img,
  indicator,
  input,
  ios,
  kbd,
  label,
  laptop,
  layout,
  list,
  listGroup,
  listGroupItem,
  listPlaceholder,
  mark,
  megamenu,
  modal,
  multiSelect,
  navbar,
  navbarBrand,
  navbarContainer,
  navbarHamburger,
  navbarLi,
  navbarUl,
  pagination,
  paginationButton,
  paginationItem,
  paginationNav,
  paragraph,
  phoneInput,
  popover,
  progressStepper,
  progressbar,
  progressradial,
  radio,
  radioButton,
  range,
  rating,
  review,
  scoreRating,
  search,
  secondary,
  select,
  sidebar,
  sidebarBrand,
  sidebarButton,
  sidebarCta,
  sidebarDropdownWrapper,
  skeleton,
  slide2 as slide,
  smartwatch,
  span,
  speedDial,
  speedDialButton,
  spinner,
  stepIndicator,
  stepper,
  tabItem,
  table,
  tableBodyCell,
  tableBodyRow,
  tableHead,
  tableHeadCell,
  tableSearch,
  tablet,
  tabs,
  tags,
  testimonialPlaceholder,
  textPlaceholder,
  textarea,
  thumbnail,
  thumbnails,
  timeline,
  timelineItem,
  timelineStepper,
  timepicker,
  toast,
  toggle,
  toolbar,
  toolbarButton,
  toolbarGroup,
  tooltip,
  trapFocus,
  uiHelpers,
  useBreakpoints,
  useCurrentBreakpoint,
  useMediaQuery,
  verticalStepper,
  videoPlaceholder,
  widgetPlaceholder
};
//# sourceMappingURL=flowbite-svelte.js.map
